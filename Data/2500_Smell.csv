function,smellKey,smellId
"public short getDefaultValueAs_short(){
    try {
        return initExpr == null ? 0 : Short.parseShort(initExpr);
    } catch (NumberFormatException nfe) {
        return StringUtils.isEmpty(initExpr) ? 0 : CoreComponentsBuilder.get().getMVELExecutor().eval(initExpr, Short.class);
    }
}",java:S100,
"public static Geometry ST_SymDifference(Geometry geom1, Geometry geom2){
    return geom1.symDifference(geom2);
}",java:S100,
"public static T CONST(final T v){
    return v;
}",java:S100,
"private static String escapePercentExceptWhenFollowedBy_n(String message){
    return revertEscapingPercent_n(escapePercent(message));
}",java:S100,
"public static Geometry ST_Rotate(Geometry geom, BigDecimal angle, BigDecimal x, BigDecimal y){
    AffineTransformation transformation = new AffineTransformation();
    transformation.rotate(angle.doubleValue(), x.doubleValue(), y.doubleValue());
    return transformation.transform(geom);
}",java:S100,
" static LookupImpl<TKey, TElement> toLookup_(Map<TKey, List<TElement>> map, Enumerable<TSource> source, Function1<TSource, TKey> keySelector, Function1<TSource, TElement> elementSelector){
    try (Enumerator<TSource> os = source.enumerator()) {
        while (os.moveNext()) {
            TSource o = os.current();
            final TKey key = keySelector.apply(o);
            @SuppressWarnings(""nullness"")
            List<TElement> list = map.get(key);
            if (list == null) {
                list = Collections.singletonList(elementSelector.apply(o));
            } else {
                if (list.size() == 1) {
                    TElement element = list.get(0);
                    list = new ArrayList<>();
                    list.add(element);
                }
                list.add(elementSelector.apply(o));
            }
            map.put(key, list);
        }
    }
    return new LookupImpl<>(map);
}",java:S100,
"public static Geometry ST_Snap(Geometry geom1, Geometry geom2, BigDecimal snapTolerance){
    GeometrySnapper snapper = new GeometrySnapper(geom1);
    return snapper.snapTo(geom2, snapTolerance.doubleValue());
}",java:S100,
"public String getCanonicalName_friendlyToInnerClasses(@NonNull final Class<?> cls){
    val name = cls.getCanonicalName();
    if (name == null) {
        return cls.getName().replace(""$"", "".$"").replace("".."", ""."");
    }
    return name;
}",java:S100,
"private void eliminaAllegatoBy_Doqui(CnmTAllegato cnmTAllegato){
    String idIndex = validateRequestAllegatoAndGetIdIndex(cnmTAllegato);
    ResponseEliminaDocumento response = null;
    if (idIndex != null) {
        response = doquiServiceFacade.eliminaDocumentoIndex(idIndex);
        if (response == null)
            throw new RuntimeException(""documento non trovato su per idIndex:"" + idIndex);
    }
    List<CnmTAllegatoField> field = cnmTAllegatoFieldRepository.findByCnmTAllegato(cnmTAllegato);
    if (field != null && !field.isEmpty())
        cnmTAllegatoFieldRepository.delete(field);
    cnmTAllegatoRepository.delete(cnmTAllegato);
}",java:S100,
"protected ArrayList<String> _split_multi_line(String text, int max_len){
    ArrayList<String> output = new ArrayList<String>();
    text = text.trim();
    if (text.length() <= max_len) {
        output.add(text);
        return output;
    }
    ArrayList<String> words = new ArrayList<String>();
    Collections.addAll(words, text.split(""\\s+""));
    while (!words.isEmpty()) {
        text = words.remove(0);
        while (!words.isEmpty() && (text.length() + 1 + words.get(0).length()) <= max_len) {
            text += "" "" + words.remove(0);
            text = text.trim();
        }
        output.add(text);
    }
    assert words.isEmpty();
    return output;
}",java:S100,
"private static Enumerable<TSource> semiJoinWithPredicate_(final Enumerable<TSource> outer, final Enumerable<TInner> inner, final Function1<TSource, TKey> outerKeySelector, final Function1<TInner, TKey> innerKeySelector, final EqualityComparer<TKey> comparer, final boolean anti, final Predicate2<TSource, TInner> nonEquiPredicate){
    return new AbstractEnumerable<TSource>() {

        @Override
        public Enumerator<TSource> enumerator() {
            final Supplier<Lookup<TKey, TInner>> innerLookup = Suppliers.memoize(() -> comparer == null ? inner.toLookup(innerKeySelector) : inner.toLookup(innerKeySelector, comparer));
            final Predicate1<TSource> predicate = v0 -> {
                TKey key = outerKeySelector.apply(v0);
                @SuppressWarnings(""argument.type.incompatible"")
                Enumerable<TInner> innersOfKey = innerLookup.get().get(key);
                if (innersOfKey == null) {
                    return anti;
                }
                try (Enumerator<TInner> os = innersOfKey.enumerator()) {
                    while (os.moveNext()) {
                        TInner v1 = os.current();
                        if (nonEquiPredicate.apply(v0, v1)) {
                            return !anti;
                        }
                    }
                    return anti;
                }
            };
            return EnumerableDefaults.where(outer.enumerator(), predicate);
        }
    };
}",java:S100,
"private ResponseProtocollaDocumento avviaProtocollazione_Doqui(List<CnmRAllegatoVerbale> cnmRAllegatoVerbaleList, CnmTUser cnmTUser){
    CnmRAllegatoVerbale cnmRAllegatoVerbale = Iterables.tryFind(cnmRAllegatoVerbaleList, UtilsTipoAllegato.findAllegatoInCnmRAllegatoVerbaleByTipoAllegato(TipoAllegato.RAPPORTO_TRASMISSIONE)).orNull();
    if (cnmRAllegatoVerbale == null)
        throw new RuntimeException(""verbale di trasmissione non trovato"");
    ResponseProtocollaDocumento responseProtocollaDocumento = null;
    Timestamp now = utilsDate.asTimeStamp(LocalDateTime.now());
    List<CnmTAllegato> cnmTAllegatoList = new ArrayList<>();
    CnmTAllegato cnmTAllegato = cnmRAllegatoVerbale.getCnmTAllegato();
    if (cnmTAllegato.getCnmDStatoAllegato().getIdStatoAllegato() != Constants.STATO_ALLEGATO_PROTOCOLLATO && cnmTAllegato.getCnmDStatoAllegato().getIdStatoAllegato() != Constants.STATO_ALLEGATO_DA_PROTOCOLLARE_IN_ISTANTE_SUCCESSIVO && cnmTAllegato.getCnmDStatoAllegato().getIdStatoAllegato() != Constants.STATO_ALLEGATO_PROTOCOLLATO_IN_ALTRA_STRUTTURA)
        throw new RuntimeException(""Rapporto di trasmissione non e' nello stato corretto"");
    CnmTVerbale cnmTVerbale = cnmRAllegatoVerbale.getCnmTVerbale();
    Map<String, String> protocolliGestiti = new HashMap<>();
    String operationToTrace = null;
    if (cnmTAllegato.getCnmDStatoAllegato().getIdStatoAllegato() == Constants.STATO_ALLEGATO_PROTOCOLLATO_IN_ALTRA_STRUTTURA || cnmTAllegato.getCnmDStatoAllegato().getIdStatoAllegato() == Constants.STATO_ALLEGATO_PROTOCOLLATO) {
        responseProtocollaDocumento = gestisciDocumentoProtocollato(cnmTAllegato, cnmTVerbale, protocolliGestiti);
        tracciaSuCsiLogAudit(protocolliGestiti, cnmTAllegato, responseProtocollaDocumento != null ? responseProtocollaDocumento.getObjectIdDocumentoToTraceList() : null);
        if (responseProtocollaDocumento == null) {
            responseProtocollaDocumento = new ResponseProtocollaDocumento();
        }
        responseProtocollaDocumento.setProtocollo(cnmTAllegato.getNumeroProtocollo());
        for (CnmRAllegatoVerbale cnmRAllegatoVerbaleTs : cnmRAllegatoVerbaleList) {
            CnmTAllegato cnmTAllegatoTs = cnmRAllegatoVerbaleTs.getCnmTAllegato();
            if (cnmTAllegatoTs.getCnmDStatoAllegato().getIdStatoAllegato() == Constants.STATO_ALLEGATO_DA_PROTOCOLLARE_IN_ISTANTE_SUCCESSIVO) {
                ResponseProtocollaDocumento responseProtocollaDocumentoAllegato = doquiServiceFacade.protocollaDocumentoFisico(utilsDoqui.createOrGetfolder(cnmTVerbale), null, cnmTAllegatoTs.getNomeFile(), utilsDoqui.createIdEntitaFruitore(cnmTVerbale, cnmTAllegatoTs.getCnmDTipoAllegato()), false, false, utilsDoqui.getSoggettoActa(cnmTVerbale), utilsDoqui.getRootActa(cnmTVerbale), cnmTAllegatoTs.getCnmDTipoAllegato().getIdTipoAllegato(), DoquiServiceFacade.TIPOLOGIA_DOC_ACTA_DOC_INGRESSO_SENZA_ALLEGATI, null, cnmTAllegatoTs.getIdIndex());
                cnmTAllegatoTs.setIdActa(responseProtocollaDocumentoAllegato.getIdDocumento());
                try {
                    doquiServiceFacade.eliminaDocumentoIndex(cnmTAllegatoTs.getIdIndex());
                    utilsTraceCsiLogAuditService.traceCsiLogAudit(TraceOperation.SPOSTAMENTO_ALLEGATO_DA_INDEX.getOperation(), cnmTAllegatoTs.getClass().getAnnotation(Table.class).name(), ""id_allegato="" + cnmTAllegatoTs.getIdAllegato(), Thread.currentThread().getStackTrace()[1].getMethodName(), cnmTAllegatoTs.getCnmDTipoAllegato().getDescTipoAllegato());
                } catch (Exception e) {
                    logger.error(""Non riesco ad eliminare l'allegato con idIndex :: "" + cnmTAllegatoTs.getIdIndex());
                }
                cnmTAllegatoTs.setIdIndex(null);
                cnmTAllegatoTs.setNumeroProtocollo(responseProtocollaDocumentoAllegato.getProtocollo());
                cnmTAllegatoTs.setDataOraProtocollo(now);
                operationToTrace = cnmTAllegatoTs.isFlagDocumentoPregresso() ? TraceOperation.INSERIMENTO_ALLEGATO_PREGRESSO.getOperation() : TraceOperation.INSERIMENTO_ALLEGATO.getOperation();
                utilsTraceCsiLogAuditService.traceCsiLogAudit(operationToTrace, Constants.OGGETTO_ACTA, ""objectIdDocumento="" + responseProtocollaDocumentoAllegato.getObjectIdDocumento(), Thread.currentThread().getStackTrace()[1].getMethodName(), cnmTAllegatoTs.getCnmDTipoAllegato().getDescTipoAllegato());
                if (responseProtocollaDocumentoAllegato.getIdFolder() != null) {
                    operationToTrace = cnmTVerbale.getCnmDStatoPregresso().getIdStatoPregresso() > 1 ? TraceOperation.INSERIMENTO_FASCICOLO_PREGRESSO.getOperation() : TraceOperation.INSERIMENTO_FASCICOLO.getOperation();
                    utilsTraceCsiLogAuditService.traceCsiLogAudit(operationToTrace, Constants.OGGETTO_ACTA, ""idFolder="" + responseProtocollaDocumentoAllegato.getIdFolder(), Thread.currentThread().getStackTrace()[1].getMethodName(), ""creaFascicoloSuActa"");
                }
            } else {
                if (!protocolliGestiti.containsKey(cnmTAllegatoTs.getNumeroProtocollo())) {
                    logger.debug(""trovato un nuovo protocollo:"" + cnmTAllegatoTs.getNumeroProtocollo() + "" diverso da quello del rapporto di trasmissione: "" + responseProtocollaDocumento.getProtocollo());
                    ResponseProtocollaDocumento responseProtocollaDocumentoAltroProt = gestisciDocumentoProtocollato(cnmTAllegatoTs, cnmTVerbale, protocolliGestiti);
                    tracciaSuCsiLogAudit(protocolliGestiti, cnmTAllegatoTs, responseProtocollaDocumentoAltroProt != null ? responseProtocollaDocumentoAltroProt.getObjectIdDocumentoToTraceList() : null);
                }
            }
            cnmTAllegatoTs.setCnmDStatoAllegato(cnmDStatoAllegatoRepository.findOne(Constants.STATO_ALLEGATO_PROTOCOLLATO));
            cnmTAllegatoTs.setObjectidSpostamentoActa(null);
            cnmTAllegatoTs.setDataOraUpdate(now);
            cnmTAllegatoTs.setCnmTUser1(cnmTUser);
            cnmTAllegatoList.add(cnmTAllegatoTs);
        }
        List<CnmTAllegato> allegatiRelata = cnmTAllegatoRepository.findAllegatiRelataGiaProtocollati(cnmTVerbale.getIdVerbale());
        for (CnmTAllegato cnmTAllegatoTs : allegatiRelata) {
            if (cnmTAllegatoTs.getCnmDStatoAllegato().getIdStatoAllegato() == Constants.STATO_ALLEGATO_DA_PROTOCOLLARE_IN_ISTANTE_SUCCESSIVO) {
                ResponseProtocollaDocumento responseProtocollaDocumentoAllegato = doquiServiceFacade.protocollaDocumentoFisico(utilsDoqui.createOrGetfolder(cnmTVerbale), null, cnmTAllegatoTs.getNomeFile(), utilsDoqui.createIdEntitaFruitore(cnmTVerbale, cnmTAllegatoTs.getCnmDTipoAllegato()), false, false, utilsDoqui.getSoggettoActa(cnmTVerbale), utilsDoqui.getRootActa(cnmTVerbale), cnmTAllegatoTs.getCnmDTipoAllegato().getIdTipoAllegato(), DoquiServiceFacade.TIPOLOGIA_DOC_ACTA_DOC_INGRESSO_SENZA_ALLEGATI, null, cnmTAllegatoTs.getIdIndex());
                cnmTAllegatoTs.setIdActa(responseProtocollaDocumentoAllegato.getIdDocumento());
                try {
                    doquiServiceFacade.eliminaDocumentoIndex(cnmTAllegatoTs.getIdIndex());
                    utilsTraceCsiLogAuditService.traceCsiLogAudit(TraceOperation.SPOSTAMENTO_ALLEGATO_DA_INDEX.getOperation(), cnmTAllegatoTs.getClass().getAnnotation(Table.class).name(), ""id_allegato="" + cnmTAllegatoTs.getIdAllegato(), Thread.currentThread().getStackTrace()[1].getMethodName(), cnmTAllegatoTs.getCnmDTipoAllegato().getDescTipoAllegato());
                } catch (Exception e) {
                    logger.error(""Non riesco ad eliminare l'allegato con idIndex :: "" + cnmTAllegatoTs.getIdIndex());
                }
                cnmTAllegatoTs.setIdIndex(null);
                cnmTAllegatoTs.setNumeroProtocollo(responseProtocollaDocumentoAllegato.getProtocollo());
                cnmTAllegatoTs.setDataOraProtocollo(now);
                operationToTrace = cnmTAllegatoTs.isFlagDocumentoPregresso() ? TraceOperation.INSERIMENTO_ALLEGATO_PREGRESSO.getOperation() : TraceOperation.INSERIMENTO_ALLEGATO.getOperation();
                utilsTraceCsiLogAuditService.traceCsiLogAudit(operationToTrace, Constants.OGGETTO_ACTA, ""objectIdDocumento="" + responseProtocollaDocumentoAllegato.getObjectIdDocumento(), Thread.currentThread().getStackTrace()[1].getMethodName(), cnmTAllegatoTs.getCnmDTipoAllegato().getDescTipoAllegato());
                if (responseProtocollaDocumentoAllegato.getIdFolder() != null) {
                    operationToTrace = cnmTVerbale.getCnmDStatoPregresso().getIdStatoPregresso() > 1 ? TraceOperation.INSERIMENTO_FASCICOLO_PREGRESSO.getOperation() : TraceOperation.INSERIMENTO_FASCICOLO.getOperation();
                    utilsTraceCsiLogAuditService.traceCsiLogAudit(operationToTrace, Constants.OGGETTO_ACTA, ""idFolder="" + responseProtocollaDocumentoAllegato.getIdFolder(), Thread.currentThread().getStackTrace()[1].getMethodName(), ""creaFascicoloSuActa"");
                }
            } else {
                if (!protocolliGestiti.containsKey(cnmTAllegatoTs.getNumeroProtocollo())) {
                    logger.debug(""trovato un nuovo protocollo:"" + cnmTAllegatoTs.getNumeroProtocollo() + "" diverso da quello del rapporto di trasmissione: "" + responseProtocollaDocumento.getProtocollo());
                    ResponseProtocollaDocumento responseProtocollaDocumentoAltroProt = gestisciDocumentoProtocollato(cnmTAllegatoTs, cnmTVerbale, protocolliGestiti);
                    tracciaSuCsiLogAudit(protocolliGestiti, cnmTAllegatoTs, responseProtocollaDocumentoAltroProt != null ? responseProtocollaDocumentoAltroProt.getObjectIdDocumentoToTraceList() : null);
                }
            }
            cnmTAllegatoTs.setCnmDStatoAllegato(cnmDStatoAllegatoRepository.findOne(Constants.STATO_ALLEGATO_PROTOCOLLATO));
            cnmTAllegatoTs.setObjectidSpostamentoActa(null);
            cnmTAllegatoTs.setDataOraUpdate(now);
            cnmTAllegatoTs.setCnmTUser1(cnmTUser);
            cnmTAllegatoList.add(cnmTAllegatoTs);
        }
        CnmDStatoAllegato cnmDStatoAllegato = cnmDStatoAllegatoRepository.findOne(Constants.STATO_ALLEGATO_PROTOCOLLATO);
        allegatiRelata = cnmTAllegatoRepository.findAllegatiRelataDaProtocollare(cnmTVerbale.getIdVerbale());
        for (CnmTAllegato cnmTAllegatoTs : allegatiRelata) {
            ResponseProtocollaDocumento responseProtocollaDocumentoAllegato = doquiServiceFacade.protocollaDocumentoFisico(utilsDoqui.createOrGetfolder(cnmTVerbale), null, cnmTAllegatoTs.getNomeFile(), utilsDoqui.createIdEntitaFruitore(cnmTVerbale, cnmTAllegatoTs.getCnmDTipoAllegato()), false, false, utilsDoqui.getSoggettoActa(cnmTVerbale), utilsDoqui.getRootActa(cnmTVerbale), cnmTAllegatoTs.getCnmDTipoAllegato().getIdTipoAllegato(), DoquiServiceFacade.TIPOLOGIA_DOC_ACTA_DOC_INGRESSO_SENZA_ALLEGATI, null, cnmTAllegatoTs.getIdIndex());
            cnmTAllegatoTs.setIdActa(responseProtocollaDocumentoAllegato.getIdDocumento());
            try {
                doquiServiceFacade.eliminaDocumentoIndex(cnmTAllegatoTs.getIdIndex());
                utilsTraceCsiLogAuditService.traceCsiLogAudit(TraceOperation.SPOSTAMENTO_ALLEGATO_DA_INDEX.getOperation(), cnmTAllegatoTs.getClass().getAnnotation(Table.class).name(), ""id_allegato="" + cnmTAllegatoTs.getIdAllegato(), Thread.currentThread().getStackTrace()[1].getMethodName(), cnmTAllegatoTs.getCnmDTipoAllegato().getDescTipoAllegato());
            } catch (Exception e) {
                logger.error(""Non riesco ad eliminare l'allegato con idIndex :: "" + cnmTAllegatoTs.getIdIndex());
            }
            cnmTAllegatoTs.setIdIndex(null);
            cnmTAllegatoTs.setNumeroProtocollo(responseProtocollaDocumentoAllegato.getProtocollo());
            cnmTAllegatoTs.setDataOraProtocollo(now);
            cnmTAllegatoTs.setCnmDStatoAllegato(cnmDStatoAllegato);
            cnmTAllegatoTs.setCnmTUser1(cnmTUser);
            cnmTAllegatoList.add(cnmTAllegatoTs);
            operationToTrace = cnmTAllegatoTs.isFlagDocumentoPregresso() ? TraceOperation.INSERIMENTO_ALLEGATO_PREGRESSO.getOperation() : TraceOperation.INSERIMENTO_ALLEGATO.getOperation();
            utilsTraceCsiLogAuditService.traceCsiLogAudit(operationToTrace, Constants.OGGETTO_ACTA, ""objectIdDocumento="" + responseProtocollaDocumentoAllegato.getObjectIdDocumento(), Thread.currentThread().getStackTrace()[1].getMethodName(), cnmTAllegatoTs.getCnmDTipoAllegato().getDescTipoAllegato());
            if (responseProtocollaDocumentoAllegato.getIdFolder() != null) {
                operationToTrace = cnmTVerbale.getCnmDStatoPregresso().getIdStatoPregresso() > 1 ? TraceOperation.INSERIMENTO_FASCICOLO_PREGRESSO.getOperation() : TraceOperation.INSERIMENTO_FASCICOLO.getOperation();
                utilsTraceCsiLogAuditService.traceCsiLogAudit(operationToTrace, Constants.OGGETTO_ACTA, ""idFolder="" + responseProtocollaDocumentoAllegato.getIdFolder(), Thread.currentThread().getStackTrace()[1].getMethodName(), ""creaFascicoloSuActa"");
            }
        }
    } else {
        ResponseArchiviaDocumento responseArchiviaDocumento = doquiServiceFacade.archiviaDocumentoFisico(null, cnmTAllegato.getNomeFile(), utilsDoqui.createOrGetfolder(cnmTVerbale), utilsDoqui.getRootActa(cnmTVerbale), 0, utilsDoqui.createIdEntitaFruitore(cnmTVerbale, cnmTAllegato.getCnmDTipoAllegato()), cnmTAllegato.getCnmDTipoAllegato().getIdTipoAllegato(), true, cnmTAllegato.getIdIndex(), utilsDoqui.getSoggettoActa(cnmTVerbale));
        responseProtocollaDocumento = new ResponseProtocollaDocumento();
        responseProtocollaDocumento.setIdDocumento(responseArchiviaDocumento.getIdDocumento());
        responseProtocollaDocumento.setIdFolder(responseArchiviaDocumento.getIdFolder());
        responseProtocollaDocumento.setObjectIdDocumento(responseArchiviaDocumento.getObjectIdDocumento());
        cnmTAllegato.setCnmDStatoAllegato(cnmDStatoAllegatoRepository.findOne(Constants.STATO_ALLEGATO_NON_PROTOCOLLARE));
        cnmTAllegato.setObjectidSpostamentoActa(null);
        cnmTAllegato.setIdActa(responseProtocollaDocumento.getIdDocumento());
        operationToTrace = cnmTAllegato.isFlagDocumentoPregresso() ? TraceOperation.INSERIMENTO_ALLEGATO_PREGRESSO.getOperation() : TraceOperation.INSERIMENTO_ALLEGATO.getOperation();
        utilsTraceCsiLogAuditService.traceCsiLogAudit(operationToTrace, Constants.OGGETTO_ACTA, ""objectIdDocumento="" + responseProtocollaDocumento.getObjectIdDocumento(), Thread.currentThread().getStackTrace()[1].getMethodName(), cnmTAllegato.getCnmDTipoAllegato().getDescTipoAllegato());
        if (responseProtocollaDocumento.getIdFolder() != null) {
            operationToTrace = cnmTVerbale.getCnmDStatoPregresso().getIdStatoPregresso() > 1 ? TraceOperation.INSERIMENTO_FASCICOLO_PREGRESSO.getOperation() : TraceOperation.INSERIMENTO_FASCICOLO.getOperation();
            utilsTraceCsiLogAuditService.traceCsiLogAudit(operationToTrace, Constants.OGGETTO_ACTA, ""idFolder="" + responseProtocollaDocumento.getIdFolder(), Thread.currentThread().getStackTrace()[1].getMethodName(), ""creaFascicoloSuActa"");
        }
        try {
            doquiServiceFacade.eliminaDocumentoIndex(cnmTAllegato.getIdIndex());
            utilsTraceCsiLogAuditService.traceCsiLogAudit(TraceOperation.SPOSTAMENTO_ALLEGATO_DA_INDEX.getOperation(), cnmTAllegato.getClass().getAnnotation(Table.class).name(), ""id_allegato="" + cnmTAllegato.getIdAllegato(), Thread.currentThread().getStackTrace()[1].getMethodName(), cnmTAllegato.getCnmDTipoAllegato().getDescTipoAllegato());
        } catch (Exception e) {
            logger.error(""Non riesco ad eliminare l'allegato con idIndex :: "" + cnmTAllegato.getIdIndex());
        }
        cnmTAllegato.setIdIndex(null);
        cnmTAllegato.setDataOraUpdate(now);
        CnmDStatoAllegato cnmDStatoAllegato = cnmDStatoAllegatoRepository.findOne(Constants.STATO_AVVIA_SPOSTAMENTO_ACTA);
        for (CnmRAllegatoVerbale cnmRAllegatoVerbaleT : cnmRAllegatoVerbaleList) {
            CnmTAllegato cnmTAllegatoT = cnmRAllegatoVerbaleT.getCnmTAllegato();
            boolean rapportoTrasmissione = cnmTAllegatoT.getCnmDTipoAllegato().getIdTipoAllegato() == TipoAllegato.RAPPORTO_TRASMISSIONE.getId();
            boolean statoDaProtocollareInAcquisizione = cnmTAllegatoT.getCnmDStatoAllegato().getIdStatoAllegato() == Constants.STATO_ALLEGATO_DA_PROTOCOLLARE_IN_ISTANTE_SUCCESSIVO;
            boolean statoProtocollatoInAltraStruttura = cnmTAllegatoT.getCnmDStatoAllegato().getIdStatoAllegato() == Constants.STATO_ALLEGATO_PROTOCOLLATO_IN_ALTRA_STRUTTURA;
            if (!rapportoTrasmissione && statoDaProtocollareInAcquisizione) {
                cnmTAllegatoT.setCnmDStatoAllegato(cnmDStatoAllegato);
                cnmTAllegatoT.setCnmTUser1(cnmTUser);
                cnmTAllegatoList.add(cnmTAllegatoT);
            } else if (!rapportoTrasmissione && statoProtocollatoInAltraStruttura) {
                ResponseProtocollaDocumento responseProtocollaDocumentoGiaProt = gestisciDocumentoProtocollato(cnmTAllegatoT, cnmTVerbale, protocolliGestiti);
                tracciaSuCsiLogAudit(protocolliGestiti, cnmTAllegatoT, responseProtocollaDocumentoGiaProt != null ? responseProtocollaDocumentoGiaProt.getObjectIdDocumentoToTraceList() : null);
                cnmTAllegatoT.setCnmDStatoAllegato(cnmDStatoAllegatoRepository.findOne(Constants.STATO_ALLEGATO_PROTOCOLLATO));
                cnmTAllegatoT.setObjectidSpostamentoActa(null);
                cnmTAllegatoT.setCnmTUser1(cnmTUser);
                cnmTAllegatoList.add(cnmTAllegatoT);
            }
        }
        List<CnmTAllegato> allegatiRelata = cnmTAllegatoRepository.findAllegatiRelataDaProtocollare(cnmTVerbale.getIdVerbale());
        for (CnmTAllegato cnmTAllegatoT : allegatiRelata) {
            cnmTAllegatoT.setCnmDStatoAllegato(cnmDStatoAllegato);
            cnmTAllegatoT.setCnmTUser1(cnmTUser);
            cnmTAllegatoList.add(cnmTAllegatoT);
        }
        cnmTAllegatoList.add(cnmTAllegato);
    }
    cnmTAllegatoRepository.save(cnmTAllegatoList);
    return responseProtocollaDocumento;
}",java:S100,
" static DescribedPredicate<JavaAnnotation<?>> DomainObject_nature_MIXIN(){
    return DomainObject_nature(Nature.MIXIN);
}",java:S100,
"@Nullable
public static Geometry ST_MakePolygon(Geometry shell, Geometry hole0, Geometry hole1, Geometry hole2, Geometry hole3, Geometry hole4, Geometry hole5){
    return makePolygon(shell, hole0, hole1, hole2, hole3, hole4, hole5);
}",java:S100,
"@Nullable
public static Geometry ST_Force3D(Geometry geometry){
    Function<Coordinate, Coordinate> transform = coordinate -> new Coordinate(coordinate.getX(), coordinate.getY(), Double.isNaN(coordinate.getZ()) ? 0d : coordinate.getZ());
    CoordinateTransformer transformer = new CoordinateTransformer(transform);
    return transformer.transform(geometry);
}",java:S100,
"public static SubstitutionMatrix<NucleotideCompound> getNuc4_2(){
    return getNucleotideMatrix(""nuc-4_2"");
}",java:S100,
"public static Geometry ST_RemovePoint(Geometry linestring, int index){
    if (!(linestring instanceof LineString)) {
        throw new RuntimeException(""Only supports LINESTRING."");
    }
    return new GeometryEditor().edit(linestring, new RemovePointOperation(index));
}",java:S100,
" List<AnnotationTriplet> getByAnnotation_OrderBy_OrderAscending(String annotation){
    List<AnnotationTriplet> result = new ArrayList<>();
    for (AnnotationTriplet a : list) {
        if (a.getAnnotation().equals(annotation)) {
            result.add(a);
        }
    }
    Collections.sort(result);
    return result;
}",java:S100,
"public static boolean CONST(final boolean v){
    return v;
}",java:S100,
"public static ArchRule every_jpa_Entity_must_have_a_version_field(){
    return everyJpa_Entity_must_have_a_field_named_and_annotated(""version"", Version.class);
}",java:S100,
"private String _get_date(S sequence){
    Date sysdate = Calendar.getInstance().getTime();
    String default_date = new SimpleDateFormat(""dd-MMM-yyyy"").format(sysdate);
    return default_date;
}",java:S100,
"@Nullable
public static Geometry ST_LineFromWKB(ByteString wkb){
    Geometry geometry = ST_GeomFromWKB(wkb);
    return geometry instanceof LineString ? geometry : null;
}",java:S100,
"public static GotoStatement continue_(LabelTarget labelTarget){
    return new GotoStatement(GotoExpressionKind.Continue, null, null);
}",java:S100,
"@Nullable
public static Geometry ST_LocateAlong(Geometry geom, BigDecimal segmentLengthFraction, BigDecimal offsetDistance){
    List<Coordinate> coordinates = new ArrayList<>();
    for (int i = 0; i < geom.getNumGeometries(); i++) {
        Geometry geometry = geom.getGeometryN(i);
        Coordinate[] geometryCoordinates = geometry.getCoordinates();
        for (int j = 0; j < geometryCoordinates.length - 1; j++) {
            Coordinate c1 = geometryCoordinates[j];
            Coordinate c2 = geometryCoordinates[j + 1];
            LineSegment lineSegment = new LineSegment(c1, c2);
            coordinates.add(lineSegment.pointAlongOffset(segmentLengthFraction.doubleValue(), offsetDistance.doubleValue()));
        }
    }
    Coordinate[] coordinateArray = coordinates.toArray(new Coordinate[0]);
    return GEOMETRY_FACTORY.createMultiPointFromCoords(coordinateArray);
}",java:S100,
"@Nullable
public static String ST_AsGeoJSON(Geometry geometry){
    return asGeoJson(geometry);
}",java:S100,
"public void setCp_Descr_count(final int count){
    cp_Descr_count = count;
}",java:S100,
" static DescribedPredicate<JavaAnnotation<?>> PersistenceCapable_with_DATASTORE_identityType(){
    return new DescribedPredicate<>(""@PersistenceCapable(identityType=DATASTORE)"") {

        @Override
        public boolean test(final JavaAnnotation<?> javaAnnotation) {
            if (!javaAnnotation.getRawType().isAssignableTo(PersistenceCapable.class)) {
                return false;
            }
            val properties = javaAnnotation.getProperties();
            val identityType = properties.get(""identityType"");
            return identityType instanceof JavaEnumConstant && identityType.toString().equals(""IdentityType.DATASTORE"");
        }
    };
}",java:S100,
"public static boolean ST_IsRectangle(Geometry geom){
    return geom.isRectangle();
}",java:S100,
"public static ArchRule every_logicalTypeName_and_jdo_discriminator_must_be_same(){
    return classes().that().areAnnotatedWith(DomainObject.class).and(new DescribedPredicate<>(""have a logicalTypeName"") {

        @Override
        public boolean test(final JavaClass javaClass) {
            return _LogicalNaming.hasExplicitLogicalName(javaClass);
        }
    }).and(new DescribedPredicate<>(""have a @Discriminator"") {

        @Override
        public boolean test(final JavaClass javaClass) {
            val discriminatorIfAny = javaClass.tryGetAnnotationOfType(Discriminator.class);
            return discriminatorIfAny.isPresent();
        }
    }).should(new ArchCondition<>(""be the same"") {

        @Override
        public void check(final JavaClass javaClass, final ConditionEvents conditionEvents) {
            val logicalTypeName = _LogicalNaming.logicalNameFor(javaClass);
            val discriminatorValue = javaClass.getAnnotationOfType(Discriminator.class).value();
            if (!Objects.equals(logicalTypeName, discriminatorValue)) {
                conditionEvents.add(new SimpleConditionEvent(javaClass, false, String.format(""@DomainObject(logicalTypeName = '%s') vs @Discriminator('%s')"", logicalTypeName, discriminatorValue)));
            }
        }
    });
}",java:S100,
"public static NewExpression new_(Type type, Expression... arguments){
    return new NewExpression(type, toList(arguments), null);
}",java:S100,
"public void setCp_Int_count(final int count){
    cp_Int_count = count;
}",java:S100,
"@Nullable
public static Geometry ST_MakePolygon(Geometry shell){
    return makePolygon(shell);
}",java:S100,
"public static byte CONST_BYTE(final int v){
    if (v < Byte.MIN_VALUE || v > Byte.MAX_VALUE) {
        throw new IllegalArgumentException(""Supplied value must be a valid byte literal between -128 and 127: ["" + v + ""]"");
    }
    return (byte) v;
}",java:S100,
"private Expression append_(String name, Expression expression, boolean optimize){
    if (isSimpleExpression(expression)) {
        return expression;
    }
    if (optimizing && optimize) {
        DeclarationStatement decl = getComputedExpression(expression);
        if (decl != null) {
            return decl.parameter;
        }
    }
    DeclarationStatement declare = Expressions.declare(Modifier.FINAL, newName(name, optimize), expression);
    add(declare);
    return declare.parameter;
}",java:S100,
"private static double get_angle(int p1, int p2){
    int delta_x, delta_y;
    double ret = 0.0;
    delta_x = get_x(p2) - get_x(p1);
    delta_y = get_y(p2) - get_y(p1);
    if (delta_x == 0) {
        if (delta_y > 0) {
            ret = PI / 2;
        } else if (delta_y < 0) {
            ret = -PI / 2;
        }
    } else if (delta_y == 0) {
        if (delta_x > 0) {
            ret = 0.0;
        } else if (delta_x < 0) {
            ret = PI;
        }
    } else {
        ret = Math.atan2(delta_y, delta_x);
    }
    return ret;
}",java:S100,
"@Nullable
public static Geometry ST_MakePolygon(Geometry shell, Geometry hole0, Geometry hole1, Geometry hole2){
    return makePolygon(shell, hole0, hole1, hole2);
}",java:S100,
"public void setHave_method_flags_hi(final boolean have_method_flags_hi){
    this.have_method_flags_hi = have_method_flags_hi;
}",java:S100,
"public boolean isBit0_modifyTimePresent(){
    return bit0_modifyTimePresent;
}",java:S100,
"public static SwitchStatement switch_(Expression switchValue, Expression defaultBody, Method method, Iterable<? extends SwitchCase> cases){
    throw Extensions.todo();
}",java:S100,
"public static GotoStatement break_(LabelTarget labelTarget, Expression expression){
    return new GotoStatement(GotoExpressionKind.Break, null, expression);
}",java:S100,
"@Nullable
public static Geometry ST_MakePolygon(Geometry shell, Geometry hole0, Geometry hole1, Geometry hole2, Geometry hole3, Geometry hole4){
    return makePolygon(shell, hole0, hole1, hole2, hole3, hole4);
}",java:S100,
"public boolean process_stage1(String[] argv){
    try {
        commandLine = new GnuParser().parse(options, argv);
        Properties confProps = commandLine.getOptionProperties(""hiveconf"");
        for (String propKey : confProps.stringPropertyNames()) {
            if (propKey.equalsIgnoreCase(""hive.root.logger"")) {
                CommonCliOptions.splitAndSetLogger(propKey, confProps);
            } else {
                System.setProperty(propKey, confProps.getProperty(propKey));
            }
        }
        Properties hiveVars = commandLine.getOptionProperties(""define"");
        for (String propKey : hiveVars.stringPropertyNames()) {
            hiveVariables.put(propKey, hiveVars.getProperty(propKey));
        }
        Properties hiveVars2 = commandLine.getOptionProperties(""hivevar"");
        for (String propKey : hiveVars2.stringPropertyNames()) {
            hiveVariables.put(propKey, hiveVars2.getProperty(propKey));
        }
    } catch (ParseException e) {
        System.err.println(e.getMessage());
        printUsage();
        return false;
    }
    return true;
}",java:S100,
"@Nullable
public static Geometry ST_MakePolygon(Geometry shell, Geometry hole0, Geometry hole1, Geometry hole2, Geometry hole3, Geometry hole4, Geometry hole5, Geometry hole6, Geometry hole7){
    return makePolygon(shell, hole0, hole1, hole2, hole3, hole4, hole5, hole6, hole7);
}",java:S100,
"public static Geometry ST_AddPoint(Geometry linestring, Geometry point, int index){
    if (!(linestring instanceof LineString)) {
        throw new RuntimeException(""Only supports LINESTRING."");
    }
    if (!(point instanceof Point)) {
        throw new RuntimeException(""Only supports POINT."");
    }
    return new GeometryEditor().edit(linestring, new AddPointOperation(point, index));
}",java:S100,
"private void assert_invariant() throws HCatException{
    if (hcatTable != null) {
        if (!hcatTable.getDbName().equalsIgnoreCase(partitionSpecProxy.getDbName())) {
            String errorMessage = ""Invalid HCatPartitionSpec instance: Table's DBName ("" + hcatTable.getDbName() + "") "" + ""doesn't match PartitionSpec ("" + partitionSpecProxy.getDbName() + "")"";
            assert false : errorMessage;
            throw new HCatException(errorMessage);
        }
        if (!hcatTable.getTableName().equalsIgnoreCase(partitionSpecProxy.getTableName())) {
            String errorMessage = ""Invalid HCatPartitionSpec instance: Table's TableName ("" + hcatTable.getTableName() + "") "" + ""doesn't match PartitionSpec ("" + partitionSpecProxy.getTableName() + "")"";
            assert false : errorMessage;
            throw new HCatException(errorMessage);
        }
    }
}",java:S100,
"@Nullable
public static Geometry ST_PointFromText(String wkt){
    Geometry geometry = ST_GeomFromWKT(wkt);
    return geometry instanceof Point ? geometry : null;
}",java:S100,
"public static Double ST_Z(Geometry geom){
    if (geom.getCoordinate() != null) {
        return geom.getCoordinate().getZ();
    } else {
        return Double.NaN;
    }
}",java:S100,
"@Nullable
public static Double ST_YMax(Geometry geom){
    return geom.getEnvelopeInternal().getMaxY();
}",java:S100,
"private RexSubQuery some_(RexNode node, SqlKind kind, Function<RelBuilder, RelNode> f){
    final RelNode rel = f.apply(this);
    final SqlQuantifyOperator quantifyOperator = SqlStdOperatorTable.some(kind);
    return RexSubQuery.some(rel, ImmutableList.of(node), quantifyOperator);
}",java:S100,
"public static short CONST(final short v){
    return v;
}",java:S100,
"public static ArchRule every_jpa_Entity_must_be_annotated_as_Table_with_uniqueConstraints(){
    return classes().that().areAnnotatedWith(Entity.class).and(not(areSubtypeEntities())).should().beAnnotatedWith(Table_uniqueConstraints());
}",java:S100,
"public static ArchRule every_finder_method_in_Repository_must_return_either_Collection_or_Optional(){
    return methods().that().haveNameMatching(""find.*"").and().haveNameNotMatching(""findOrCreate.*"").and().areDeclaredInClassesThat().areAnnotatedWith(Repository.class).should().haveRawReturnType(eitherOptionalOrCollection());
}",java:S100,
"public static boolean ST_OrderingEquals(Geometry geom1, Geometry geom2){
    if (!geom1.equals(geom2)) {
        return false;
    }
    Coordinate[] coordinates1 = geom1.getCoordinates();
    Coordinate[] coordinates2 = geom2.getCoordinates();
    for (int i = 0; i < coordinates1.length; i++) {
        if (!coordinates1[i].equals(coordinates2[i])) {
            return false;
        }
    }
    return true;
}",java:S100,
"public static GotoStatement goto_(LabelTarget labelTarget, Expression expression){
    throw Extensions.todo();
}",java:S100,
"protected String _write_feature(FeatureInterface<AbstractSequence<C>, C> feature, int record_length){
    String location = _insdc_feature_location_string(feature, record_length);
    String f_type = feature.getType().replace("" "", ""_"");
    StringBuilder sb = new StringBuilder();
    Formatter formatter = new Formatter(sb, Locale.US);
    formatter.format(QUALIFIER_INDENT_TMP, f_type);
    String line = formatter.toString().substring(0, QUALIFIER_INDENT) + _wrap_location(location) + lineSep;
    formatter.close();
    for (List<Qualifier> qualifiers : feature.getQualifiers().values()) {
        for (Qualifier q : qualifiers) {
            if (q instanceof DBReferenceInfo) {
                DBReferenceInfo db = (DBReferenceInfo) q;
                line += _write_feature_qualifier(q.getName().replaceAll(""%"", ""%%""), db.getDatabase().replaceAll(""%"", ""%%"") + "":"" + db.getId().replaceAll(""%"", ""%%""), db.needsQuotes());
            } else {
                line += _write_feature_qualifier(q.getName().replaceAll(""%"", ""%%""), q.getValue().replaceAll(""%"", ""%%""), q.needsQuotes());
            }
        }
    }
    return line;
}",java:S100,
"@Nullable
public static Double ST_Y(Geometry geom){
    return geom instanceof Point ? ((Point) geom).getY() : null;
}",java:S100,
"public static UnaryExpression convert_(Expression expression, Type type){
    return new UnaryExpression(ExpressionType.Convert, type, expression);
}",java:S100,
"public void setCp_Float_count(final int count){
    cp_Float_count = count;
}",java:S100,
"private int METADATA_BUFFER_SIZE(){
    return BASE_METADATA_BUFFER_SIZE + COMPACT_SERIALIZED_SIZE();
}",java:S100,
"public static Geometry ST_Envelope(Geometry geom){
    return geom.getEnvelope();
}",java:S100,
"@Nullable
public static Geometry ST_MakePolygon(Geometry shell, Geometry hole0, Geometry hole1, Geometry hole2, Geometry hole3, Geometry hole4, Geometry hole5, Geometry hole6, Geometry hole7, Geometry hole8, Geometry hole9){
    return makePolygon(shell, hole0, hole1, hole2, hole3, hole4, hole5, hole6, hole7, hole8, hole9);
}",java:S100,
"protected void explain_(RelNode rel, List<Pair<String, @Nullable Object>> values){
    final Map<String, @Nullable Object> map = jsonBuilder.map();
    map.put(""id"", null);
    map.put(""relOp"", relJson.classToTypeName(rel.getClass()));
    for (Pair<String, @Nullable Object> value : values) {
        if (value.right instanceof RelNode) {
            continue;
        }
        put(map, value.left, value.right);
    }
    final List<@Nullable Object> list = explainInputs(rel.getInputs());
    if (list.size() != 1 || !Objects.equals(list.get(0), previousId)) {
        map.put(""inputs"", list);
    }
    final String id = Integer.toString(relIdMap.size());
    relIdMap.put(rel, id);
    map.put(""id"", id);
    relList.add(map);
    previousId = id;
}",java:S100,
"private Frame peek_(int n){
    if (n == 0) {
        return Objects.requireNonNull(stack.peek(), ""stack.peek"");
    }
    return Iterables.get(stack, n);
}",java:S100,
"public static ArchRule every_Controller_must_be_follow_naming_conventions(){
    return classes().that().areAnnotatedWith(Controller.class).should().haveNameMatching("".*Controller"");
}",java:S100,
"public void SetSinkForRootInstance(SubPlan subPlan, List<FragmentInstance> instances){
    FragmentInstance rootInstance = null;
    for (FragmentInstance instance : instances) {
        if (instance.getFragment().getId().equals(subPlan.getPlanFragment().getId())) {
            rootInstance = instance;
            break;
        }
    }
    if (rootInstance == null) {
        return;
    }
    IdentitySinkNode sinkNode = new IdentitySinkNode(context.getQueryId().genPlanNodeId(), Collections.singletonList(rootInstance.getFragment().getPlanNodeTree()), Collections.singletonList(new DownStreamChannelLocation(context.getLocalDataBlockEndpoint(), context.getResultNodeContext().getVirtualFragmentInstanceId().toThrift(), context.getResultNodeContext().getVirtualResultNodeId().getId())));
    context.getResultNodeContext().setUpStream(rootInstance.getHostDataNode().mPPDataExchangeEndPoint, rootInstance.getId(), sinkNode.getPlanNodeId());
    rootInstance.getFragment().setPlanNodeTree(sinkNode);
}",java:S100,
"public void setCp_Method_count(final int count){
    cp_Method_count = count;
}",java:S100,
"@Nullable
public static Geometry ST_GeometryN(Geometry geom, int n){
    if (!(geom instanceof GeometryCollection)) {
        return null;
    }
    return geom.getGeometryN(n - 1);
}",java:S100,
"@Nullable
public static Geometry ST_GeomFromEWKT(String ewkt){
    return fromEwkt(ewkt);
}",java:S100,
"private D _makeParent(int level, int levels, D left, D right){
    recalculations++;
    return makeParent(level, levels, left, right);
}",java:S100,
"public static Geometry ST_Split(Geometry geom, Geometry blade){
    return new SplitOperation(geom, blade).split();
}",java:S100,
"public static long pop_andnot(long[] arr1, long[] arr2, int wordOffset, int numWords){
    long popCount = 0;
    for (int i = wordOffset, end = wordOffset + numWords; i < end; ++i) {
        popCount += Long.bitCount(arr1[i] & ~arr2[i]);
    }
    return popCount;
}",java:S100,
" static DescribedPredicate<JavaAnnotation<?>> DomainObject_nature_ENTITY(){
    return DomainObject_nature(Nature.ENTITY);
}",java:S100,
"private static double inscribed_angle(int basepoint, int p1, int p2){
    double angle1, angle2, temp;
    angle1 = get_angle(basepoint, p1);
    angle2 = get_angle(basepoint, p2);
    temp = angle1 - angle2;
    if (temp < 0.0)
        temp = -temp;
    if (temp > PI)
        temp = 2 * PI - temp;
    if (temp < 0.0)
        return (-temp);
    return (temp);
}",java:S100,
"public static ArchRule every_jdo_PersistenceCapable_with_DATASTORE_identityType_must_be_annotated_as_DataStoreIdentity(){
    return classes().that().areAnnotatedWith(PersistenceCapable_with_DATASTORE_identityType()).and(not(areSubtypeEntities())).should().beAnnotatedWith(javax.jdo.annotations.DatastoreIdentity.class);
}",java:S100,
"private static void _initOperationDesc1(){
    org.apache.axis.description.OperationDesc oper;
    org.apache.axis.description.ParameterDesc param;
    oper = new org.apache.axis.description.OperationDesc();
    oper.setName(""InserisciListaDiCarico"");
    param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""http://www.csi.it/epay/epaywso/enti2epaywso/types"", ""InserisciListaDiCaricoRequest""), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(""http://www.csi.it/epay/epaywso/enti2epaywso/types"", "">InserisciListaDiCaricoRequest""), it.csi.conam.conambl.integration.epay.to.InserisciListaDiCaricoRequest.class, false, false);
    oper.addParameter(param);
    oper.setReturnType(new javax.xml.namespace.QName(""http://www.csi.it/epay/epaywso/types"", ""ResponseType""));
    oper.setReturnClass(it.csi.conam.conambl.integration.epay.to.ResponseType.class);
    oper.setReturnQName(new javax.xml.namespace.QName(""http://www.csi.it/epay/epaywso/types"", ""EPaywsoServiceResponse""));
    oper.setStyle(org.apache.axis.constants.Style.DOCUMENT);
    oper.setUse(org.apache.axis.constants.Use.LITERAL);
    _operations[0] = oper;
    oper = new org.apache.axis.description.OperationDesc();
    oper.setName(""AggiornaPosizioniDebitorie"");
    param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""http://www.csi.it/epay/epaywso/enti2epaywso/types"", ""AggiornaPosizioniDebitorieRequest""), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(""http://www.csi.it/epay/epaywso/enti2epaywso/types"", "">AggiornaPosizioniDebitorieRequest""), it.csi.conam.conambl.integration.epay.to.AggiornaPosizioniDebitorieRequest.class, false, false);
    oper.addParameter(param);
    oper.setReturnType(new javax.xml.namespace.QName(""http://www.csi.it/epay/epaywso/types"", ""ResponseType""));
    oper.setReturnClass(it.csi.conam.conambl.integration.epay.to.ResponseType.class);
    oper.setReturnQName(new javax.xml.namespace.QName(""http://www.csi.it/epay/epaywso/types"", ""EPaywsoServiceResponse""));
    oper.setStyle(org.apache.axis.constants.Style.DOCUMENT);
    oper.setUse(org.apache.axis.constants.Use.LITERAL);
    _operations[1] = oper;
}",java:S100,
"private PropertiesOfDay_RelStructure createPropertiesOfDay_RelStructure(List<DayOfWeekEnumeration> dayOfWeekEnumerations){
    PropertyOfDay propertyOfDay = netexFactory.createPropertyOfDay();
    for (DayOfWeekEnumeration dayOfWeekEnumeration : dayOfWeekEnumerations) {
        propertyOfDay.getDaysOfWeek().add(dayOfWeekEnumeration);
    }
    PropertiesOfDay_RelStructure propertiesOfDay = netexFactory.createPropertiesOfDay_RelStructure();
    propertiesOfDay.getPropertyOfDay().add(propertyOfDay);
    return propertiesOfDay;
}",java:S100,
"public static Geometry ST_Delaunay(Geometry geom, int flag){
    GeometryFactory factory = geom.getFactory();
    DelaunayTriangulationBuilder builder = new DelaunayTriangulationBuilder();
    builder.setSites(geom);
    QuadEdgeSubdivision subdivision = builder.getSubdivision();
    List triPtsList = subdivision.getTriangleCoordinates(false);
    Polygon[] tris = new Polygon[triPtsList.size()];
    int i = 0;
    for (Iterator it = triPtsList.iterator(); it.hasNext(); ) {
        Coordinate[] triPt = (Coordinate[]) it.next();
        tris[i++] = factory.createPolygon(factory.createLinearRing(triPt));
    }
    MultiPolygon multiPolygon = factory.createMultiPolygon(tris);
    if (flag == 0) {
        return multiPolygon;
    } else {
        return asTriangleEdges(multiPolygon);
    }
}",java:S100,
"public void setClass_count(final int class_count){
    this.class_count = class_count;
}",java:S100,
"@Nullable
public static Geometry ST_MakePolygon(Geometry shell, Geometry hole0, Geometry hole1, Geometry hole2, Geometry hole3){
    return makePolygon(shell, hole0, hole1, hole2, hole3);
}",java:S100,
"public static ForStatement for_(Iterable<? extends DeclarationStatement> declarations, @Nullable Expression condition, @Nullable Expression post, Statement body){
    return new ForStatement(toList(declarations), condition, post, body);
}",java:S100,
"private String _write_original_first_line(S sequence){
    StringBuilder sb = new StringBuilder();
    Formatter formatter = new Formatter(sb, Locale.US);
    formatter.format(""LOCUS       %s"" + lineSep, StringManipulationHelper.padRight(sequence.getOriginalHeader(), 16));
    String output = formatter.toString();
    formatter.close();
    return output;
}",java:S100,
"@Nullable
public static Geometry ST_ExteriorRing(Geometry geom){
    if (geom instanceof Polygon) {
        return ((Polygon) geom).getExteriorRing();
    }
    return null;
}",java:S100,
"public static ArchRule every_jaxb_view_model_must_also_be_annotated_with_DomainObject_nature_VIEW_MODEL(){
    return ArchRuleDefinition.classes().that().areAnnotatedWith(XmlRootElement.class).should().beAnnotatedWith(CommonPredicates.DomainObject_nature_VIEW_MODEL());
}",java:S100,
"private SelenideWait Wait(){
    return Wait(timeoutMs(null));
}",java:S100,
"private static String toBase32_(byte[] bytes){
    return BASE_32.encodeToString(bytes);
}",java:S100,
"public void kBaseInternal_removeProcess(String id, Process process){
    this.processes.remove(id);
    this.pkgs.get(process.getPackageName()).removeRuleFlow(id);
}",java:S100,
"public static ThrowStatement throw_(Expression expression){
    return new ThrowStatement(expression);
}",java:S100,
"private CalcitePreparedStatement prepareStatement_(CalcitePrepare.Query<?> query, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException{
    try {
        final Meta.Signature signature = parseQuery(query, createPrepareContext(), -1);
        final CalcitePreparedStatement calcitePreparedStatement = (CalcitePreparedStatement) factory.newPreparedStatement(this, null, signature, resultSetType, resultSetConcurrency, resultSetHoldability);
        server.getStatement(calcitePreparedStatement.handle).setSignature(signature);
        return calcitePreparedStatement;
    } catch (Exception e) {
        String message = query.rel == null ? ""Error while preparing statement ["" + query.sql + ""]"" : ""Error while preparing plan ["" + RelOptUtil.toString(query.rel) + ""]"";
        throw Helper.INSTANCE.createException(message, e);
    }
}",java:S100,
"public static ArchRule every_class_named_Controller_must_be_annotated_correctly(){
    return classes().that().haveNameMatching("".*Controller"").should().beAnnotatedWith(Controller.class);
}",java:S100,
"public static ArchRule every_jdo_PersistenceCapable_must_be_annotated_as_Uniques_or_Unique(){
    return classes().that().areAnnotatedWith(javax.jdo.annotations.PersistenceCapable.class).and(not(areSubtypeEntities())).should().beAnnotatedWith(javax.jdo.annotations.Uniques.class).orShould().beAnnotatedWith(javax.jdo.annotations.Unique.class);
}",java:S100,
"private String _write_feature_qualifier(String key, String value, boolean quote){
    String line = """";
    if (null == value) {
        line = QUALIFIER_INDENT_STR + ""/"" + key + lineSep;
        return line;
    }
    if (quote) {
        line = QUALIFIER_INDENT_STR + ""/"" + key + ""=\"""" + value + ""\"""";
    } else {
        line = QUALIFIER_INDENT_STR + ""/"" + key + ""="" + value;
    }
    if (line.length() <= MAX_WIDTH) {
        return line + lineSep;
    }
    String goodlines = """";
    while (!"""".equals(line.replaceAll(""^\\s+"", """"))) {
        if (line.length() <= MAX_WIDTH) {
            goodlines += line + lineSep;
            break;
        }
        int index;
        for (index = Math.min(line.length() - 1, MAX_WIDTH); index > QUALIFIER_INDENT; index--) {
            if (' ' == line.charAt(index)) {
                break;
            }
        }
        if (' ' != line.charAt(index)) {
            index = MAX_WIDTH;
        }
        assert index <= MAX_WIDTH;
        goodlines += line.substring(0, index) + lineSep;
        line = QUALIFIER_INDENT_STR + line.substring(index).replaceAll(""^\\s+"", """");
    }
    return goodlines;
}",java:S100,
"public static int ST_Dimension(Geometry geom){
    return geom.getDimension();
}",java:S100,
"@Nullable
public static Geometry ST_PolyFromWKB(ByteString wkb, int srid){
    Geometry geometry = ST_GeomFromWKB(wkb, srid);
    return geometry instanceof Polygon ? geometry : null;
}",java:S100,
" static DescribedPredicate<JavaAnnotation<?>> DomainObject_nature(final Nature expectedNature){
    return new DescribedPredicate<>(String.format(""@DomainObject(nature=%s)"", expectedNature.name())) {

        @Override
        public boolean test(final JavaAnnotation<?> javaAnnotation) {
            if (!javaAnnotation.getRawType().isAssignableTo(DomainObject.class)) {
                return false;
            }
            val properties = javaAnnotation.getProperties();
            val nature = properties.get(""nature"");
            return nature instanceof JavaEnumConstant && Objects.equals(((JavaEnumConstant) nature).name(), expectedNature.name());
        }
    };
}",java:S100,
"public static NewExpression new_(Constructor constructor, Iterable<? extends Expression> expressions, MemberDeclaration... memberDeclarations){
    return new_(constructor.getDeclaringClass(), toList(expressions), toList(memberDeclarations));
}",java:S100,
"private Position GetRandomPositionInCircle(Position origin, double radius){
    Position target = origin.clone();
    double angle = Math.random() * 360;
    double r = Math.sqrt(Math.random() * radius * radius);
    target.addX((float) (r * Math.cos(angle))).addZ((float) (r * Math.sin(angle)));
    return target;
}",java:S100,
"private PrincipalForApplicationUser lookupPrincipal_inApplicationUserRepository(final String username){
    return execute(new Supplier<PrincipalForApplicationUser>() {

        @Override
        public PrincipalForApplicationUser get() {
            val applicationUser = applicationUserRepository.findByUsername(username).orElse(null);
            return PrincipalForApplicationUser.from(applicationUser);
        }

        @Inject
        private ApplicationUserRepository applicationUserRepository;
    });
}",java:S100,
"private RelBuilder aggregate_(GroupKeyImpl groupKey, final ImmutableList<AggCallPlus> aggCalls){
    if (groupKey.nodes.isEmpty() && aggCalls.isEmpty() && config.pruneInputOfAggregate()) {
        if (config.preventEmptyFieldList()) {
            return values(new String[] { ""dummy"" }, true);
        } else {
            return values(ImmutableList.of(ImmutableList.of()), getTypeFactory().builder().build());
        }
    }
    final Registrar registrar = new Registrar(fields(), peek().getRowType().getFieldNames());
    final ImmutableBitSet groupSet = ImmutableBitSet.of(registrar.registerExpressions(groupKey.nodes));
    if (alreadyUnique(aggCalls, groupKey, groupSet, registrar.extraNodes)) {
        final List<RexNode> nodes = new ArrayList<>(fields(groupSet));
        aggCalls.forEach(c -> {
            final AggregateCall call = c.aggregateCall();
            final SqlStaticAggFunction staticFun = call.getAggregation().unwrapOrThrow(SqlStaticAggFunction.class);
            final RexNode node = staticFun.constant(getRexBuilder(), groupSet, ImmutableList.of(), call);
            nodes.add(aliasMaybe(requireNonNull(node, ""node""), call.getName()));
        });
        return project(nodes);
    }
    ImmutableList<ImmutableBitSet> groupSets;
    if (groupKey.nodeLists != null) {
        final int sizeBefore = registrar.extraNodes.size();
        final List<ImmutableBitSet> groupSetList = new ArrayList<>();
        for (ImmutableList<RexNode> nodeList : groupKey.nodeLists) {
            final ImmutableBitSet groupSet2 = ImmutableBitSet.of(registrar.registerExpressions(nodeList));
            if (!groupSet.contains(groupSet2)) {
                throw new IllegalArgumentException(""group set element "" + nodeList + "" must be a subset of group key"");
            }
            groupSetList.add(groupSet2);
        }
        final ImmutableSortedMultiset<ImmutableBitSet> groupSetMultiset = ImmutableSortedMultiset.copyOf(ImmutableBitSet.COMPARATOR, groupSetList);
        if (aggCalls.stream().anyMatch(RelBuilder::isGroupId) || !ImmutableBitSet.ORDERING.isStrictlyOrdered(groupSetMultiset)) {
            return rewriteAggregateWithDuplicateGroupSets(groupSet, groupSetMultiset, aggCalls);
        }
        groupSets = ImmutableList.copyOf(groupSetMultiset.elementSet());
        if (registrar.extraNodes.size() > sizeBefore) {
            throw new IllegalArgumentException(""group sets contained expressions "" + ""not in group key: "" + Util.skip(registrar.extraNodes, sizeBefore));
        }
    } else {
        groupSets = ImmutableList.of(groupSet);
    }
    aggCalls.forEach(aggCall -> aggCall.register(registrar));
    project(registrar.extraNodes);
    rename(registrar.names);
    final Frame frame = stack.pop();
    RelNode r = frame.rel;
    final List<AggregateCall> aggregateCalls = new ArrayList<>();
    for (AggCallPlus aggCall : aggCalls) {
        aggregateCalls.add(aggCall.aggregateCall(registrar, groupSet, r));
    }
    assert ImmutableBitSet.ORDERING.isStrictlyOrdered(groupSets) : groupSets;
    for (ImmutableBitSet set : groupSets) {
        assert groupSet.contains(set);
    }
    List<Field> inFields = frame.fields;
    final ImmutableBitSet groupSet2;
    final ImmutableList<ImmutableBitSet> groupSets2;
    if (config.pruneInputOfAggregate() && r instanceof Project) {
        final Set<Integer> fieldsUsed = RelOptUtil.getAllFields2(groupSet, aggregateCalls);
        if (fieldsUsed.isEmpty()) {
            r = ((Project) r).getInput();
            groupSet2 = groupSet;
            groupSets2 = groupSets;
        } else if (fieldsUsed.size() < r.getRowType().getFieldCount()) {
            final Map<Integer, Integer> map = new HashMap<>();
            for (int source : fieldsUsed) {
                map.put(source, map.size());
            }
            groupSet2 = groupSet.permute(map);
            groupSets2 = ImmutableBitSet.ORDERING.immutableSortedCopy(ImmutableBitSet.permute(groupSets, map));
            final Mappings.TargetMapping targetMapping = Mappings.target(map, r.getRowType().getFieldCount(), fieldsUsed.size());
            final List<AggregateCall> oldAggregateCalls = new ArrayList<>(aggregateCalls);
            aggregateCalls.clear();
            for (AggregateCall aggregateCall : oldAggregateCalls) {
                aggregateCalls.add(aggregateCall.transform(targetMapping));
            }
            inFields = Mappings.permute(inFields, targetMapping.inverse());
            final Project project = (Project) r;
            final List<RexNode> newProjects = new ArrayList<>();
            final RelDataTypeFactory.Builder builder = cluster.getTypeFactory().builder();
            for (int i : fieldsUsed) {
                newProjects.add(project.getProjects().get(i));
                builder.add(project.getRowType().getFieldList().get(i));
            }
            r = project.copy(cluster.traitSet(), project.getInput(), newProjects, builder.build());
        } else {
            groupSet2 = groupSet;
            groupSets2 = groupSets;
        }
    } else {
        groupSet2 = groupSet;
        groupSets2 = groupSets;
    }
    if (!config.dedupAggregateCalls() || Util.isDistinct(aggregateCalls)) {
        return aggregate_(groupSet2, groupSets2, r, aggregateCalls, registrar.extraNodes, inFields);
    }
    final Set<AggregateCall> callSet = new HashSet<>();
    final PairList<Integer, @Nullable String> projects = PairList.of();
    Util.range(groupSet.cardinality()).forEach(i -> projects.add(i, null));
    final List<AggregateCall> distinctAggregateCalls = new ArrayList<>();
    for (AggregateCall aggregateCall : aggregateCalls) {
        final int i;
        if (callSet.add(aggregateCall)) {
            i = distinctAggregateCalls.size();
            distinctAggregateCalls.add(aggregateCall);
        } else {
            i = distinctAggregateCalls.indexOf(aggregateCall);
            assert i >= 0;
        }
        projects.add(groupSet.cardinality() + i, aggregateCall.name);
    }
    aggregate_(groupSet, groupSets, r, distinctAggregateCalls, registrar.extraNodes, inFields);
    return project(projects.transform((i, name) -> aliasMaybe(field(i), name)));
}",java:S100,
"public static boolean UTF8EncodingChecker(byte[] data){
    CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder();
    try {
        decoder.decode(ByteBuffer.wrap(data));
    } catch (CharacterCodingException ex) {
        return false;
    }
    return true;
}",java:S100,
"public static Geometry ST_OffsetCurve(Geometry linestring, double distance, String bufferStyle){
    if (!(linestring instanceof LineString)) {
        throw new IllegalArgumentException(""ST_OffsetCurve only accepts LineString"");
    }
    BufferStyle style = new BufferStyle(bufferStyle);
    BufferParameters params = style.asBufferParameters();
    double sidedDistance = style.asSidedDistance(distance);
    Coordinate[] coordinates = OffsetCurve.rawOffset((LineString) linestring, sidedDistance, params);
    return GEOMETRY_FACTORY.createLineString(coordinates);
}",java:S100,
"public static Geometry ST_Buffer(Geometry geom, double distance, int quadSegs, int endCapStyle){
    return geom.buffer(distance, quadSegs, endCapStyle);
}",java:S100,
"private void check3ConnectionLink1_2(Context context, ConnectionLink connectionLink, ValidationParameters parameters){
    StopArea start = connectionLink.getStartOfLink();
    StopArea end = connectionLink.getEndOfLink();
    if (start == null | end == null)
        return;
    if (!start.hasCoordinates() || !end.hasCoordinates())
        return;
    long distanceMax = parameters.getInterConnectionLinkDistanceMax();
    double distance = quickDistance(start, end);
    if (distance > distanceMax) {
        DataLocation location = buildLocation(context, connectionLink);
        DataLocation startLocation = buildLocation(context, start);
        DataLocation endLocation = buildLocation(context, end);
        ValidationReporter reporter = ValidationReporter.Factory.getInstance();
        reporter.addCheckPointReportError(context, CONNECTION_LINK_1, location, Integer.toString((int) distance), Integer.toString((int) distanceMax), startLocation, endLocation);
    } else {
        if (connectionLink.getLinkDistance() != null && !connectionLink.getLinkDistance().equals(BigDecimal.ZERO)) {
            if (distance > connectionLink.getLinkDistance().doubleValue()) {
                DataLocation location = buildLocation(context, connectionLink);
                DataLocation startLocation = buildLocation(context, start);
                DataLocation endLocation = buildLocation(context, end);
                ValidationReporter reporter = ValidationReporter.Factory.getInstance();
                reporter.addCheckPointReportError(context, CONNECTION_LINK_2, location, Integer.toString((int) distance), Integer.toString(connectionLink.getLinkDistance().intValue()), startLocation, endLocation);
            }
        }
    }
}",java:S100,
"public static Geometry ST_Holes(Geometry geom){
    List<Geometry> acc = new ArrayList<>();
    extractGeometryHoles(geom, acc);
    Geometry[] array = acc.toArray(new Geometry[acc.size()]);
    return GEOMETRY_FACTORY.createGeometryCollection(array);
}",java:S100,
"public boolean kBaseInternal_tryWriteLock(){
    return this.lock.writeLock().tryLock();
}",java:S100,
"@Nullable
public static Double ST_YMin(Geometry geom){
    return geom.getEnvelopeInternal().getMinY();
}",java:S100,
"public static double CONST(final double v){
    return v;
}",java:S100,
"public static int CONST(final int v){
    return v;
}",java:S100,
"public static Geometry ST_Boundary(Geometry geom){
    return geom.getBoundary();
}",java:S100,
"private int COMPACT_SERIALIZED_SIZE(){
    int size = BASE_COMPACT_SERIALIZED_SIZE;
    if (hasAnyCoinbaseData)
        size += 8;
    if (hasTxids)
        size += 8;
    return size;
}",java:S100,
"public void setCp_Imethod_count(final int count){
    cp_Imethod_count = count;
}",java:S100,
"public static Geometry ST_AddPoint(Geometry linestring, Geometry point){
    if (!(linestring instanceof LineString)) {
        throw new RuntimeException(""Only supports LINESTRING."");
    }
    if (!(point instanceof Point)) {
        throw new RuntimeException(""Only supports POINT."");
    }
    LineString lineString = (LineString) linestring;
    int numPoints = lineString.getNumPoints();
    return new GeometryEditor().edit(linestring, new AddPointOperation(point, numPoints));
}",java:S100,
"public static boolean ST_CoveredBy(Geometry geom1, Geometry geom2){
    return geom1.coveredBy(geom2);
}",java:S100,
"public static ArchRule every_DomainObject_must_also_be_annotated_with_DomainObjectLayout(){
    return classes().that().areAnnotatedWith(DomainObject.class).should().beAnnotatedWith(DomainObjectLayout.class);
}",java:S100,
"public void kBaseInternal_lock(){
    this.lock.writeLock().lock();
}",java:S100,
"public static NewExpression new_(Constructor constructor, Expression... expressions){
    return new NewExpression(constructor.getDeclaringClass(), toList(expressions), null);
}",java:S100,
"public static Geometry ST_ReducePrecision(Geometry geom, BigDecimal gridSize){
    PrecisionModel precisionModel = new PrecisionModel(1 / gridSize.doubleValue());
    GeometryPrecisionReducer reducer = new GeometryPrecisionReducer(precisionModel);
    reducer.setPointwise(true);
    return reducer.reduce(geom);
}",java:S100,
"@Nullable
public static Geometry ST_MakePolygon(Geometry shell, Geometry hole0, Geometry hole1, Geometry hole2, Geometry hole3, Geometry hole4, Geometry hole5, Geometry hole6){
    return makePolygon(shell, hole0, hole1, hole2, hole3, hole4, hole5, hole6);
}",java:S100,
"public static boolean ST_Within(Geometry geom1, Geometry geom2){
    return geom1.within(geom2);
}",java:S100,
"public static byte CONST(final byte v){
    return v;
}",java:S100,
"public static NewExpression new_(Constructor constructor){
    return new_(constructor.getDeclaringClass(), ImmutableList.of());
}",java:S100,
"public static Double ST_ZMax(Geometry geom){
    return Arrays.stream(geom.getCoordinates()).filter(c -> !Double.isNaN(c.getZ())).map(c -> c.getZ()).max(Double::compareTo).orElse(Double.NaN);
}",java:S100,
" static SchemaPlus addSchema_(SchemaPlus rootSchema, SchemaSpec schema){
    final SchemaPlus foodmart;
    final SchemaPlus jdbcScott;
    final SchemaPlus scott;
    final ConnectionSpec cs;
    final DataSource dataSource;
    final ImmutableList<String> emptyPath = ImmutableList.of();
    switch(schema) {
        case REFLECTIVE_FOODMART:
            return rootSchema.add(schema.schemaName, new ReflectiveSchema(new FoodmartSchema()));
        case JDBC_SCOTT:
            cs = DatabaseInstance.HSQLDB.scott;
            dataSource = JdbcSchema.dataSource(cs.url, cs.driver, cs.username, cs.password);
            return rootSchema.add(schema.schemaName, JdbcSchema.create(rootSchema, schema.schemaName, dataSource, cs.catalog, cs.schema));
        case JDBC_FOODMART:
            cs = DB.foodmart;
            dataSource = JdbcSchema.dataSource(cs.url, cs.driver, cs.username, cs.password);
            return rootSchema.add(schema.schemaName, JdbcSchema.create(rootSchema, schema.schemaName, dataSource, cs.catalog, cs.schema));
        case JDBC_FOODMART_WITH_LATTICE:
            foodmart = addSchemaIfNotExists(rootSchema, SchemaSpec.JDBC_FOODMART);
            foodmart.add(schema.schemaName, Lattice.create(foodmart.unwrap(CalciteSchema.class), ""select 1 from \""foodmart\"".\""sales_fact_1997\"" as s\n"" + ""join \""foodmart\"".\""time_by_day\"" as t using (\""time_id\"")\n"" + ""join \""foodmart\"".\""customer\"" as c using (\""customer_id\"")\n"" + ""join \""foodmart\"".\""product\"" as p using (\""product_id\"")\n"" + ""join \""foodmart\"".\""product_class\"" as pc on p.\""product_class_id\"" = pc.\""product_class_id\"""", true));
            return foodmart;
        case MY_DB:
            return rootSchema.add(schema.schemaName, MY_DB_SCHEMA);
        case SCOTT:
            jdbcScott = addSchemaIfNotExists(rootSchema, SchemaSpec.JDBC_SCOTT);
            return rootSchema.add(schema.schemaName, new CloneSchema(jdbcScott));
        case SCOTT_WITH_TEMPORAL:
            scott = addSchemaIfNotExists(rootSchema, SchemaSpec.SCOTT);
            scott.add(""products_temporal"", new ProductsTemporalTable());
            scott.add(""orders"", new OrdersHistoryTable(OrdersStreamTableFactory.getRowList()));
            return scott;
        case TPCH:
            return rootSchema.add(schema.schemaName, new ReflectiveSchema(new TpchSchema()));
        case CLONE_FOODMART:
            foodmart = addSchemaIfNotExists(rootSchema, SchemaSpec.JDBC_FOODMART);
            return rootSchema.add(""foodmart2"", new CloneSchema(foodmart));
        case GEO:
            ModelHandler.addFunctions(rootSchema, null, emptyPath, SpatialTypeFunctions.class.getName(), ""*"", true);
            ModelHandler.addFunctions(rootSchema, null, emptyPath, SqlSpatialTypeFunctions.class.getName(), ""*"", true);
            rootSchema.add(""ST_UNION"", AggregateFunctionImpl.create(UnionOperation.class));
            rootSchema.add(""ST_ACCUM"", AggregateFunctionImpl.create(AccumOperation.class));
            rootSchema.add(""ST_COLLECT"", AggregateFunctionImpl.create(CollectOperation.class));
            final SchemaPlus s = rootSchema.add(schema.schemaName, new AbstractSchema());
            ModelHandler.addFunctions(s, ""countries"", emptyPath, CountriesTableFunction.class.getName(), null, false);
            final String sql = ""select * from table(\""countries\""(true))"";
            final ViewTableMacro viewMacro = ViewTable.viewMacro(rootSchema, sql, ImmutableList.of(""GEO""), emptyPath, false);
            s.add(""countries"", viewMacro);
            ModelHandler.addFunctions(s, ""states"", emptyPath, StatesTableFunction.class.getName(), ""states"", false);
            final String sql2 = ""select \""name\"",\n"" + "" ST_PolyFromText(\""geom\"") as \""geom\""\n"" + ""from table(\""states\""(true))"";
            final ViewTableMacro viewMacro2 = ViewTable.viewMacro(rootSchema, sql2, ImmutableList.of(""GEO""), emptyPath, false);
            s.add(""states"", viewMacro2);
            ModelHandler.addFunctions(s, ""parks"", emptyPath, StatesTableFunction.class.getName(), ""parks"", false);
            final String sql3 = ""select \""name\"",\n"" + "" ST_PolyFromText(\""geom\"") as \""geom\""\n"" + ""from table(\""parks\""(true))"";
            final ViewTableMacro viewMacro3 = ViewTable.viewMacro(rootSchema, sql3, ImmutableList.of(""GEO""), emptyPath, false);
            s.add(""parks"", viewMacro3);
            return s;
        case HR:
            return rootSchema.add(schema.schemaName, new ReflectiveSchema(new HrSchema()));
        case LINGUAL:
            return rootSchema.add(schema.schemaName, new ReflectiveSchema(new LingualSchema()));
        case BLANK:
            return rootSchema.add(schema.schemaName, new AbstractSchema());
        case ORINOCO:
            final SchemaPlus orinoco = rootSchema.add(schema.schemaName, new AbstractSchema());
            orinoco.add(""ORDERS"", new OrdersHistoryTable(OrdersStreamTableFactory.getRowList()));
            return orinoco;
        case POST:
            final SchemaPlus post = rootSchema.add(schema.schemaName, new AbstractSchema());
            post.add(""EMP"", ViewTable.viewMacro(post, ""select * from (values\n"" + ""    ('Jane', 10, 'F'),\n"" + ""    ('Bob', 10, 'M'),\n"" + ""    ('Eric', 20, 'M'),\n"" + ""    ('Susan', 30, 'F'),\n"" + ""    ('Alice', 30, 'F'),\n"" + ""    ('Adam', 50, 'M'),\n"" + ""    ('Eve', 50, 'F'),\n"" + ""    ('Grace', 60, 'F'),\n"" + ""    ('Wilma', cast(null as integer), 'F'))\n"" + ""  as t(ename, deptno, gender)"", emptyPath, ImmutableList.of(""POST"", ""EMP""), null));
            post.add(""DEPT"", ViewTable.viewMacro(post, ""select * from (values\n"" + ""    (10, 'Sales'),\n"" + ""    (20, 'Marketing'),\n"" + ""    (30, 'Engineering'),\n"" + ""    (40, 'Empty')) as t(deptno, dname)"", emptyPath, ImmutableList.of(""POST"", ""DEPT""), null));
            post.add(""DEPT30"", ViewTable.viewMacro(post, ""select * from dept where deptno = 30"", ImmutableList.of(""POST""), ImmutableList.of(""POST"", ""DEPT30""), null));
            post.add(""EMPS"", ViewTable.viewMacro(post, ""select * from (values\n"" + ""    (100, 'Fred',  10, CAST(NULL AS CHAR(1)), CAST(NULL AS VARCHAR(20)), 40,               25, TRUE,    FALSE, DATE '1996-08-03'),\n"" + ""    (110, 'Eric',  20, 'M',                   'San Francisco',           3,                80, UNKNOWN, FALSE, DATE '2001-01-01'),\n"" + ""    (110, 'John',  40, 'M',                   'Vancouver',               2, CAST(NULL AS INT), FALSE,   TRUE,  DATE '2002-05-03'),\n"" + ""    (120, 'Wilma', 20, 'F',                   CAST(NULL AS VARCHAR(20)), 1,                 5, UNKNOWN, TRUE,  DATE '2005-09-07'),\n"" + ""    (130, 'Alice', 40, 'F',                   'Vancouver',               2, CAST(NULL AS INT), FALSE,   TRUE,  DATE '2007-01-01'))\n"" + "" as t(empno, name, deptno, gender, city, empid, age, slacker, manager, joinedat)"", emptyPath, ImmutableList.of(""POST"", ""EMPS""), null));
            post.add(""TICKER"", ViewTable.viewMacro(post, ""select * from (values\n"" + ""    ('ACME', '2017-12-01', 12),\n"" + ""    ('ACME', '2017-12-02', 17),\n"" + ""    ('ACME', '2017-12-03', 19),\n"" + ""    ('ACME', '2017-12-04', 21),\n"" + ""    ('ACME', '2017-12-05', 25),\n"" + ""    ('ACME', '2017-12-06', 12),\n"" + ""    ('ACME', '2017-12-07', 15),\n"" + ""    ('ACME', '2017-12-08', 20),\n"" + ""    ('ACME', '2017-12-09', 24),\n"" + ""    ('ACME', '2017-12-10', 25),\n"" + ""    ('ACME', '2017-12-11', 19),\n"" + ""    ('ACME', '2017-12-12', 15),\n"" + ""    ('ACME', '2017-12-13', 25),\n"" + ""    ('ACME', '2017-12-14', 25),\n"" + ""    ('ACME', '2017-12-15', 14),\n"" + ""    ('ACME', '2017-12-16', 12),\n"" + ""    ('ACME', '2017-12-17', 14),\n"" + ""    ('ACME', '2017-12-18', 24),\n"" + ""    ('ACME', '2017-12-19', 23),\n"" + ""    ('ACME', '2017-12-20', 22))\n"" + "" as t(SYMBOL, tstamp, price)"", ImmutableList.of(), ImmutableList.of(""POST"", ""TICKER""), null));
            return post;
        case FAKE_FOODMART:
            foodmart = addSchemaIfNotExists(rootSchema, SchemaSpec.JDBC_FOODMART);
            final Wrapper salesTable = (Wrapper) foodmart.getTable(""sales_fact_1997"");
            SchemaPlus fake = rootSchema.add(schema.schemaName, new AbstractSchema());
            fake.add(""time_by_day"", new AbstractTable() {

                @Override
                public RelDataType getRowType(RelDataTypeFactory typeFactory) {
                    return typeFactory.builder().add(""time_id"", SqlTypeName.INTEGER).add(""the_year"", SqlTypeName.INTEGER).build();
                }

                @Override
                public <C> C unwrap(Class<C> aClass) {
                    if (aClass.isAssignableFrom(SqlDialect.class) || aClass.isAssignableFrom(DataSource.class)) {
                        return salesTable.unwrap(aClass);
                    }
                    return super.unwrap(aClass);
                }
            });
            fake.add(""sales_fact_1997"", new AbstractTable() {

                @Override
                public RelDataType getRowType(RelDataTypeFactory typeFactory) {
                    return typeFactory.builder().add(""time_id"", SqlTypeName.INTEGER).add(""customer_id"", SqlTypeName.INTEGER).build();
                }

                @Override
                public <C> C unwrap(Class<C> aClass) {
                    if (aClass.isAssignableFrom(SqlDialect.class) || aClass.isAssignableFrom(DataSource.class)) {
                        return salesTable.unwrap(aClass);
                    }
                    return super.unwrap(aClass);
                }
            });
            return fake;
        case AUX:
            SchemaPlus aux = rootSchema.add(schema.schemaName, new AbstractSchema());
            TableFunction tableFunction = TableFunctionImpl.create(Smalls.SimpleTableFunction.class, ""eval"");
            aux.add(""TBLFUN"", tableFunction);
            TableFunction tableFunctionIdentity = TableFunctionImpl.create(Smalls.IdentityTableFunction.class, ""eval"");
            aux.add(""TBLFUN_IDENTITY"", tableFunctionIdentity);
            final String simpleSql = ""select *\n"" + ""from (values\n"" + ""    ('ABC', 1),\n"" + ""    ('DEF', 2),\n"" + ""    ('GHI', 3))\n"" + ""  as t(strcol, intcol)"";
            aux.add(""SIMPLETABLE"", ViewTable.viewMacro(aux, simpleSql, ImmutableList.of(), ImmutableList.of(""AUX"", ""SIMPLETABLE""), null));
            final String lateralSql = ""SELECT *\n"" + ""FROM AUX.SIMPLETABLE ST\n"" + ""CROSS JOIN LATERAL TABLE(AUX.TBLFUN(ST.INTCOL))"";
            aux.add(""VIEWLATERAL"", ViewTable.viewMacro(aux, lateralSql, ImmutableList.of(), ImmutableList.of(""AUX"", ""VIEWLATERAL""), null));
            return aux;
        case BOOKSTORE:
            return rootSchema.add(schema.schemaName, new ReflectiveSchema(new BookstoreSchema()));
        default:
            throw new AssertionError(""unknown schema "" + schema);
    }
}",java:S100,
"public static long pop_xor(long[] arr1, long[] arr2, int wordOffset, int numWords){
    long popCount = 0;
    for (int i = wordOffset, end = wordOffset + numWords; i < end; ++i) {
        popCount += Long.bitCount(arr1[i] ^ arr2[i]);
    }
    return popCount;
}",java:S100,
"public static boolean ST_Relate(Geometry geom1, Geometry geom2, String iMatrix){
    return geom1.relate(geom2, iMatrix);
}",java:S100,
"public static Architectures.LayeredArchitecture code_dependencies_follow_module_Imports(final List<Class<?>> moduleClasses){
    return code_dependencies_follow_module_Imports_and_subpackage_rules(moduleClasses, Collections.emptyList());
}",java:S100,
"private HandshakeResult handshake_2_1_0() throws IOException, SQLException{
    BinaryWriterExImpl writer = new BinaryWriterExImpl(null, new BinaryHeapOutputStream(HANDSHAKE_MSG_SIZE), null, null);
    writer.writeByte((byte) ClientListenerRequest.HANDSHAKE);
    writer.writeShort(VER_2_1_0.major());
    writer.writeShort(VER_2_1_0.minor());
    writer.writeShort(VER_2_1_0.maintenance());
    writer.writeByte(ClientListenerNioListener.JDBC_CLIENT);
    writer.writeBoolean(connProps.isDistributedJoins());
    writer.writeBoolean(connProps.isEnforceJoinOrder());
    writer.writeBoolean(connProps.isCollocated());
    writer.writeBoolean(connProps.isReplicatedOnly());
    writer.writeBoolean(connProps.isAutoCloseServerCursor());
    send(writer.array());
    BinaryReaderExImpl reader = new BinaryReaderExImpl(null, new BinaryHeapInputStream(read()), null, null, false);
    boolean accepted = reader.readBoolean();
    if (accepted) {
        HandshakeResult handshakeRes = new HandshakeResult();
        handshakeRes.igniteVersion(new IgniteProductVersion((byte) 2, (byte) 1, (byte) 0, ""Unknown"", 0L, null));
        handshakeRes.serverProtocolVersion(VER_2_1_0);
        return handshakeRes;
    } else {
        short maj = reader.readShort();
        short min = reader.readShort();
        short maintenance = reader.readShort();
        String err = reader.readString();
        ClientListenerProtocolVersion ver = ClientListenerProtocolVersion.create(maj, min, maintenance);
        throw new SQLException(""Handshake failed [driverProtocolVer="" + CURRENT_VER + "", remoteNodeProtocolVer="" + ver + "", err="" + err + ']', SqlStateCode.CONNECTION_REJECTED);
    }
}",java:S100,
"public void throws_(String message){
    try {
        ok();
    } catch (Throwable throwable) {
        assertThat(TestUtil.printStackTrace(throwable), containsString(message));
    }
}",java:S100,
"private static void _initOperationDesc1(){
    org.apache.axis.description.OperationDesc oper;
    org.apache.axis.description.ParameterDesc param;
    oper = new org.apache.axis.description.OperationDesc();
    oper.setName(""testResources"");
    oper.setReturnType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""boolean""));
    oper.setReturnClass(boolean.class);
    oper.setReturnQName(new javax.xml.namespace.QName("""", ""testResourcesReturn""));
    oper.setStyle(org.apache.axis.constants.Style.RPC);
    oper.setUse(org.apache.axis.constants.Use.ENCODED);
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.CSIException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""CSIException""), true));
    _operations[0] = oper;
    oper = new org.apache.axis.description.OperationDesc();
    oper.setName(""selfCheck"");
    param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName("""", ""in0""), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""ArrayOf_tns2_CalledResource""), it.csi.conam.conambl.integration.beans.CalledResource[].class, false, false);
    oper.addParameter(param);
    oper.setReturnType(new javax.xml.namespace.QName(""http://api.coopdiag.csi.it"", ""InvocationNode""));
    oper.setReturnClass(it.csi.conam.conambl.integration.beans.InvocationNode.class);
    oper.setReturnQName(new javax.xml.namespace.QName("""", ""selfCheckReturn""));
    oper.setStyle(org.apache.axis.constants.Style.RPC);
    oper.setUse(org.apache.axis.constants.Use.ENCODED);
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.CSIException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""CSIException""), true));
    _operations[1] = oper;
    oper = new org.apache.axis.description.OperationDesc();
    oper.setName(""hasSelfCheck"");
    oper.setReturnType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""boolean""));
    oper.setReturnClass(boolean.class);
    oper.setReturnQName(new javax.xml.namespace.QName("""", ""hasSelfCheckReturn""));
    oper.setStyle(org.apache.axis.constants.Style.RPC);
    oper.setUse(org.apache.axis.constants.Use.ENCODED);
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.CSIException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""CSIException""), true));
    _operations[2] = oper;
    oper = new org.apache.axis.description.OperationDesc();
    oper.setName(""archiviaDocumentoLogico"");
    param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName("""", ""in0""), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(""urn:stadocStadoc"", ""RequestArchiviaDocumentoLogico""), it.csi.conam.conambl.integration.beans.RequestArchiviaDocumentoLogico.class, false, false);
    oper.addParameter(param);
    oper.setReturnType(new javax.xml.namespace.QName(""urn:stadocStadoc"", ""ResponseArchiviaDocumento""));
    oper.setReturnClass(it.csi.conam.conambl.integration.beans.ResponseArchiviaDocumento.class);
    oper.setReturnQName(new javax.xml.namespace.QName("""", ""archiviaDocumentoLogicoReturn""));
    oper.setStyle(org.apache.axis.constants.Style.RPC);
    oper.setUse(org.apache.axis.constants.Use.ENCODED);
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.UnrecoverableException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""UnrecoverableException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.CSIException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""CSIException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.SystemException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""SystemException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.ArchiviaDocumentoException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""ArchiviaDocumentoException""), true));
    _operations[3] = oper;
    oper = new org.apache.axis.description.OperationDesc();
    oper.setName(""archiviaDocumentoFisico"");
    param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName("""", ""in0""), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(""urn:stadocStadoc"", ""RequestArchiviaDocumentoFisico""), it.csi.conam.conambl.integration.beans.RequestArchiviaDocumentoFisico.class, false, false);
    oper.addParameter(param);
    oper.setReturnType(new javax.xml.namespace.QName(""urn:stadocStadoc"", ""ResponseArchiviaDocumento""));
    oper.setReturnClass(it.csi.conam.conambl.integration.beans.ResponseArchiviaDocumento.class);
    oper.setReturnQName(new javax.xml.namespace.QName("""", ""archiviaDocumentoFisicoReturn""));
    oper.setStyle(org.apache.axis.constants.Style.RPC);
    oper.setUse(org.apache.axis.constants.Use.ENCODED);
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.UnrecoverableException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""UnrecoverableException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.CSIException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""CSIException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.SystemException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""SystemException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.ArchiviaDocumentoException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""ArchiviaDocumentoException""), true));
    _operations[4] = oper;
    oper = new org.apache.axis.description.OperationDesc();
    oper.setName(""protocollaDocumentoLogico"");
    param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName("""", ""in0""), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(""urn:stadocStadoc"", ""RequestProtocollaDocumentoLogico""), it.csi.conam.conambl.integration.beans.RequestProtocollaDocumentoLogico.class, false, false);
    oper.addParameter(param);
    oper.setReturnType(new javax.xml.namespace.QName(""urn:stadocStadoc"", ""ResponseProtocollaDocumento""));
    oper.setReturnClass(it.csi.conam.conambl.integration.beans.ResponseProtocollaDocumento.class);
    oper.setReturnQName(new javax.xml.namespace.QName("""", ""protocollaDocumentoLogicoReturn""));
    oper.setStyle(org.apache.axis.constants.Style.RPC);
    oper.setUse(org.apache.axis.constants.Use.ENCODED);
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.UnrecoverableException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""UnrecoverableException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.CSIException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""CSIException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.SystemException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""SystemException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.ProtocollaDocumentoException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""ProtocollaDocumentoException""), true));
    _operations[5] = oper;
    oper = new org.apache.axis.description.OperationDesc();
    oper.setName(""protocollaDocumentoFisico"");
    param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName("""", ""in0""), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(""urn:stadocStadoc"", ""RequestProtocollaDocumentoFisico""), it.csi.conam.conambl.integration.beans.RequestProtocollaDocumentoFisico.class, false, false);
    oper.addParameter(param);
    oper.setReturnType(new javax.xml.namespace.QName(""urn:stadocStadoc"", ""ResponseProtocollaDocumento""));
    oper.setReturnClass(it.csi.conam.conambl.integration.beans.ResponseProtocollaDocumento.class);
    oper.setReturnQName(new javax.xml.namespace.QName("""", ""protocollaDocumentoFisicoReturn""));
    oper.setStyle(org.apache.axis.constants.Style.RPC);
    oper.setUse(org.apache.axis.constants.Use.ENCODED);
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.UnrecoverableException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""UnrecoverableException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.CSIException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""CSIException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.SystemException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""SystemException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.ProtocollaDocumentoException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""ProtocollaDocumentoException""), true));
    _operations[6] = oper;
    oper = new org.apache.axis.description.OperationDesc();
    oper.setName(""salvaDocumento"");
    param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName("""", ""in0""), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(""urn:stadocStadoc"", ""RequestSalvaDocumento""), it.csi.conam.conambl.integration.beans.RequestSalvaDocumento.class, false, false);
    oper.addParameter(param);
    oper.setReturnType(new javax.xml.namespace.QName(""urn:stadocStadoc"", ""ResponseSalvaDocumento""));
    oper.setReturnClass(it.csi.conam.conambl.integration.beans.ResponseSalvaDocumento.class);
    oper.setReturnQName(new javax.xml.namespace.QName("""", ""salvaDocumentoReturn""));
    oper.setStyle(org.apache.axis.constants.Style.RPC);
    oper.setUse(org.apache.axis.constants.Use.ENCODED);
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.UnrecoverableException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""UnrecoverableException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.CSIException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""CSIException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.SalvaDocumentoException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""SalvaDocumentoException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.SystemException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""SystemException""), true));
    _operations[7] = oper;
    oper = new org.apache.axis.description.OperationDesc();
    oper.setName(""eliminaDocumento"");
    param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName("""", ""in0""), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(""urn:stadocStadoc"", ""RequestEliminaDocumento""), it.csi.conam.conambl.integration.beans.RequestEliminaDocumento.class, false, false);
    oper.addParameter(param);
    oper.setReturnType(new javax.xml.namespace.QName(""urn:stadocStadoc"", ""ResponseEliminaDocumento""));
    oper.setReturnClass(it.csi.conam.conambl.integration.beans.ResponseEliminaDocumento.class);
    oper.setReturnQName(new javax.xml.namespace.QName("""", ""eliminaDocumentoReturn""));
    oper.setStyle(org.apache.axis.constants.Style.RPC);
    oper.setUse(org.apache.axis.constants.Use.ENCODED);
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.UnrecoverableException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""UnrecoverableException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.CSIException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""CSIException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.SystemException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""SystemException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.EliminaDocumentoException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""EliminaDocumentoException""), true));
    _operations[8] = oper;
    oper = new org.apache.axis.description.OperationDesc();
    oper.setName(""salvaDocumentoLogico"");
    param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName("""", ""in0""), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(""urn:stadocStadoc"", ""RequestSalvaDocumentoLogico""), it.csi.conam.conambl.integration.beans.RequestSalvaDocumentoLogico.class, false, false);
    oper.addParameter(param);
    oper.setReturnType(new javax.xml.namespace.QName(""urn:stadocStadoc"", ""ResponseSalvaDocumentoLogico""));
    oper.setReturnClass(it.csi.conam.conambl.integration.beans.ResponseSalvaDocumentoLogico.class);
    oper.setReturnQName(new javax.xml.namespace.QName("""", ""salvaDocumentoLogicoReturn""));
    oper.setStyle(org.apache.axis.constants.Style.RPC);
    oper.setUse(org.apache.axis.constants.Use.ENCODED);
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.UnrecoverableException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""UnrecoverableException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.CSIException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""CSIException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.SalvaDocumentoException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""SalvaDocumentoException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.SystemException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""SystemException""), true));
    _operations[9] = oper;
}",java:S100,
"public static Geometry ST_Normalize(Geometry geom){
    return geom.norm();
}",java:S100,
"public float getCreate_co(){
    return create_co;
}",java:S100,
"public static Geometry ST_StartPoint(Geometry geom){
    return ST_PointN(geom, 0);
}",java:S100,
" static DescribedPredicate<JavaAnnotation<?>> DomainService_logicalTypeName(){
    return DomainXxx_logicalTypeName(DomainService.class);
}",java:S100,
"public void kBaseInternal_addRules(Collection<? extends Rule> rules, Collection<InternalWorkingMemory> wms){
    List<TerminalNode> terminalNodes = new ArrayList<>(rules.size() * 2);
    for (Rule r : rules) {
        RuleImpl rule = (RuleImpl) r;
        checkParallelEvaluation(rule);
        this.hasMultipleAgendaGroups |= !rule.isMainAgendaGroup();
        terminalNodes.addAll(this.reteooBuilder.addRule(rule, wms));
    }
    if (PhreakBuilder.isEagerSegmentCreation() && !hasSegmentPrototypes()) {
        for (TerminalNode tn : terminalNodes) {
            tn.getPathMemSpec();
            BuildtimeSegmentUtilities.createPathProtoMemories(tn, null, this);
        }
        Set<Integer> visited = new HashSet<>();
        for (TerminalNode tn : terminalNodes) {
            wms.stream().forEach(wm -> {
                Add.insertLiaFacts(tn.getPathNodes()[0], wm, visited, true);
                Add.insertFacts(tn, wm, visited, true);
            });
        }
    }
}",java:S100,
"@Nullable
public static String ST_AsGML(Geometry geometry){
    return asGml(geometry);
}",java:S100,
"private void eliminaAllegatoBy_Stadoc(CnmTAllegato cnmTAllegato){
    String idIndex = validateRequestAllegatoAndGetIdIndex(cnmTAllegato);
    ResponseEliminaDocumento response = stadocServiceFacade.eliminaDocumentoIndex(idIndex);
    if (response == null)
        throw new RuntimeException(""documento non trovato su per idIndex:"" + idIndex);
    List<CnmTAllegatoField> field = cnmTAllegatoFieldRepository.findByCnmTAllegato(cnmTAllegato);
    if (field != null && !field.isEmpty())
        cnmTAllegatoFieldRepository.delete(field);
    cnmTAllegatoRepository.delete(cnmTAllegato);
}",java:S100,
"public static Geometry ST_Transform(Geometry geom, int srid){
    try {
        ProjectionTransformer projectionTransformer = new ProjectionTransformer(geom.getSRID(), srid);
        return projectionTransformer.transform(geom);
    } catch (IllegalStateException e) {
        throw RESOURCE.proj4jEpsgIsMissing().ex();
    }
}",java:S100,
"public static long pop_union(long[] arr1, long[] arr2, int wordOffset, int numWords){
    long popCount = 0;
    for (int i = wordOffset, end = wordOffset + numWords; i < end; ++i) {
        popCount += Long.bitCount(arr1[i] | arr2[i]);
    }
    return popCount;
}",java:S100,
"public AssertQuery throws_(String message){
    return withConnection(connection -> assertQuery(connection, sql, limit, materializationsEnabled, hooks, null, null, checkException(message)));
}",java:S100,
"public static String URLContentsToString(URL url){
    StringBuilder builder = new StringBuilder();
    if (url == null) {
        return null;
    }
    try (BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), IoUtils.UTF8_CHARSET))) {
        String line;
        while ((line = reader.readLine()) != null) {
            builder.append(line);
            builder.append(""\n"");
        }
    } catch (IOException e) {
        throw new RuntimeException(""Unable to read "" + url.toExternalForm());
    }
    return builder.toString();
}",java:S100,
"public static Geometry ST_Polygonize(Geometry geometry){
    Polygonizer polygonizer = new Polygonizer(true);
    polygonizer.add(geometry);
    return polygonizer.getGeometry();
}",java:S100,
"public static final XComponentContext defaultBootstrap_InitialComponentContext() throws Exception{
    return defaultBootstrap_InitialComponentContext((String) null, (Map<String, String>) null);
}",java:S100,
" CalciteSignature<T> prepare2_(Context context, Query<T> query, Type elementType, long maxRowCount, CalciteCatalogReader catalogReader, CalcitePreparingStmt preparingStmt){
    final JavaTypeFactory typeFactory = context.getTypeFactory();
    final RelDataType x;
    final Prepare.PreparedResult preparedResult;
    final Meta.StatementType statementType;
    if (query.sql != null) {
        final CalciteConnectionConfig config = context.config();
        SqlParser.Config parserConfig = parserConfig().withQuotedCasing(config.quotedCasing()).withUnquotedCasing(config.unquotedCasing()).withQuoting(config.quoting()).withConformance(config.conformance()).withCaseSensitive(config.caseSensitive());
        final SqlParserImplFactory parserFactory = config.parserFactory(SqlParserImplFactory.class, null);
        if (parserFactory != null) {
            parserConfig = parserConfig.withParserFactory(parserFactory);
        }
        SqlParser parser = createParser(query.sql, parserConfig);
        SqlNode sqlNode;
        try {
            sqlNode = parser.parseStmt();
            statementType = getStatementType(sqlNode.getKind());
        } catch (SqlParseException e) {
            throw new RuntimeException(""parse failed: "" + e.getMessage(), e);
        }
        Hook.PARSE_TREE.run(new Object[] { query.sql, sqlNode });
        if (sqlNode.getKind().belongsTo(SqlKind.DDL)) {
            executeDdl(context, sqlNode);
            return new CalciteSignature<>(query.sql, ImmutableList.of(), ImmutableMap.of(), null, ImmutableList.of(), Meta.CursorFactory.OBJECT, null, ImmutableList.of(), -1, null, Meta.StatementType.OTHER_DDL);
        }
        final SqlValidator validator = preparingStmt.createSqlValidator(catalogReader);
        preparedResult = preparingStmt.prepareSql(sqlNode, Object.class, validator, true);
        switch(sqlNode.getKind()) {
            case INSERT:
            case DELETE:
            case UPDATE:
            case EXPLAIN:
                x = RelOptUtil.createDmlRowType(sqlNode.getKind(), typeFactory);
                break;
            default:
                x = validator.getValidatedNodeType(sqlNode);
        }
    } else if (query.queryable != null) {
        x = context.getTypeFactory().createType(elementType);
        preparedResult = preparingStmt.prepareQueryable(query.queryable, x);
        statementType = getStatementType(preparedResult);
    } else {
        assert query.rel != null;
        x = query.rel.getRowType();
        preparedResult = preparingStmt.prepareRel(query.rel);
        statementType = getStatementType(preparedResult);
    }
    final List<AvaticaParameter> parameters = new ArrayList<>();
    final RelDataType parameterRowType = preparedResult.getParameterRowType();
    for (RelDataTypeField field : parameterRowType.getFieldList()) {
        RelDataType type = field.getType();
        parameters.add(new AvaticaParameter(false, getPrecision(type), getScale(type), getTypeOrdinal(type), getTypeName(type), getClassName(type), field.getName()));
    }
    RelDataType jdbcType = makeStruct(typeFactory, x);
    final List<? extends @Nullable List<String>> originList = preparedResult.getFieldOrigins();
    final List<ColumnMetaData> columns = getColumnMetaDataList(typeFactory, x, jdbcType, originList);
    Class resultClazz = null;
    if (preparedResult instanceof Typed) {
        resultClazz = (Class) ((Typed) preparedResult).getElementType();
    }
    final Meta.CursorFactory cursorFactory = preparingStmt.resultConvention == BindableConvention.INSTANCE ? Meta.CursorFactory.ARRAY : Meta.CursorFactory.deduce(columns, resultClazz);
    final Bindable<T> bindable = preparedResult.getBindable(cursorFactory);
    return new CalciteSignature<>(query.sql, parameters, preparingStmt.internalParameters, jdbcType, columns, cursorFactory, context.getRootSchema(), preparedResult instanceof Prepare.PreparedResultImpl ? ((Prepare.PreparedResultImpl) preparedResult).collations : ImmutableList.of(), maxRowCount, bindable, statementType);
}",java:S100,
"public static SwitchStatement switch_(Type type, Expression switchValue, Expression defaultBody, Method method, Iterable<? extends SwitchCase> cases){
    throw Extensions.todo();
}",java:S100,
"private ParseResult convert_(Context context, String sql, boolean analyze, boolean fail, CalciteCatalogReader catalogReader, SqlValidator validator, SqlNode sqlNode1){
    final JavaTypeFactory typeFactory = context.getTypeFactory();
    final Convention resultConvention = enableBindable ? BindableConvention.INSTANCE : EnumerableConvention.INSTANCE;
    final VolcanoPlanner planner = new VolcanoPlanner();
    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);
    final SqlToRelConverter.Config config = SqlToRelConverter.config().withTrimUnusedFields(true);
    final CalcitePreparingStmt preparingStmt = new CalcitePreparingStmt(this, context, catalogReader, typeFactory, context.getRootSchema(), null, createCluster(planner, new RexBuilder(typeFactory)), resultConvention, createConvertletTable());
    final SqlToRelConverter converter = preparingStmt.getSqlToRelConverter(validator, catalogReader, config);
    final RelRoot root = converter.convertQuery(sqlNode1, false, true);
    if (analyze) {
        return analyze_(validator, sql, sqlNode1, root, fail);
    }
    return new ConvertResult(this, validator, sql, sqlNode1, validator.getValidatedNodeType(sqlNode1), root);
}",java:S100,
"public static GotoStatement goto_(LabelTarget labelTarget, Expression expression, Type type){
    throw Extensions.todo();
}",java:S100,
"@Nullable
public static Geometry ST_LineFromText(String wkt){
    Geometry geometry = ST_GeomFromWKT(wkt);
    return geometry instanceof LineString ? geometry : null;
}",java:S100,
"public static GotoStatement goto_(LabelTarget labelTarget, Type type){
    throw Extensions.todo();
}",java:S100,
"@Nullable
public static Geometry ST_MakePolygon(Geometry shell, Geometry hole0, Geometry hole1){
    return makePolygon(shell, hole0, hole1);
}",java:S100,
"@Nullable
public static Geometry ST_OctagonalEnvelope(Geometry geom){
    return new OctagonalEnvelope(geom).toGeometry(geom.getFactory());
}",java:S100,
"@Nullable
public static Geometry ST_PolyFromText(String wkt){
    Geometry geometry = ST_GeomFromWKT(wkt);
    return geometry instanceof Polygon ? geometry : null;
}",java:S100,
"private String _write_multi_line(String tag, String text){
    if (text == null) {
        text = """";
    }
    int max_len = MAX_WIDTH - HEADER_WIDTH;
    ArrayList<String> lines = _split_multi_line(text, max_len);
    String output = _write_single_line(tag, lines.get(0));
    for (int i = 1; i < lines.size(); i++) {
        output += _write_single_line("""", lines.get(i));
    }
    return output;
}",java:S100,
"public static Double ST_ZMin(Geometry geom){
    return Arrays.stream(geom.getCoordinates()).filter(c -> !Double.isNaN(c.getZ())).map(c -> c.getZ()).min(Double::compareTo).orElse(Double.NaN);
}",java:S100,
"@Nullable
public static Geometry ST_MLineFromText(String wkt, int srid){
    Geometry geometry = ST_GeomFromWKT(wkt, srid);
    return geometry instanceof MultiLineString ? geometry : null;
}",java:S100,
"public static Geometry ST_Translate(Geometry geom, BigDecimal x, BigDecimal y){
    AffineTransformation transformation = new AffineTransformation();
    transformation.translate(x.doubleValue(), y.doubleValue());
    Geometry translated = transformation.transform(geom);
    return translated;
}",java:S100,
"public void setCreate_co(float create_co){
    this.create_co = create_co;
}",java:S100,
"public static FeeMarketException MissingBaseFeeMarket(){
    return new FeeMarketException(""Incorrectly configured ProtocolSchedule: requires BaseFeeMarket"");
}",java:S100,
"public void setCp_Double_count(final int count){
    cp_Double_count = count;
}",java:S100,
"public static ArchRule every_Collection_mixin_must_follow_naming_convention(){
    return mixin_must_follow_naming_conventions(Collection.class, ""coll"", mixinMethodNameToFind -> javaMethodCandidate -> javaMethodCandidate.getName().equals(mixinMethodNameToFind) && javaMethodCandidate.getRawParameterTypes().size() == 0);
}",java:S100,
"private static int get_x(int val){
    return val / MOD_NUM;
}",java:S100,
"public static ArchRule every_jpa_Entity_must_implement_Comparable(){
    return classes().that().areAnnotatedWith(Entity.class).should().implement(Comparable.class);
}",java:S100,
"private AnalyzeViewResult analyze_(SqlValidator validator, String sql, SqlNode sqlNode, RelRoot root, boolean fail){
    final RexBuilder rexBuilder = root.rel.getCluster().getRexBuilder();
    RelNode rel = root.rel;
    final RelNode viewRel = rel;
    Project project;
    if (rel instanceof Project) {
        project = (Project) rel;
        rel = project.getInput();
    } else {
        project = null;
    }
    Filter filter;
    if (rel instanceof Filter) {
        filter = (Filter) rel;
        rel = filter.getInput();
    } else {
        filter = null;
    }
    TableScan scan;
    if (rel instanceof TableScan) {
        scan = (TableScan) rel;
    } else {
        scan = null;
    }
    if (scan == null) {
        if (fail) {
            throw validator.newValidationError(sqlNode, RESOURCE.modifiableViewMustBeBasedOnSingleTable());
        }
        return new AnalyzeViewResult(this, validator, sql, sqlNode, validator.getValidatedNodeType(sqlNode), root, null, null, null, null, false);
    }
    final RelOptTable targetRelTable = scan.getTable();
    final RelDataType targetRowType = targetRelTable.getRowType();
    final Table table = targetRelTable.unwrapOrThrow(Table.class);
    final List<String> tablePath = targetRelTable.getQualifiedName();
    List<Integer> columnMapping;
    final Map<Integer, RexNode> projectMap = new HashMap<>();
    if (project == null) {
        columnMapping = ImmutableIntList.range(0, targetRowType.getFieldCount());
    } else {
        columnMapping = new ArrayList<>();
        for (Ord<RexNode> node : Ord.zip(project.getProjects())) {
            if (node.e instanceof RexInputRef) {
                RexInputRef rexInputRef = (RexInputRef) node.e;
                int index = rexInputRef.getIndex();
                if (projectMap.get(index) != null) {
                    if (fail) {
                        throw validator.newValidationError(sqlNode, RESOURCE.moreThanOneMappedColumn(targetRowType.getFieldList().get(index).getName(), Util.last(tablePath)));
                    }
                    return new AnalyzeViewResult(this, validator, sql, sqlNode, validator.getValidatedNodeType(sqlNode), root, null, null, null, null, false);
                }
                projectMap.put(index, rexBuilder.makeInputRef(viewRel, node.i));
                columnMapping.add(index);
            } else {
                columnMapping.add(-1);
            }
        }
    }
    final RexNode constraint;
    if (filter != null) {
        constraint = filter.getCondition();
    } else {
        constraint = rexBuilder.makeLiteral(true);
    }
    final List<RexNode> filters = new ArrayList<>();
    final List<RexNode> filters2 = new ArrayList<>();
    boolean retry = false;
    RelOptUtil.inferViewPredicates(projectMap, filters, constraint);
    if (fail && !filters.isEmpty()) {
        final Map<Integer, RexNode> projectMap2 = new HashMap<>();
        RelOptUtil.inferViewPredicates(projectMap2, filters2, constraint);
        if (!filters2.isEmpty()) {
            throw validator.newValidationError(sqlNode, RESOURCE.modifiableViewMustHaveOnlyEqualityPredicates());
        }
        retry = true;
    }
    for (RelDataTypeField field : targetRowType.getFieldList()) {
        final int x = columnMapping.indexOf(field.getIndex());
        if (x >= 0) {
            assert Util.skip(columnMapping, x + 1).indexOf(field.getIndex()) < 0 : ""column projected more than once; should have checked above"";
            continue;
        }
        if (projectMap.get(field.getIndex()) != null) {
            continue;
        }
        if (field.getType().isNullable()) {
            continue;
        }
        if (fail) {
            throw validator.newValidationError(sqlNode, RESOURCE.noValueSuppliedForViewColumn(field.getName(), Util.last(tablePath)));
        }
        return new AnalyzeViewResult(this, validator, sql, sqlNode, validator.getValidatedNodeType(sqlNode), root, null, null, null, null, false);
    }
    final boolean modifiable = filters.isEmpty() || retry && filters2.isEmpty();
    return new AnalyzeViewResult(this, validator, sql, sqlNode, validator.getValidatedNodeType(sqlNode), root, modifiable ? table : null, ImmutableList.copyOf(tablePath), constraint, ImmutableIntList.copyOf(columnMapping), modifiable);
}",java:S100,
"public static ArchRule every_injected_field_of_jpa_Entity_must_be_annotated_with_Transient(){
    return fields().that().areDeclaredInClassesThat(areEntities()).and().areAnnotatedWith(Inject.class).should().beAnnotatedWith(Transient.class);
}",java:S100,
"public boolean isBit2_createTimePresent(){
    return bit2_createTimePresent;
}",java:S100,
"@Nullable
public static ByteString ST_AsWKB(Geometry geometry){
    return asWkb(geometry);
}",java:S100,
"public static final XComponentContext defaultBootstrap_InitialComponentContext(String ini_file, Hashtable<String, String> bootstrap_parameters) throws Exception{
    return defaultBootstrap_InitialComponentContext(ini_file, (Map<String, String>) bootstrap_parameters);
}",java:S100,
"public static Geometry ST_ConvexHull(Geometry geom){
    return geom.convexHull();
}",java:S100,
"private void __forwardEventToButton(MouseEvent e){
    TableColumnModel columnModel = __table.getColumnModel();
    int column = columnModel.getColumnIndexAtX(e.getX());
    int row = e.getY() / __table.getRowHeight();
    Component component;
    if (row >= __table.getRowCount() || row < 0 || column >= __table.getColumnCount() || column < 0)
        return;
    Object value = __table.getValueAt(row, column);
    if (!(value instanceof Component))
        return;
    component = (Component) value;
    MouseEvent mevent = SwingUtilities.convertMouseEvent(__table, e, component);
    component.dispatchEvent(mevent);
    __table.repaint();
}",java:S100,
"public boolean have_field_flags_hi(){
    return have_field_flags_hi;
}",java:S100,
"public static boolean ST_IsValid(Geometry geom){
    return geom.isValid();
}",java:S100,
"@Nullable
public static Geometry ST_GeomFromEWKB(ByteString ewkb){
    return ST_GeomFromWKB(ewkb);
}",java:S100,
"public boolean have_file_size_hi(){
    return have_file_size_hi;
}",java:S100,
"public char getDefaultValueAs_char(){
    if (StringUtils.isEmpty(initExpr)) {
        return '\u0000';
    } else {
        if (initExpr.length() == 1) {
            return initExpr.charAt(0);
        } else {
            return CoreComponentsBuilder.get().getMVELExecutor().eval(initExpr, Character.class);
        }
    }
}",java:S100,
"private RelBuilder project_(Iterable<? extends RexNode> nodes, Iterable<? extends @Nullable String> fieldNames, Iterable<RelHint> hints, boolean force, Iterable<CorrelationId> variablesSet){
    final Frame frame = requireNonNull(peek_(), ""frame stack is empty"");
    final RelDataType inputRowType = frame.rel.getRowType();
    final List<RexNode> nodeList = Lists.newArrayList(nodes);
    final Set<CorrelationId> variables = ImmutableSet.copyOf(variablesSet);
    if (!force && Iterables.isEmpty(fieldNames) && RexUtil.isIdentity(nodeList, inputRowType)) {
        return this;
    }
    final List<@Nullable String> fieldNameList = Lists.newArrayList(fieldNames);
    while (fieldNameList.size() < nodeList.size()) {
        fieldNameList.add(null);
    }
    bloat: if (frame.rel instanceof Project && config.bloat() >= 0 && variables.isEmpty()) {
        final Project project = (Project) frame.rel;
        for (int i = 0; i < fieldNameList.size(); i++) {
            if (fieldNameList.get(i) == null) {
                final RexNode node = nodeList.get(i);
                if (node instanceof RexInputRef) {
                    final RexInputRef ref = (RexInputRef) node;
                    fieldNameList.set(i, project.getRowType().getFieldNames().get(ref.getIndex()));
                }
            }
        }
        final List<RexNode> newNodes = RelOptUtil.pushPastProjectUnlessBloat(nodeList, project, config.bloat());
        if (newNodes == null) {
            break bloat;
        }
        final Frame frame1 = stack.pop();
        final List<Field> fields = new ArrayList<>();
        for (RelDataTypeField f : project.getInput().getRowType().getFieldList()) {
            fields.add(new Field(ImmutableSet.of(), f));
        }
        for (Pair<RexNode, Field> pair : Pair.zip(project.getProjects(), frame1.fields)) {
            switch(pair.left.getKind()) {
                case INPUT_REF:
                    final int i = ((RexInputRef) pair.left).getIndex();
                    final Field field = fields.get(i);
                    final ImmutableSet<String> aliases = pair.right.left;
                    fields.set(i, new Field(aliases, field.right));
                    break;
                default:
                    break;
            }
        }
        stack.push(new Frame(project.getInput(), ImmutableList.copyOf(fields)));
        final ImmutableSet.Builder<RelHint> mergedHints = ImmutableSet.builder();
        mergedHints.addAll(project.getHints());
        mergedHints.addAll(hints);
        return project_(newNodes, fieldNameList, mergedHints.build(), force, ImmutableSet.copyOf(project.getVariablesSet()));
    }
    if (config.simplify()) {
        nodeList.replaceAll(e -> simplifier.simplifyPreservingType(e));
    }
    for (int i = 0; i < fieldNameList.size(); i++) {
        if (fieldNameList.get(i) == null) {
            fieldNameList.set(i, inferAlias(nodeList, nodeList.get(i), i));
        }
    }
    final ImmutableList.Builder<Field> fields = ImmutableList.builder();
    final Set<String> uniqueNameList = getTypeFactory().getTypeSystem().isSchemaCaseSensitive() ? new HashSet<>() : new TreeSet<>(String.CASE_INSENSITIVE_ORDER);
    for (int i = 0; i < fieldNameList.size(); ++i) {
        final RexNode node = nodeList.get(i);
        String name = fieldNameList.get(i);
        String originalName = name;
        Field field;
        if (name == null || uniqueNameList.contains(name)) {
            int j = 0;
            if (name == null) {
                j = i;
            }
            do {
                name = SqlValidatorUtil.F_SUGGESTER.apply(originalName, j, j++);
            } while (uniqueNameList.contains(name));
            fieldNameList.set(i, name);
        }
        RelDataTypeField fieldType = new RelDataTypeFieldImpl(name, i, node.getType());
        switch(node.getKind()) {
            case INPUT_REF:
                final int index = ((RexInputRef) node).getIndex();
                field = new Field(frame.fields.get(index).left, fieldType);
                break;
            default:
                field = new Field(ImmutableSet.of(), fieldType);
                break;
        }
        uniqueNameList.add(name);
        fields.add(field);
    }
    if (!force && RexUtil.isIdentity(nodeList, inputRowType)) {
        if (fieldNameList.equals(inputRowType.getFieldNames())) {
            return this;
        } else {
            stack.pop();
            stack.push(new Frame(frame.rel, fields.build()));
        }
        return this;
    }
    final int rowCount;
    if (config.simplifyValues() && nodeList.stream().allMatch(e -> e instanceof RexLiteral) && (rowCount = fixedRowCount(frame)) >= 0) {
        RelNode unused = build();
        final RelDataTypeFactory.Builder typeBuilder = getTypeFactory().builder();
        Pair.forEach(fieldNameList, nodeList, (name, expr) -> typeBuilder.add(requireNonNull(name, ""name""), expr.getType()));
        @SuppressWarnings({ ""unchecked"", ""rawtypes"" })
        final List<RexLiteral> tuple = (List<RexLiteral>) (List) nodeList;
        return values(Collections.nCopies(rowCount, tuple), typeBuilder.build());
    }
    final RelNode project = struct.projectFactory.createProject(frame.rel, ImmutableList.copyOf(hints), ImmutableList.copyOf(nodeList), fieldNameList, variables);
    stack.pop();
    stack.push(new Frame(project, fields.build()));
    return this;
}",java:S100,
"private GroupKey groupKey_(ImmutableBitSet groupSet, ImmutableList<ImmutableBitSet> groupSets){
    if (groupSet.length() > peek().getRowType().getFieldCount()) {
        throw new IllegalArgumentException(""out of bounds: "" + groupSet);
    }
    requireNonNull(groupSets, ""groupSets"");
    final ImmutableList<RexNode> nodes = fields(groupSet);
    return groupKey_(nodes, Util.transform(groupSets, this::fields));
}",java:S100,
"public void kBaseInternal_removePackage(InternalKnowledgePackage pkg, Collection<InternalWorkingMemory> workingMemories){
    final Set<String> referencedGlobals = new HashSet<>();
    for (InternalKnowledgePackage pkgref : this.pkgs.values()) {
        if (pkgref != pkg) {
            referencedGlobals.addAll(pkgref.getGlobals().keySet());
        }
    }
    for (String globalName : pkg.getGlobals().keySet()) {
        if (!referencedGlobals.contains(globalName)) {
            this.globals.remove(globalName);
        }
    }
    for (String processName : new ArrayList<>(pkg.getRuleFlows().keySet())) {
        removeProcess(processName);
    }
    this.pkgs.remove(pkg.getName());
    pkg.getDialectRuntimeRegistry().onRemove();
    pkg.clear();
}",java:S100,
"public static NewExpression new_(Constructor constructor, Iterable<? extends Expression> expressions, Iterable<? extends MemberDeclaration> memberDeclarations){
    return new_(constructor.getDeclaringClass(), toList(expressions), toList(memberDeclarations));
}",java:S100,
"@Nullable
public static Geometry ST_GeomFromWKB(ByteString wkb, int srid){
    Geometry geometry = fromWkb(wkb);
    geometry.setSRID(srid);
    return geometry;
}",java:S100,
"public static boolean ST_IsSimple(Geometry geom){
    return geom.isSimple();
}",java:S100,
"public void setHave_class_flags_hi(final boolean have_class_flags_hi){
    this.have_class_flags_hi = have_class_flags_hi;
}",java:S100,
"public ReentrantReadWriteLock kBaseInternal_getLock(){
    return lock;
}",java:S100,
"public static String PLUGIN(String path){
    return Path.of(PLUGINS_FOLDER, path).toString();
}",java:S100,
"public T1 get_1(){
    return _1;
}",java:S100,
"@Nullable
public static Geometry ST_GeomFromGML(String gml){
    return ST_GeomFromGML(gml, NO_SRID);
}",java:S100,
"public static NewExpression new_(Constructor constructor, Iterable<? extends Expression> expressions){
    return new NewExpression(constructor.getDeclaringClass(), toList(expressions), null);
}",java:S100,
"private String[] SQLLineCmdBuild(String sqlScriptFile){
    return new String[] { ""-u"", getJdbcUrl(), ""-d"", getJdbcDriver(), ""-n"", getRootUser(), ""-p"", getRootPassword(), ""--isolation=TRANSACTION_READ_COMMITTED"", ""-f"", sqlScriptFile };
}",java:S100,
"public static UnaryExpression convert_(Expression expression, Type type, Method method){
    throw Extensions.todo();
}",java:S100,
"public void setCp_Class_count(final int count){
    cp_Class_count = count;
}",java:S100,
"public Integer return_(HplsqlParser.Return_stmtContext ctx){
    trace(ctx, ""RETURN"");
    if (ctx.expr() != null) {
        eval(ctx.expr());
    }
    exec.signal(Signal.Type.LEAVE_ROUTINE);
    return 0;
}",java:S100,
"public static boolean ST_IsEmpty(Geometry geom){
    return geom.isEmpty();
}",java:S100,
"@Nullable
public static Geometry ST_ProjectPoint(Geometry point, Geometry lineString){
    if (lineString.getDimension() > 1) {
        return null;
    }
    LengthIndexedLine lengthIndexedLine = new LengthIndexedLine(lineString);
    double index = lengthIndexedLine.project(point.getCoordinate());
    Coordinate projectedCoordinate = lengthIndexedLine.extractPoint(index);
    return GEOMETRY_FACTORY.createPoint(projectedCoordinate);
}",java:S100,
"public static SubstitutionMatrix<NucleotideCompound> getNuc4_4(){
    return getNucleotideMatrix(""nuc-4_4"");
}",java:S100,
"public static CatchBlock catch_(ParameterExpression parameter, Statement statement){
    return new CatchBlock(parameter, statement);
}",java:S100,
"public static Geometry ST_LineMerge(Geometry geom){
    LineMerger merger = new LineMerger();
    merger.add(geom);
    LineString[] geometries = ((Stream<Object>) merger.getMergedLineStrings().stream()).map(LineString.class::cast).toArray(size -> new LineString[size]);
    return GEOMETRY_FACTORY.createMultiLineString(geometries);
}",java:S100,
"@Nullable
public static Geometry ST_Extent(Geometry geom){
    return geom.getEnvelope();
}",java:S100,
"private Exception UndefinedForwardRequestHandlerException(){
    return new Exception(""No forward request defines for"" + this.getClass());
}",java:S100,
"public static Geometry ST_MakeEnvelope(BigDecimal xMin, BigDecimal yMin, BigDecimal xMax, BigDecimal yMax){
    return ST_MakeEnvelope(xMin, yMin, xMax, yMax, NO_SRID);
}",java:S100,
"public static boolean ST_Overlaps(Geometry geom1, Geometry geom2){
    return geom1.overlaps(geom2);
}",java:S100,
"public void setHave_all_code_flags(final boolean have_all_code_flags){
    this.have_all_code_flags = have_all_code_flags;
}",java:S100,
"@Nullable
public static Geometry ST_LineFromText(String wkt, int srid){
    Geometry geometry = ST_GeomFromWKT(wkt, srid);
    return geometry instanceof LineString ? geometry : null;
}",java:S100,
"private void authenticateElseThrow_usingDelegatedMechanism(final AuthenticationToken token){
    AuthenticationInfo delegateAccount = null;
    try {
        delegateAccount = delegateAuthenticationRealm.getAuthenticationInfo(token);
    } catch (AuthenticationException ex) {
    }
    if (delegateAccount == null) {
        throw credentialsException();
    }
}",java:S100,
"private static Enumerable<TResult> hashEquiJoin_(final Enumerable<TSource> outer, final Enumerable<TInner> inner, final Function1<TSource, TKey> outerKeySelector, final Function1<TInner, TKey> innerKeySelector, final Function2<TSource, TInner, TResult> resultSelector, @Nullable final EqualityComparer<TKey> comparer, final boolean generateNullsOnLeft, final boolean generateNullsOnRight){
    return new AbstractEnumerable<TResult>() {

        @Override
        public Enumerator<TResult> enumerator() {
            final Lookup<TKey, TInner> innerLookup = comparer == null ? inner.toLookup(innerKeySelector) : inner.toLookup(innerKeySelector, comparer);
            return new Enumerator<TResult>() {

                Enumerator<TSource> outers = outer.enumerator();

                Enumerator<TInner> inners = Linq4j.emptyEnumerator();

                @Nullable
                Set<TKey> unmatchedKeys = generateNullsOnLeft ? new HashSet<>(innerLookup.keySet()) : null;

                @Override
                public TResult current() {
                    return resultSelector.apply(outers.current(), inners.current());
                }

                @Override
                public boolean moveNext() {
                    for (; ; ) {
                        if (inners.moveNext()) {
                            return true;
                        }
                        if (!outers.moveNext()) {
                            if (unmatchedKeys != null) {
                                List<TInner> list = new ArrayList<>();
                                for (TKey key : unmatchedKeys) {
                                    @SuppressWarnings(""argument.type.incompatible"")
                                    Enumerable<TInner> innerValues = requireNonNull(innerLookup.get(key));
                                    for (TInner tInner : innerValues) {
                                        list.add(tInner);
                                    }
                                }
                                inners = Linq4j.enumerator(list);
                                outers.close();
                                outers = Linq4j.singletonNullEnumerator();
                                outers.moveNext();
                                unmatchedKeys = null;
                                continue;
                            }
                            return false;
                        }
                        final TSource outer = outers.current();
                        final Enumerable<TInner> innerEnumerable;
                        if (outer == null) {
                            innerEnumerable = null;
                        } else {
                            final TKey outerKey = outerKeySelector.apply(outer);
                            if (outerKey == null) {
                                innerEnumerable = null;
                            } else {
                                if (unmatchedKeys != null) {
                                    unmatchedKeys.remove(outerKey);
                                }
                                innerEnumerable = innerLookup.get(outerKey);
                            }
                        }
                        if (innerEnumerable == null || !innerEnumerable.any()) {
                            if (generateNullsOnRight) {
                                inners = Linq4j.singletonNullEnumerator();
                            } else {
                                inners = Linq4j.emptyEnumerator();
                            }
                        } else {
                            inners = innerEnumerable.enumerator();
                        }
                    }
                }

                @Override
                public void reset() {
                    outers.reset();
                }

                @Override
                public void close() {
                    outers.close();
                }
            };
        }
    };
}",java:S100,
"private static ComparableList<T> of_(List<T> t){
    switch(t.size()) {
        case 0:
            return COMPARABLE_EMPTY_LIST;
        case 1:
            return new Flat1List<>(t.get(0));
        case 2:
            return new Flat2List<>(t.get(0), t.get(1));
        case 3:
            return new Flat3List<>(t.get(0), t.get(1), t.get(2));
        case 4:
            return new Flat4List<>(t.get(0), t.get(1), t.get(2), t.get(3));
        case 5:
            return new Flat5List<>(t.get(0), t.get(1), t.get(2), t.get(3), t.get(4));
        case 6:
            return new Flat6List<>(t.get(0), t.get(1), t.get(2), t.get(3), t.get(4), t.get(5));
        default:
            return new ComparableListImpl(Arrays.asList(t.toArray()));
    }
}",java:S100,
"public static ArchRule every_jpa_Entity_must_have_an_id_field(){
    return everyJpa_Entity_must_have_a_field_named_and_annotated(""id"", Id.class);
}",java:S100,
"public void kBaseInternal_addProcess(Process process){
    this.processes.put(process.getId(), process);
}",java:S100,
"public static NewExpression new_(Type type){
    return new_(type, ImmutableList.of());
}",java:S100,
"public void setAttribute_definition_count(final int attribute_definition_count){
    this.attribute_definition_count = attribute_definition_count;
}",java:S100,
"public Integer while_(HplsqlParser.While_stmtContext ctx){
    trace(ctx, ""WHILE - ENTERED"");
    String label = exec.labelPop();
    while (true) {
        if (evalPop(ctx.bool_expr()).isTrue()) {
            exec.enterScope(Scope.Type.LOOP);
            visit(ctx.block());
            exec.leaveScope();
            if (canContinue(label)) {
                continue;
            }
        }
        break;
    }
    trace(ctx, ""WHILE - LEFT"");
    return 0;
}",java:S100,
"public static Geometry ST_SimplifyPreserveTopology(Geometry geom, BigDecimal distance){
    TopologyPreservingSimplifier simplifier = new TopologyPreservingSimplifier(geom);
    simplifier.setDistanceTolerance(distance.doubleValue());
    return simplifier.getResultGeometry();
}",java:S100,
"private static ComparableList<T> flatList_(T[] t, boolean copy){
    switch(t.length) {
        case 0:
            return COMPARABLE_EMPTY_LIST;
        case 1:
            return new Flat1List<>(t[0]);
        case 2:
            return new Flat2List<>(t[0], t[1]);
        case 3:
            return new Flat3List<>(t[0], t[1], t[2]);
        case 4:
            return new Flat4List<>(t[0], t[1], t[2], t[3]);
        case 5:
            return new Flat5List<>(t[0], t[1], t[2], t[3], t[4]);
        case 6:
            return new Flat6List<>(t[0], t[1], t[2], t[3], t[4], t[5]);
        default:
            if (copy) {
                return new ComparableListImpl<>(Arrays.asList(t.clone()));
            } else {
                return new ComparableListImpl<>(Arrays.asList(t));
            }
    }
}",java:S100,
"private static Enumerable<TResult> groupBy_(final Map<TKey, TAccumulate> map, Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector, Function0<TAccumulate> accumulatorInitializer, Function2<TAccumulate, TSource, TAccumulate> accumulatorAdder, final Function2<TKey, TAccumulate, TResult> resultSelector){
    try (Enumerator<TSource> os = enumerable.enumerator()) {
        while (os.moveNext()) {
            TSource o = os.current();
            TKey key = keySelector.apply(o);
            @SuppressWarnings(""argument.type.incompatible"")
            TAccumulate accumulator = map.get(key);
            if (accumulator == null) {
                accumulator = accumulatorInitializer.apply();
                accumulator = accumulatorAdder.apply(accumulator, o);
                map.put(key, accumulator);
            } else {
                TAccumulate accumulator0 = accumulator;
                accumulator = accumulatorAdder.apply(accumulator, o);
                if (accumulator != accumulator0) {
                    map.put(key, accumulator);
                }
            }
        }
    }
    return new LookupResultEnumerable<>(map, resultSelector);
}",java:S100,
"public Integer getEnable_duplicate_check(){
    return enable_duplicate_check;
}",java:S100,
"public static FragmentMapping _fragmentMapping(RelNode rel, RelMetadataQuery mq, MappingQueryContext ctx){
    assert mq instanceof RelMetadataQueryEx;
    return ((RelMetadataQueryEx) mq).fragmentMapping(rel, ctx);
}",java:S100,
"@Nullable
public static Geometry ST_PolyFromWKB(ByteString wkb){
    Geometry geometry = ST_GeomFromWKB(wkb);
    return geometry instanceof Polygon ? geometry : null;
}",java:S100,
"public Integer break_(HplsqlParser.Break_stmtContext ctx){
    trace(ctx, ""BREAK"");
    leaveLoop("""");
    return 0;
}",java:S100,
"private SqlCall createCall_(@Nullable SqlLiteral functionQualifier, SqlParserPos pos, @Nullable SqlNode valueExpr){
    return super.createCall(functionQualifier, pos, valueExpr);
}",java:S100,
"private Bytes _encodedBytes(){
    final MutableBytes bytes = MutableBytes.create(BYTES_REQUIRED);
    UInt256.valueOf(r).copyTo(bytes, 0);
    UInt256.valueOf(s).copyTo(bytes, 32);
    bytes.set(64, recId);
    return bytes;
}",java:S100,
"private void CloseCursor(OdbcQueryResults results, long queryId){
    assert (results != null);
    results.closeAll();
    qryResults.remove(queryId);
}",java:S100,
"@Nullable
public static Geometry ST_FurthestCoordinate(Geometry point, Geometry geom){
    List<Coordinate> closestCoordinates = new ArrayList<>();
    double maxDistance = Double.MIN_VALUE;
    for (Coordinate coordinate : geom.getCoordinates()) {
        double distance = point.getCoordinate().distance(coordinate);
        if (distance > maxDistance) {
            maxDistance = distance;
            closestCoordinates.clear();
            closestCoordinates.add(coordinate);
        } else if (distance == maxDistance && !closestCoordinates.contains(coordinate)) {
            closestCoordinates.add(coordinate);
        }
    }
    if (closestCoordinates.size() == 1) {
        return GEOMETRY_FACTORY.createPoint(closestCoordinates.get(0));
    } else {
        Coordinate[] coordinates = closestCoordinates.toArray(new Coordinate[0]);
        return GEOMETRY_FACTORY.createMultiPointFromCoords(coordinates);
    }
}",java:S100,
"public void kBaseInternal_addPackages(Collection<InternalKnowledgePackage> clonedPkgs, Collection<InternalWorkingMemory> workingMemories){
    for (InternalKnowledgePackage newPkg : clonedPkgs) {
        newPkg.checkValidity();
        newPkg.mergeTraitRegistry(this);
        InternalKnowledgePackage pkg = this.pkgs.get(newPkg.getName());
        if (pkg == null) {
            pkg = CoreComponentFactory.get().createKnowledgePackage(newPkg.getName());
            pkg.setClassFieldAccessorCache(this.classFieldAccessorCache);
            pkgs.put(pkg.getName(), pkg);
        }
        pkg.getDialectRuntimeRegistry().merge(newPkg.getDialectRuntimeRegistry(), this.rootClassLoader, true);
    }
    processAllTypesDeclaration(clonedPkgs);
    for (InternalKnowledgePackage newPkg : clonedPkgs) {
        JavaDialectRuntimeData runtime = ((JavaDialectRuntimeData) newPkg.getDialectRuntimeRegistry().getDialectData(""java""));
        for (Function function : newPkg.getFunctions().values()) {
            String functionClassName = function.getClassName();
            try {
                registerFunctionClassAndInnerClasses(functionClassName, runtime, this::registerAndLoadTypeDefinition);
            } catch (ClassNotFoundException e) {
                throw new RuntimeException(""Unable to compile function '"" + function.getName() + ""'"", e);
            }
        }
    }
    for (InternalKnowledgePackage newPkg : clonedPkgs) {
        InternalKnowledgePackage pkg = this.pkgs.get(newPkg.getName());
        if (newPkg.getFunctions() != null) {
            for (Map.Entry<String, Function> entry : newPkg.getFunctions().entrySet()) {
                pkg.addFunction(entry.getValue());
            }
        }
        pkg.getDialectRuntimeRegistry().onBeforeExecute();
        pkg.mergeStore(newPkg);
    }
    for (InternalKnowledgePackage newPkg : clonedPkgs) {
        InternalKnowledgePackage pkg = this.pkgs.get(newPkg.getName());
        mergePackage(pkg, newPkg, workingMemories);
        for (WindowDeclaration window : newPkg.getWindowDeclarations().values()) {
            this.reteooBuilder.addNamedWindow(window, workingMemories);
        }
        for (String entryPointId : newPkg.getEntryPointIds()) {
            this.reteooBuilder.addEntryPoint(entryPointId, workingMemories);
        }
        kBaseInternal_addRules(newPkg.getRules(), workingMemories);
        if (newPkg.getRuleFlows() != null) {
            final Map<String, Process> flows = newPkg.getRuleFlows();
            for (Process process : flows.values()) {
                kBaseInternal_addProcess(process);
            }
        }
        if (!newPkg.getResourceTypePackages().isEmpty()) {
            KieWeavers weavers = KieService.load(KieWeavers.class);
            for (ResourceTypePackage rtkKpg : newPkg.getResourceTypePackages().values()) {
                weavers.weave(newPkg, rtkKpg);
            }
        }
        ruleUnitDescriptionRegistry.add(newPkg.getRuleUnitDescriptionLoader());
    }
    if (ruleBaseConfig.isParallelEvaluation()) {
        setupParallelEvaluation();
    }
}",java:S100,
"public static int ST_NumPoints(Geometry geom){
    return geom.getCoordinates().length;
}",java:S100,
"private static int get_y(int val){
    return val % MOD_NUM;
}",java:S100,
"public static boolean ST_Crosses(Geometry geom1, Geometry geom2){
    return geom1.crosses(geom2);
}",java:S100,
"public static long MurmurHash3_x64_64(byte[] data, int offset, int len){
    return MurmurHash3_x64_64(BYTE_ARRAY_LOADER, data, offset, len, DEFAULT_MURMUR_SEED);
}",java:S100,
"public void setIc_count(final int ic_count){
    this.ic_count = ic_count;
}",java:S100,
"private SelenideWait Wait(long timeoutMs){
    return new SelenideWait(webDriver, timeoutMs, config.pollingInterval());
}",java:S100,
"protected void explain_(RelNode rel, List<Pair<String, @Nullable Object>> values){
    List<RelNode> inputs = rel.getInputs();
    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();
    if (!mq.isVisibleInExplain(rel, detailLevel)) {
        explainInputs(inputs);
        return;
    }
    StringBuilder s = new StringBuilder();
    spacer.spaces(s);
    if (withIdPrefix) {
        s.append(rel.getId()).append("":"");
    }
    s.append(rel.getRelTypeName());
    if (detailLevel != SqlExplainLevel.NO_ATTRIBUTES) {
        int j = 0;
        for (Pair<String, @Nullable Object> value : values) {
            if (value.right instanceof RelNode) {
                continue;
            }
            if (j++ == 0) {
                s.append(""("");
            } else {
                s.append("", "");
            }
            s.append(value.left).append(""=["").append(value.right).append(""]"");
        }
        if (j > 0) {
            s.append("")"");
        }
    }
    switch(detailLevel) {
        case ALL_ATTRIBUTES:
            s.append("": rowcount = "").append(mq.getRowCount(rel)).append("", cumulative cost = "").append(mq.getCumulativeCost(rel));
            break;
        default:
            break;
    }
    switch(detailLevel) {
        case NON_COST_ATTRIBUTES:
        case ALL_ATTRIBUTES:
            if (!withIdPrefix) {
                s.append("", id = "").append(rel.getId());
            }
            break;
        default:
            break;
    }
    pw.println(s);
    spacer.add(2);
    explainInputs(inputs);
    spacer.subtract(2);
}",java:S100,
" static DescribedPredicate<JavaAnnotation<?>> DomainObject_logicalTypeName(){
    return DomainXxx_logicalTypeName(DomainObject.class);
}",java:S100,
"public static Geometry ST_Difference(Geometry geom1, Geometry geom2){
    return geom1.difference(geom2);
}",java:S100,
"public static GotoStatement return_(@Nullable LabelTarget labelTarget, @Nullable Expression expression){
    return makeGoto(GotoExpressionKind.Return, labelTarget, expression);
}",java:S100,
"@Nullable
public static Geometry ST_ToMultiSegments(Geometry geom){
    GeometryFactory factory = geom.getFactory();
    ArrayList<LineString> lines = new ArrayList<>();
    geom.apply((GeometryComponentFilter) inputGeom -> {
        if (inputGeom instanceof LineString) {
            Coordinate[] coordinates = inputGeom.getCoordinates();
            for (int i = 1; i < coordinates.length; i++) {
                Coordinate[] pair = new Coordinate[] { coordinates[i - 1], coordinates[i] };
                lines.add(factory.createLineString(pair));
            }
        }
    });
    if (lines.isEmpty()) {
        return factory.createMultiLineString();
    } else {
        return factory.createMultiLineString(lines.toArray(new LineString[lines.size()]));
    }
}",java:S100,
"public static Geometry ST_RemoveRepeatedPoints(Geometry geom){
    return new RemoveRepeatedPointsTransformer().transform(geom);
}",java:S100,
"private CnmTAllegato salvaAllegato_Stadoc(byte[] file, String filename, Long idTipoAllegato, List<AllegatoFieldVO> configAllegato, CnmTUser cnmTUser, TipoProtocolloAllegato tipoProtocolloAllegato, String folder, String idEntitaFruitore, boolean isMaster, boolean protocollazioneInUscita, String soggettoActa, String rootActa, int numeroAllegati, Integer idVerbaleAudizione, String tipoActa, List<CnmTSoggetto> cnmTSoggettoList){
    CnmDTipoAllegato cnmDTipoAllegato = cnmDTipoAllegatoRepository.findOne(idTipoAllegato);
    Timestamp now = utilsDate.asTimeStamp(LocalDateTime.now());
    if (cnmDTipoAllegato == null)
        throw new SecurityException(""id tipo allegato non trovato"");
    CnmTAllegato cnmTAllegato = new CnmTAllegato();
    if (idVerbaleAudizione != null && idVerbaleAudizione != 0)
        cnmTAllegato.setIdAllegato(idVerbaleAudizione);
    if (tipoProtocolloAllegato.getId() == TipoProtocolloAllegato.PROTOCOLLARE.getId()) {
        if (folder == null)
            throw new IllegalArgumentException(""folder non valorizzato"");
        CnmDStatoAllegato cnmDStatoAllegato = cnmDStatoAllegatoRepository.findOne(Constants.STATO_ALLEGATO_PROTOCOLLATO);
        ResponseProtocollaDocumento responseProtocollaDocumento = stadocServiceFacade.protocollaDocumentoFisico(folder, file, filename, idEntitaFruitore, isMaster, protocollazioneInUscita, soggettoActa, rootActa, idTipoAllegato.longValue(), tipoActa, cnmTSoggettoList, null);
        cnmTAllegato.setCnmDStatoAllegato(cnmDStatoAllegato);
        cnmTAllegato.setIdActa(responseProtocollaDocumento.getIdDocumento());
        cnmTAllegato.setIdIndex(null);
        cnmTAllegato.setNumeroProtocollo(responseProtocollaDocumento.getProtocollo());
        cnmTAllegato.setDataOraProtocollo(now);
    } else if (tipoProtocolloAllegato.getId() == TipoProtocolloAllegato.NON_PROTOCOLLARE.getId()) {
        CnmDStatoAllegato cnmDStatoAllegato = cnmDStatoAllegatoRepository.findOne(Constants.STATO_ALLEGATO_NON_PROTOCOLLARE);
        ResponseSalvaDocumento responseSalvaDocumento = stadocServiceFacade.salvaDocumentoIndex(cnmDTipoAllegato.getDescTipoAllegato(), file, filename, """");
        cnmTAllegato.setCnmDStatoAllegato(cnmDStatoAllegato);
        cnmTAllegato.setIdActa(null);
        cnmTAllegato.setIdIndex(responseSalvaDocumento.getIdDocumento());
    } else if (tipoProtocolloAllegato.getId() == TipoProtocolloAllegato.DA_PROTOCOLLARE_IN_ISTANTE_SUCCESSIVO.getId()) {
        CnmDStatoAllegato cnmDStatoAllegato = cnmDStatoAllegatoRepository.findOne(Constants.STATO_ALLEGATO_DA_PROTOCOLLARE_IN_ISTANTE_SUCCESSIVO);
        ResponseSalvaDocumento responseSalvaDocumento = stadocServiceFacade.salvaDocumentoIndex(cnmDTipoAllegato.getDescTipoAllegato(), file, filename, """");
        cnmTAllegato.setCnmDStatoAllegato(cnmDStatoAllegato);
        cnmTAllegato.setIdActa(null);
        cnmTAllegato.setIdIndex(responseSalvaDocumento.getIdDocumento());
    } else if (tipoProtocolloAllegato.getId() == TipoProtocolloAllegato.SALVA_MULTI_SENZA_PROTOCOLARE.getId()) {
        CnmDStatoAllegato cnmDStatoAllegato = cnmDStatoAllegatoRepository.findOne(Constants.STATO_ALLEGATO_NON_PROTOCOLLARE);
        if (isMaster) {
            ResponseArchiviaDocumento responseArchiviaDocumento = stadocServiceFacade.archiviaDocumentoFisico(file, filename, folder, rootActa, numeroAllegati, idEntitaFruitore, idTipoAllegato.longValue());
            cnmTAllegato.setCnmDStatoAllegato(cnmDStatoAllegato);
            cnmTAllegato.setIdActa(responseArchiviaDocumento.getIdDocumento());
            cnmTAllegato.setIdIndex(null);
        } else {
            ResponseSalvaDocumento responseSalvaDocumento = stadocServiceFacade.salvaDocumentoIndex(cnmDTipoAllegato.getDescTipoAllegato(), file, filename, """");
            cnmTAllegato.setCnmDStatoAllegato(cnmDStatoAllegato);
            cnmTAllegato.setIdActa(null);
            cnmTAllegato.setIdIndex(responseSalvaDocumento.getIdDocumento());
        }
    }
    cnmTAllegato.setCnmDTipoAllegato(cnmDTipoAllegato);
    cnmTAllegato.setDataOraInsert(now);
    cnmTAllegato.setNomeFile(filename);
    cnmTAllegato.setCnmTUser2(cnmTUser);
    cnmTAllegato = cnmTAllegatoRepository.save(cnmTAllegato);
    if (configAllegato == null || configAllegato.isEmpty())
        return cnmTAllegato;
    List<CnmTAllegatoField> cnmTAllegatoFieldList = new ArrayList<>();
    for (AllegatoFieldVO c : configAllegato) {
        CnmTAllegatoField cnmTAllegatoField = new CnmTAllegatoField();
        cnmTAllegatoField.setCnmTAllegato(cnmTAllegato);
        cnmTAllegatoField.setCnmTUser2(cnmTUser);
        cnmTAllegatoField.setDataOraInsert(now);
        Long idField = c.getIdField();
        if (idField == null)
            throw new IllegalArgumentException(""Errore field type non valorizzato"");
        CnmCField cnmCField = cnmCFieldRepository.findOne(idField);
        cnmTAllegatoField.setCnmCField(cnmCField);
        Long idFieldType = cnmCField.getCnmCFieldType().getIdFieldType();
        if (idFieldType == Constants.FIELD_TYPE_BOOLEAN) {
            cnmTAllegatoField.setValoreBoolean(c.getBooleanValue());
        }
        if (idFieldType == Constants.FIELD_TYPE_NUMERIC || idFieldType == Constants.FIELD_TYPE_ELENCO) {
            cnmTAllegatoField.setValoreNumber(c.getNumberValue());
        }
        if (idFieldType == Constants.FIELD_TYPE_STRING) {
            cnmTAllegatoField.setValoreString(c.getStringValue());
        }
        if (idFieldType == Constants.FIELD_TYPE_DATA_ORA) {
            cnmTAllegatoField.setValoreDataOra(utilsDate.asTimeStamp(c.getDateTimeValue()));
        }
        if (idFieldType == Constants.FIELD_TYPE_DATA) {
            cnmTAllegatoField.setValoreData(utilsDate.asDate(c.getDateValue()));
        }
        if (idFieldType == Constants.FIELD_TYPE_ELENCO_SOGGETTI) {
            if (c.getNumberValue() != null) {
                cnmTAllegatoField.setValoreNumber(c.getNumberValue());
            }
        }
        cnmTAllegatoFieldList.add(cnmTAllegatoField);
    }
    if (!cnmTAllegatoFieldList.isEmpty())
        cnmTAllegatoFieldRepository.save(cnmTAllegatoFieldList);
    return cnmTAllegato;
}",java:S100,
"public static long MurmurHash3_x64_64_direct(MemoryAccessor mem, long base, int offset, int len){
    return MurmurHash3_x64_64(mem.isBigEndian() ? NARROW_DIRECT_LOADER : WIDE_DIRECT_LOADER, mem, base + offset, len, DEFAULT_MURMUR_SEED);
}",java:S100,
"public void setEnable_duplicate_check(Integer enable_duplicate_check){
    this.enable_duplicate_check = enable_duplicate_check;
}",java:S100,
"@Nullable
public static Geometry ST_Force2D(Geometry geometry){
    Function<Coordinate, Coordinate> transform = coordinate -> new Coordinate(coordinate.getX(), coordinate.getY());
    CoordinateTransformer transformer = new CoordinateTransformer(transform);
    return transformer.transform(geometry);
}",java:S100,
"@Nullable
public static Geometry ST_LongestLine(Geometry geom1, Geometry geom2){
    double maxDistance = Double.MIN_VALUE;
    Coordinate c1 = null;
    Coordinate c2 = null;
    for (Coordinate coordinate1 : geom1.getCoordinates()) {
        for (Coordinate coordinate2 : geom2.getCoordinates()) {
            double distance = coordinate1.distance(coordinate2);
            if (distance > maxDistance) {
                maxDistance = distance;
                c1 = coordinate1;
                c2 = coordinate2;
            }
        }
    }
    if (c1 == null || c2 == null) {
        return null;
    }
    return GEOMETRY_FACTORY.createLineString(new Coordinate[] { c1, c2 });
}",java:S100,
"public static int ST_GeometryTypeCode(Geometry geom){
    return SpatialType.fromGeometry(geom).code();
}",java:S100,
" void _onBeforeOpCodeExecuted(ScriptChunk chunk, boolean willExecute){
    onBeforeOpCodeExecuted(willExecute);
}",java:S100,
"public static Geometry ST_PointOnSurface(Geometry geom){
    return geom.getFactory().createPoint(InteriorPoint.getInteriorPoint(geom));
}",java:S100,
"public static boolean ST_ContainsProperly(Geometry geom1, Geometry geom2){
    return geom1.contains(geom2) && !geom1.crosses(geom2);
}",java:S100,
"private boolean accept_(RexNode e, List<RexNode> newTerms){
    switch(e.getKind()) {
        case LESS_THAN:
        case LESS_THAN_OR_EQUAL:
        case GREATER_THAN:
        case GREATER_THAN_OR_EQUAL:
        case EQUALS:
        case NOT_EQUALS:
        case SEARCH:
            return accept2(((RexCall) e).operands.get(0), ((RexCall) e).operands.get(1), e.getKind(), newTerms);
        case IS_NULL:
        case IS_NOT_NULL:
            final RexNode arg = ((RexCall) e).operands.get(0);
            return accept1(arg, e.getKind(), newTerms);
        default:
            return false;
    }
}",java:S100,
"private static Enumerable<TSource> semiEquiJoin_(final Enumerable<TSource> outer, final Enumerable<TInner> inner, final Function1<TSource, TKey> outerKeySelector, final Function1<TInner, TKey> innerKeySelector, @Nullable final EqualityComparer<TKey> comparer, final boolean anti){
    return new AbstractEnumerable<TSource>() {

        @Override
        public Enumerator<TSource> enumerator() {
            final Supplier<Enumerable<TKey>> innerLookup = Suppliers.memoize(() -> comparer == null ? inner.select(innerKeySelector).distinct() : inner.select(innerKeySelector).distinct(comparer));
            final Predicate1<TSource> predicate = anti ? v0 -> !innerLookup.get().contains(outerKeySelector.apply(v0)) : v0 -> innerLookup.get().contains(outerKeySelector.apply(v0));
            return EnumerableDefaults.where(outer.enumerator(), predicate);
        }
    };
}",java:S100,
"public void AbortTransaction(){
    mapValues.abortDatabaseBatchWrite();
}",java:S100,
"public long getDefaultValueAs_long(){
    try {
        return initExpr == null ? 0L : Long.parseLong(initExpr);
    } catch (NumberFormatException nfe) {
        return StringUtils.isEmpty(initExpr) ? 0L : CoreComponentsBuilder.get().getMVELExecutor().eval(initExpr, Long.class);
    }
}",java:S100,
"@Nullable
public static Double ST_Perimeter(Geometry geom){
    double perimeter = 0;
    for (int i = 0; i < geom.getNumGeometries(); i++) {
        Geometry geometry = geom.getGeometryN(i);
        if (geometry instanceof Polygon) {
            perimeter += geometry.getLength();
        }
    }
    return perimeter;
}",java:S100,
"public static StatefulHash murmur3_128(int seed){
    return Hashes.createStateful(new MurmurHash3Parameters(MurmurHash3Variant.X64_128, seed));
}",java:S100,
"private String _next(){
    if (q == -2)
        return null;
    q = x.indexOf(delimiter, p);
    if (q > -1) {
        final int p0 = p;
        p = q + dlen;
        return x.substring(p0, q);
    }
    q = -2;
    return x.substring(p, x.length());
}",java:S100,
"@Nullable
public static Geometry ST_MPolyFromText(String wkt){
    Geometry geometry = ST_GeomFromWKT(wkt);
    return geometry instanceof MultiPolygon ? geometry : null;
}",java:S100,
"public static Geometry ST_RemoveRepeatedPoints(Geometry geom, BigDecimal tolerance){
    return new RemoveRepeatedPointsTransformer(tolerance.doubleValue()).transform(geom);
}",java:S100,
"public static FeeMarketException MissingBaseFeeFromBlockHeader(){
    return new FeeMarketException(""Invalid block header: basefee should be specified"");
}",java:S100,
"@Nullable
public static Geometry ST_ClosestPoint(Geometry geom1, Geometry geom2){
    return GEOMETRY_FACTORY.createPoint(DistanceOp.nearestPoints(geom1, geom2)[0]);
}",java:S100,
"public static ArchRule every_DomainService_must_also_be_annotated_with_DomainServiceLayout(){
    return classes().that().areAnnotatedWith(DomainService.class).should().beAnnotatedWith(DomainServiceLayout.class);
}",java:S100,
"public static int MurmurHash3_x86_32_direct(long base, int offset, int len){
    return MurmurHash3_x86_32_direct(MEM, base, offset, len);
}",java:S100,
"private static void _copy(@NonNull final ValueType valueType, @NonNull final ValueDto src, @NonNull final ValueDto dst){
    switch(valueType) {
        case BIG_DECIMAL:
            dst.setBigDecimal(src.getBigDecimal());
            break;
        case BIG_INTEGER:
            dst.setBigInteger(src.getBigInteger());
            break;
        case BLOB:
            dst.setBlob(src.getBlob());
            break;
        case BOOLEAN:
            dst.setBoolean(src.isBoolean());
            break;
        case BYTE:
            dst.setByte(src.getByte());
            break;
        case CHAR:
            dst.setChar(src.getChar());
            break;
        case CLOB:
            dst.setClob(src.getClob());
            break;
        case COLLECTION:
            dst.setCollection(src.getCollection());
            break;
        case COMPOSITE:
            dst.setComposite(src.getComposite());
            break;
        case DOUBLE:
            dst.setDouble(src.getDouble());
            break;
        case ENUM:
            dst.setEnum(src.getEnum());
            break;
        case FLOAT:
            dst.setFloat(src.getFloat());
            break;
        case INT:
            dst.setInt(src.getInt());
            break;
        case LOCAL_DATE:
            dst.setLocalDate(src.getLocalDate());
            break;
        case LOCAL_DATE_TIME:
            dst.setLocalDateTime(src.getLocalDateTime());
            break;
        case LOCAL_TIME:
            dst.setLocalTime(src.getLocalTime());
            break;
        case LONG:
            dst.setLong(src.getLong());
            break;
        case OFFSET_DATE_TIME:
            dst.setOffsetDateTime(src.getOffsetDateTime());
            break;
        case OFFSET_TIME:
            dst.setOffsetTime(src.getOffsetTime());
            break;
        case REFERENCE:
            dst.setReference(src.getReference());
            break;
        case SHORT:
            dst.setShort(src.getShort());
            break;
        case STRING:
            dst.setString(src.getString());
            break;
        case VOID:
            break;
        case ZONED_DATE_TIME:
            dst.setZonedDateTime(src.getZonedDateTime());
            break;
        default:
            throw _Exceptions.unmatchedCase(valueType);
    }
}",java:S100,
"private void parse_header() throws IOException{
    int t = in.read();
    if (t < 0)
        throw new EOFException(""Failed to read magic number"");
    int magic = (t & 0xff) << 8;
    t = in.read();
    if (t < 0)
        throw new EOFException(""Failed to read magic number"");
    magic += t & 0xff;
    if (magic != LZW_MAGIC)
        throw new IOException(""Input not in compress format (read "" + ""magic number 0x"" + Integer.toHexString(magic) + "")"");
    int header = in.read();
    if (header < 0)
        throw new EOFException(""Failed to read header"");
    block_mode = (header & HDR_BLOCK_MODE) > 0;
    maxbits = header & HDR_MAXBITS;
    if (maxbits > MAX_BITS)
        throw new IOException(""Stream compressed with "" + maxbits + "" bits, but can only handle "" + MAX_BITS + "" bits"");
    if ((header & HDR_EXTENDED) > 0)
        throw new IOException(""Header extension bit set"");
    if ((header & HDR_FREE) > 0)
        throw new IOException(""Header bit 6 set"");
    logger.debug(""block mode: {}"", block_mode);
    logger.debug(""max bits:   {}"", maxbits);
    maxmaxcode = 1 << maxbits;
    n_bits = INIT_BITS;
    maxcode = (1 << n_bits) - 1;
    bitmask = maxcode;
    oldcode = -1;
    finchar = 0;
    free_ent = block_mode ? TBL_FIRST : 256;
    tab_prefix = new int[1 << maxbits];
    tab_suffix = new byte[1 << maxbits];
    stack = new byte[1 << maxbits];
    stackp = stack.length;
    for (int idx = 255; idx >= 0; idx--) tab_suffix[idx] = (byte) idx;
}",java:S100,
"private byte[] downloadAllegatoById_Stadoc(Integer id){
    if (id == null)
        throw new IllegalArgumentException(""id non valorizzato"");
    CnmTAllegato cnmTAllegato = cnmTAllegatoRepository.findOne(id);
    cnmTAllegato = validateRequestAllegato(cnmTAllegato);
    if (cnmTAllegato.getIdIndex() != null) {
        ResponseRicercaAllegato response = stadocServiceFacade.recuperaDocumentoIndex(cnmTAllegato.getIdIndex());
        if (response != null && response.getDocumento() != null && response.getDocumento().getFile() != null)
            return response.getDocumento().getFile();
        else
            throw new RuntimeException(""documento non trovato su index"");
    } else if (cnmTAllegato.getIdActa() != null) {
        ResponseRicercaDocumento response = stadocServiceFacade.recuperaDocumentoActa(cnmTAllegato.getIdActa());
        if (response != null && response.getDocumento() != null && response.getDocumento().getFile() != null)
            if (Constants.DOCUMENTI_CREATI_DA_CONAM.contains(cnmTAllegato.getCnmDTipoAllegato().getIdTipoAllegato()))
                return addProtocolloToDocument(response.getDocumento().getFile(), cnmTAllegato.getNumeroProtocollo(), cnmTAllegato.getCnmDTipoAllegato().getIdTipoAllegato());
            else
                return response.getDocumento().getFile();
        else
            throw new RuntimeException(""documento non trovato su acta"");
    } else
        throw new RuntimeException(""idIndex e Acta  non valorizzati"");
}",java:S100,
"public static Geometry ST_MakeValid(Geometry geometry){
    return new GeometryFixer(geometry).getResult();
}",java:S100,
"private static RexNode case_(RexBuilder rexBuilder, RexNode... args){
    return rexBuilder.makeCall(SqlStdOperatorTable.CASE, args);
}",java:S100,
"@Nullable
public static Double ST_XMin(Geometry geom){
    return geom.getEnvelopeInternal().getMinX();
}",java:S100,
"public double getDefaultValueAs_double(){
    try {
        return initExpr == null ? 0.0 : Double.parseDouble(initExpr);
    } catch (NumberFormatException nfe) {
        return StringUtils.isEmpty(initExpr) ? 0.0 : CoreComponentsBuilder.get().getMVELExecutor().eval(initExpr, Double.class);
    }
}",java:S100,
"private static void ST_MakeGrid(final Geometry geom, final BigDecimal deltaX, final BigDecimal deltaY){
}",java:S100,
"public static List<Class<?>> analyzeClasses_packagesOf(final Class<?> clazz){
    val analyzeClassesAnnot = AnnotationUtils.findAnnotation(clazz, AnalyzeClasses.class);
    return Arrays.stream(analyzeClassesAnnot.packagesOf()).filter(x -> x.getSimpleName().endsWith(""Module"")).collect(Collectors.toList());
}",java:S100,
"public static Architectures.LayeredArchitecture code_dependencies_follow_module_Imports_and_subpackage_rules(final List<Class<?>> moduleClasses, final List<Subpackage> subpackages){
    val layeredArchitecture = Architectures.layeredArchitecture().consideringAllDependencies();
    defineLayers(moduleClasses, layeredArchitecture, subpackages);
    val directDependenciesByImported = new HashMap<Class<?>, Set<Class<?>>>();
    val directDependenciesByImporting = new HashMap<Class<?>, Set<Class<?>>>();
    computeDirectDependencies(moduleClasses, directDependenciesByImported, directDependenciesByImporting);
    val transitiveDependenciesByImporting = new HashMap<Class<?>, Set<Class<?>>>();
    computeTransitiveDependencies(moduleClasses, directDependenciesByImporting, transitiveDependenciesByImporting);
    val transitiveDependenciesByImported = invert(transitiveDependenciesByImporting);
    checkLayerAccess(layeredArchitecture, transitiveDependenciesByImported, subpackages);
    val importingClassesNotImported = new LinkedHashSet<>(transitiveDependenciesByImporting.keySet());
    importingClassesNotImported.removeAll(transitiveDependenciesByImported.keySet());
    return layeredArchitecture;
}",java:S100,
"public static long CONST(final long v){
    return v;
}",java:S100,
"private static String revertEscapingPercent_n(String value){
    return value == null ? null : value.replace(""%%n"", ""%n"");
}",java:S100,
"public static double IEEEremainder(final double dividend, final double divisor){
    if (getExponent(dividend) == 1024 || getExponent(divisor) == 1024 || divisor == 0.0) {
        if (Double.isInfinite(divisor) && !Double.isInfinite(dividend)) {
            return dividend;
        } else {
            return Double.NaN;
        }
    } else {
        final double n = AccurateMath.rint(dividend / divisor);
        final double remainder = Double.isInfinite(n) ? 0.0 : dividend - divisor * n;
        return (remainder == 0) ? AccurateMath.copySign(remainder, dividend) : remainder;
    }
}",java:S100,
"public static ArchRule every_jdo_PersistenceCapable_must_have_schema(){
    return classes().that().areAnnotatedWith(PersistenceCapable.class).should().beAnnotatedWith(PersistenceCapable_schema());
}",java:S100,
"public boolean have_class_flags_hi(){
    return have_class_flags_hi;
}",java:S100,
"@Nullable
public static Geometry ST_MakePolygon(Geometry shell, Geometry hole0){
    return makePolygon(shell, hole0);
}",java:S100,
"public boolean have_method_flags_hi(){
    return have_method_flags_hi;
}",java:S100,
" static DescribedPredicate<JavaAnnotation<?>> DomainObject_nature_VIEW_MODEL(){
    return DomainObject_nature(Nature.VIEW_MODEL);
}",java:S100,
"public static float CONST(final float v){
    return v;
}",java:S100,
"public static String ST_Relate(Geometry geom1, Geometry geom2){
    return geom1.relate(geom2).toString();
}",java:S100,
"public static Geometry ST_SetSRID(Geometry geom, int srid){
    geom.setSRID(srid);
    return geom;
}",java:S100,
"private static Enumerable<TResult> hashJoinWithPredicate_(final Enumerable<TSource> outer, final Enumerable<TInner> inner, final Function1<TSource, TKey> outerKeySelector, final Function1<TInner, TKey> innerKeySelector, final Function2<TSource, TInner, TResult> resultSelector, @Nullable final EqualityComparer<TKey> comparer, final boolean generateNullsOnLeft, final boolean generateNullsOnRight, final Predicate2<TSource, TInner> predicate){
    return new AbstractEnumerable<TResult>() {

        @Override
        public Enumerator<TResult> enumerator() {
            final Enumerable<TInner> innerToLookUp = generateNullsOnLeft ? Linq4j.asEnumerable(inner.toList()) : inner;
            final Lookup<TKey, TInner> innerLookup = comparer == null ? innerToLookUp.toLookup(innerKeySelector) : innerToLookUp.toLookup(innerKeySelector, comparer);
            return new Enumerator<TResult>() {

                Enumerator<TSource> outers = outer.enumerator();

                Enumerator<TInner> inners = Linq4j.emptyEnumerator();

                @Nullable
                List<TInner> innersUnmatched = generateNullsOnLeft ? new ArrayList<>(innerToLookUp.toList()) : null;

                @Override
                public TResult current() {
                    return resultSelector.apply(outers.current(), inners.current());
                }

                @Override
                public boolean moveNext() {
                    for (; ; ) {
                        if (inners.moveNext()) {
                            return true;
                        }
                        if (!outers.moveNext()) {
                            if (innersUnmatched != null) {
                                inners = Linq4j.enumerator(innersUnmatched);
                                outers.close();
                                outers = Linq4j.singletonNullEnumerator();
                                outers.moveNext();
                                innersUnmatched = null;
                                continue;
                            }
                            return false;
                        }
                        final TSource outer = outers.current();
                        Enumerable<TInner> innerEnumerable;
                        if (outer == null) {
                            innerEnumerable = null;
                        } else {
                            final TKey outerKey = outerKeySelector.apply(outer);
                            if (outerKey == null) {
                                innerEnumerable = null;
                            } else {
                                innerEnumerable = innerLookup.get(outerKey);
                                if (innerEnumerable != null) {
                                    final List<TInner> matchedInners = new ArrayList<>();
                                    try (Enumerator<TInner> innerEnumerator = innerEnumerable.enumerator()) {
                                        while (innerEnumerator.moveNext()) {
                                            final TInner inner = innerEnumerator.current();
                                            if (predicate.apply(outer, inner)) {
                                                matchedInners.add(inner);
                                            }
                                        }
                                    }
                                    innerEnumerable = Linq4j.asEnumerable(matchedInners);
                                    if (innersUnmatched != null) {
                                        innersUnmatched.removeAll(matchedInners);
                                    }
                                }
                            }
                        }
                        if (innerEnumerable == null || !innerEnumerable.any()) {
                            if (generateNullsOnRight) {
                                inners = Linq4j.singletonNullEnumerator();
                            } else {
                                inners = Linq4j.emptyEnumerator();
                            }
                        } else {
                            inners = innerEnumerable.enumerator();
                        }
                    }
                }

                @Override
                public void reset() {
                    outers.reset();
                }

                @Override
                public void close() {
                    outers.close();
                }
            };
        }
    };
}",java:S100,
"public boolean process_stage2(CliSessionState ss){
    ss.getConf();
    if (commandLine.hasOption('H')) {
        printUsage();
        return false;
    }
    ss.setIsSilent(commandLine.hasOption('S'));
    ss.database = commandLine.getOptionValue(""database"");
    ss.execString = commandLine.getOptionValue('e');
    ss.fileName = commandLine.getOptionValue('f');
    ss.setIsVerbose(commandLine.hasOption('v'));
    String[] initFiles = commandLine.getOptionValues('i');
    if (null != initFiles) {
        ss.initFiles = Arrays.asList(initFiles);
    }
    if (ss.execString != null && ss.fileName != null) {
        System.err.println(""The '-e' and '-f' options cannot be specified simultaneously"");
        printUsage();
        return false;
    }
    if (commandLine.hasOption(""hiveconf"")) {
        Properties confProps = commandLine.getOptionProperties(""hiveconf"");
        for (String propKey : confProps.stringPropertyNames()) {
            ss.cmdProperties.setProperty(propKey, confProps.getProperty(propKey));
        }
    }
    return true;
}",java:S100,
"public static Junction make_3_junction(int basepoint, int p1, int p2, int p3){
    int shaft, barb1, barb2;
    double angle12, angle13, angle23;
    double sum, sum1213, sum1223, sum1323;
    double delta;
    String j_type;
    angle12 = inscribed_angle(basepoint, p1, p2);
    angle13 = inscribed_angle(basepoint, p1, p3);
    angle23 = inscribed_angle(basepoint, p2, p3);
    sum1213 = angle12 + angle13;
    sum1223 = angle12 + angle23;
    sum1323 = angle13 + angle23;
    if (sum1213 < sum1223) {
        if (sum1213 < sum1323) {
            sum = sum1213;
            shaft = p1;
            barb1 = p2;
            barb2 = p3;
        } else {
            sum = sum1323;
            shaft = p3;
            barb1 = p1;
            barb2 = p2;
        }
    } else {
        if (sum1223 < sum1323) {
            sum = sum1223;
            shaft = p2;
            barb1 = p1;
            barb2 = p3;
        } else {
            sum = sum1323;
            shaft = p3;
            barb1 = p1;
            barb2 = p2;
        }
    }
    delta = sum - PI;
    if (delta < 0.0)
        delta = -delta;
    if (delta < 0.001) {
        j_type = Junction.TEE;
    } else if (sum > PI) {
        j_type = Junction.FORK;
    } else {
        j_type = Junction.ARROW;
    }
    return new Junction(barb1, shaft, barb2, basepoint, j_type);
}",java:S100,
"public static long MurmurHash3_fmix(long k){
    k ^= k >>> 33;
    k *= 0xff51afd7ed558ccdL;
    k ^= k >>> 33;
    k *= 0xc4ceb9fe1a85ec53L;
    k ^= k >>> 33;
    return k;
}",java:S100,
"public void setHave_code_flags_hi(final boolean have_code_flags_hi){
    this.have_code_flags_hi = have_code_flags_hi;
}",java:S100,
"public static GotoStatement continue_(LabelTarget labelTarget, Type type){
    throw Extensions.todo();
}",java:S100,
"private static byte[] F(String P, String S, int c, int i) throws Exception{
    byte[] U_LAST = null;
    byte[] U_XOR = null;
    SecretKeySpec key = new SecretKeySpec(P.getBytes(""UTF-8""), ""HmacSHA512"");
    Mac mac = Mac.getInstance(key.getAlgorithm());
    mac.init(key);
    for (int j = 0; j < c; j++) {
        if (j == 0) {
            byte[] baS = S.getBytes(""UTF-8"");
            byte[] baI = INT(i);
            byte[] baU = new byte[baS.length + baI.length];
            System.arraycopy(baS, 0, baU, 0, baS.length);
            System.arraycopy(baI, 0, baU, baS.length, baI.length);
            U_XOR = mac.doFinal(baU);
            U_LAST = U_XOR;
            mac.reset();
        } else {
            byte[] baU = mac.doFinal(U_LAST);
            mac.reset();
            for (int k = 0; k < U_XOR.length; k++) {
                U_XOR[k] = (byte) (U_XOR[k] ^ baU[k]);
            }
            U_LAST = baU;
        }
    }
    return U_XOR;
}",java:S100,
"public static short CONST_SHORT(final int v){
    if (v < Short.MIN_VALUE || v > Short.MAX_VALUE) {
        throw new IllegalArgumentException(""Supplied value must be a valid byte literal between -32768 and 32767: ["" + v + ""]"");
    }
    return (short) v;
}",java:S100,
"private static String _join(final String[] record, final String separator){
    if (record == null || record.length == 0) {
        return """";
    }
    final StringBuilder sb = new StringBuilder();
    for (int i = 0; i < record.length; i++) {
        if (i > 0) {
            sb.append(separator);
        }
        sb.append(record[i]);
    }
    return sb.toString();
}",java:S100,
"private void resolve_(final CalciteSchema rootSchema, List<String> names, List<String> schemaNames, SqlNameMatcher nameMatcher, Path path, Resolved resolved){
    final List<String> concat = ImmutableList.<String>builder().addAll(schemaNames).addAll(names).build();
    CalciteSchema schema = rootSchema;
    SqlValidatorNamespace namespace = null;
    List<String> remainingNames = concat;
    for (String schemaName : concat) {
        if (schema == rootSchema && nameMatcher.matches(schemaName, schema.name)) {
            remainingNames = Util.skip(remainingNames);
            continue;
        }
        final CalciteSchema subSchema = schema.getSubSchema(schemaName, nameMatcher.isCaseSensitive());
        if (subSchema != null) {
            path = path.plus(null, -1, subSchema.name, StructKind.NONE);
            remainingNames = Util.skip(remainingNames);
            schema = subSchema;
            namespace = new SchemaNamespace(validator, path.stepNames());
            continue;
        }
        CalciteSchema.TableEntry entry = schema.getTable(schemaName, nameMatcher.isCaseSensitive());
        if (entry == null) {
            entry = schema.getTableBasedOnNullaryFunction(schemaName, nameMatcher.isCaseSensitive());
        }
        if (entry != null) {
            path = path.plus(null, -1, entry.name, StructKind.NONE);
            remainingNames = Util.skip(remainingNames);
            final Table table = entry.getTable();
            SqlValidatorTable table2 = null;
            if (table instanceof Wrapper) {
                table2 = ((Wrapper) table).unwrap(Prepare.PreparingTable.class);
            }
            if (table2 == null) {
                final RelOptSchema relOptSchema = validator.catalogReader.unwrap(RelOptSchema.class);
                final RelDataType rowType = table.getRowType(validator.typeFactory);
                table2 = RelOptTableImpl.create(relOptSchema, rowType, entry, null);
            }
            namespace = new TableNamespace(validator, table2);
            resolved.found(namespace, false, this, path, remainingNames);
            return;
        }
        if (namespace != null && !remainingNames.equals(names)) {
            resolved.found(namespace, false, this, path, remainingNames);
        }
        return;
    }
}",java:S100,
"public static WhileStatement while_(Expression condition, Statement body){
    return new WhileStatement(condition, body);
}",java:S100,
"public static Geometry ST_Reverse(Geometry geom){
    return geom.reverse();
}",java:S100,
"public static NewExpression new_(Type type, Iterable<? extends Expression> arguments){
    return new NewExpression(type, toList(arguments), null);
}",java:S100,
"public T2 get_2(){
    return _2;
}",java:S100,
"private PrincipalForApplicationUser getPrincipal_fromAlreadyAuthenticatedSubjectIfApplicable(final AuthenticationToken token){
    if (!ShiroUtils.isSingleRealm()) {
        return null;
    }
    val currentSubject = SecurityUtils.getSubject();
    if (currentSubject != null && currentSubject.isAuthenticated()) {
        val authenticatedPrincipalObject = currentSubject.getPrincipal();
        if (authenticatedPrincipalObject instanceof PrincipalForApplicationUser) {
            val authenticatedPrincipal = (PrincipalForApplicationUser) authenticatedPrincipalObject;
            val authenticatedUsername = authenticatedPrincipal.getUsername();
            val usernamePasswordToken = (UsernamePasswordToken) token;
            val username = usernamePasswordToken.getUsername();
            val isAuthenticatedWithThisRealm = username.equals(authenticatedUsername);
            if (isAuthenticatedWithThisRealm) {
                return authenticatedPrincipal;
            }
        }
    }
    return null;
}",java:S100,
"private String _wrap_location(String location){
    int length = MAX_WIDTH - QUALIFIER_INDENT;
    if (location.length() <= length) {
        return location;
    }
    int index = location.substring(0, length).lastIndexOf("","");
    if (-1 == index) {
        return location;
    }
    return location.substring(0, index + 1) + lineSep + QUALIFIER_INDENT_STR + _wrap_location(location.substring(index + 1));
}",java:S100,
"public boolean have_file_options(){
    return have_file_options;
}",java:S100,
"private static int MurmurHash3_x86_32(LoadStrategy<R> loader, R resource, long offset, int len, int seed){
    final long tailStart = offset + (len & ~(MURMUR32_BLOCK_SIZE - 1));
    int c1 = 0xcc9e2d51;
    int c2 = 0x1b873593;
    int h1 = seed;
    for (long blockAddr = offset; blockAddr < tailStart; blockAddr += MURMUR32_BLOCK_SIZE) {
        int k1 = loader.getInt(resource, blockAddr);
        k1 *= c1;
        k1 = (k1 << 15) | (k1 >>> 17);
        k1 *= c2;
        h1 ^= k1;
        h1 = (h1 << 13) | (h1 >>> 19);
        h1 = h1 * 5 + 0xe6546b64;
    }
    int k1 = 0;
    switch(len & 0x03) {
        case 3:
            k1 = (loader.getByte(resource, tailStart + 2) & 0xff) << 16;
        case 2:
            k1 |= (loader.getByte(resource, tailStart + 1) & 0xff) << 8;
        case 1:
            k1 |= loader.getByte(resource, tailStart) & 0xff;
            k1 *= c1;
            k1 = (k1 << 15) | (k1 >>> 17);
            k1 *= c2;
            h1 ^= k1;
        default:
    }
    h1 ^= len;
    h1 = MurmurHash3_fmix(h1);
    return h1;
}",java:S100,
"@Nullable
public static Geometry ST_ToMultiPoint(Geometry geom){
    CoordinateSequence coordinateSequence = GEOMETRY_FACTORY.getCoordinateSequenceFactory().create(geom.getCoordinates());
    return GEOMETRY_FACTORY.createMultiPoint(coordinateSequence);
}",java:S100,
"public int getDefaultValueAs_int(){
    try {
        return initExpr == null ? 0 : Integer.parseInt(initExpr);
    } catch (NumberFormatException nfe) {
        return StringUtils.isEmpty(initExpr) ? 0 : CoreComponentsBuilder.get().getMVELExecutor().eval(initExpr, Integer.class);
    }
}",java:S100,
"@Nullable
public static Geometry ST_GeomFromGML(String gml, int srid){
    Geometry geometry = fromGml(gml);
    geometry.setSRID(srid);
    return geometry;
}",java:S100,
"private String _write_single_line(String tag, String text){
    assert tag.length() < HEADER_WIDTH;
    return StringManipulationHelper.padRight(tag, HEADER_WIDTH) + text.replace('\n', ' ') + lineSep;
}",java:S100,
"@Nullable
public static Geometry ST_InteriorRing(Geometry geom, int n){
    if (geom instanceof Polygon) {
        return ((Polygon) geom).getInteriorRingN(n);
    }
    return null;
}",java:S100,
"public ComplexSearchQueryBuilder DOI(String doi){
    if (Objects.requireNonNull(doi).isBlank()) {
        throw new IllegalArgumentException(""Parameter must not be blank"");
    }
    this.doi = doi.replace(""\"""", """");
    return this;
}",java:S100,
"public static GotoStatement return_(LabelTarget labelTarget, Expression expression, Type type){
    throw Extensions.todo();
}",java:S100,
"public static BigInteger ComputeTarget(BigInteger firstChainWork, long firstTime, int firstHeight, BigInteger lastChainWork, long lastTime, int lastHeight){
    Preconditions.checkState(lastHeight > firstHeight);
    BigInteger work = lastChainWork.subtract(firstChainWork);
    work = work.multiply(BigInteger.valueOf(NetworkParameters.TARGET_SPACING));
    Preconditions.checkState(lastTime > firstTime);
    long nActualTimespan = lastTime - firstTime;
    if (nActualTimespan > 288 * NetworkParameters.TARGET_SPACING) {
        nActualTimespan = 288 * NetworkParameters.TARGET_SPACING;
    } else if (nActualTimespan < 72 * NetworkParameters.TARGET_SPACING) {
        nActualTimespan = 72 * NetworkParameters.TARGET_SPACING;
    }
    work = work.divide(BigInteger.valueOf(nActualTimespan));
    return LARGEST_HASH.divide(work).subtract(BigInteger.ONE);
}",java:S100,
"public static long MurmurHash3_x64_64_direct(long base, int offset, int len){
    return MurmurHash3_x64_64_direct(MEM, base, offset, len);
}",java:S100,
"public static boolean ST_Is3D(Geometry geom){
    return ST_CoordDim(geom) == 3;
}",java:S100,
"public void setCp_Utf8_count(final int count){
    cp_Utf8_count = count;
}",java:S100,
"public static T MIN_GENERIC(T a, T b, Comparator<T> f){
    return f.compare(a, b) < 0 ? a : b;
}",java:S100,
"private void _closeTag(){
    isOpeningTag = false;
    afterNewline = true;
    List<String> hereBindings = namespaceBindings.removeLast();
    if (hereBindings != null) {
        for (Iterator<String> bi = hereBindings.iterator(); bi.hasNext(); ) {
            namespacePrefixes.remove(bi.next());
        }
    }
}",java:S100,
" static DescribedPredicate<JavaAnnotation<?>> PersistenceCapable_schema(){
    return new DescribedPredicate<>(""@PersistenceCapable(schema=...)"") {

        @Override
        public boolean test(final JavaAnnotation<?> javaAnnotation) {
            if (!javaAnnotation.getRawType().isAssignableTo(PersistenceCapable.class)) {
                return false;
            }
            val properties = javaAnnotation.getProperties();
            val schema = properties.get(""schema"");
            return schema instanceof String && ((String) schema).length() > 0;
        }
    };
}",java:S100,
"public static Geometry ST_Buffer(Geometry geom, double distance){
    return geom.buffer(distance);
}",java:S100,
"private String _write_comment(S sequence){
    ArrayList<String> comments = sequence.getNotesList();
    String output = _write_multi_line(""COMMENT"", comments.remove(0));
    for (String comment : comments) {
        output += _write_multi_line("""", comment);
    }
    return output;
}",java:S100,
"@Nullable
public static Geometry ST_PointFromWKB(ByteString wkb){
    Geometry geometry = ST_GeomFromWKB(wkb);
    return geometry instanceof Point ? geometry : null;
}",java:S100,
"private LiteBlock GetMostSuitableBlock(LiteBlock pindex, BlockStore<LiteBlock> blockStore) throws BlockStoreException{
    LiteBlock[] blocks = new LiteBlock[3];
    blocks[2] = pindex;
    blocks[1] = blockStore.getPrev(pindex);
    if (blocks[1] == null)
        throw new BlockStoreException(""Not enough blocks in blockStore to calculate difficulty"");
    blocks[0] = blockStore.getPrev(blocks[1]);
    if (blocks[0] == null)
        throw new BlockStoreException(""Not enough blocks in blockStore to calculate difficulty"");
    if (blocks[0].getHeader().getTime() > blocks[2].getHeader().getTime()) {
        LiteBlock temp = blocks[0];
        blocks[0] = blocks[2];
        blocks[2] = temp;
    }
    if (blocks[0].getHeader().getTime() > blocks[1].getHeader().getTime()) {
        LiteBlock temp = blocks[0];
        blocks[0] = blocks[1];
        blocks[1] = temp;
    }
    if (blocks[1].getHeader().getTime() > blocks[2].getHeader().getTime()) {
        LiteBlock temp = blocks[1];
        blocks[1] = blocks[2];
        blocks[2] = temp;
    }
    return blocks[1];
}",java:S100,
"public static ArchRule every_injected_field_of_serializable_view_model_must_be_transient(){
    return fields().that().areDeclaredInClassesThat(areSerializableViewModels()).and().areAnnotatedWith(Inject.class).should().haveModifier(JavaModifier.TRANSIENT);
}",java:S100,
"public static int MurmurHash3_x86_32_direct(MemoryAccessor mem, long base, int offset, int len){
    return MurmurHash3_x86_32(mem.isBigEndian() ? NARROW_DIRECT_LOADER : WIDE_DIRECT_LOADER, mem, base + offset, len, DEFAULT_MURMUR_SEED);
}",java:S100,
"@Nullable
public static Geometry ST_ClosestCoordinate(Geometry point, Geometry geom){
    List<Coordinate> closestCoordinates = new ArrayList<>();
    double minDistance = Double.MAX_VALUE;
    for (Coordinate coordinate : geom.getCoordinates()) {
        double distance = point.getCoordinate().distance(coordinate);
        if (distance < minDistance) {
            minDistance = distance;
            closestCoordinates.clear();
            closestCoordinates.add(coordinate);
        } else if (distance == minDistance && !closestCoordinates.contains(coordinate)) {
            closestCoordinates.add(coordinate);
        }
    }
    if (closestCoordinates.size() == 1) {
        return GEOMETRY_FACTORY.createPoint(closestCoordinates.get(0));
    } else {
        Coordinate[] coordinates = closestCoordinates.toArray(new Coordinate[0]);
        return GEOMETRY_FACTORY.createMultiPointFromCoords(coordinates);
    }
}",java:S100,
"private StringBuilder appendDigest_(StringBuilder sb, boolean allowFraming){
    final int initialLength = sb.length();
    if (partitionKeys.size() > 0) {
        sb.append(""PARTITION BY "");
        for (int i = 0; i < partitionKeys.size(); i++) {
            if (i > 0) {
                sb.append("", "");
            }
            sb.append(partitionKeys.get(i));
        }
    }
    if (orderKeys.size() > 0) {
        sb.append(sb.length() > initialLength ? "" ORDER BY "" : ""ORDER BY "");
        for (int i = 0; i < orderKeys.size(); i++) {
            if (i > 0) {
                sb.append("", "");
            }
            sb.append(orderKeys.get(i));
        }
    }
    if (!allowFraming || orderKeys.isEmpty() || (lowerBound.isUnbounded() && lowerBound.isPreceding() && upperBound.isCurrentRow() && !isRows)) {
    } else if (upperBound.isCurrentRow()) {
        sb.append(sb.length() > initialLength ? (isRows ? "" ROWS "" : "" RANGE "") : (isRows ? ""ROWS "" : ""RANGE "")).append(lowerBound);
    } else {
        sb.append(sb.length() > initialLength ? (isRows ? "" ROWS BETWEEN "" : "" RANGE BETWEEN "") : (isRows ? ""ROWS BETWEEN "" : ""RANGE BETWEEN "")).append(lowerBound).append("" AND "").append(upperBound);
    }
    return sb;
}",java:S100,
"public static Geometry ST_AddZ(Geometry geom, BigDecimal zToAdd){
    return new AddZTransformer(zToAdd.doubleValue()).transform(geom);
}",java:S100,
"private CnmTAllegato salvaAllegato_Doqui(byte[] file, String filename, Long idTipoAllegato, List<AllegatoFieldVO> configAllegato, CnmTUser cnmTUser, TipoProtocolloAllegato tipoProtocolloAllegato, String folder, String idEntitaFruitore, boolean isMaster, boolean protocollazioneInUscita, String soggettoActa, String rootActa, int numeroAllegati, Integer idVerbaleAudizione, String tipoActa, List<CnmTSoggetto> cnmTSoggettoList){
    CnmDTipoAllegato cnmDTipoAllegato = cnmDTipoAllegatoRepository.findOne(idTipoAllegato);
    Timestamp now = utilsDate.asTimeStamp(LocalDateTime.now());
    String operationToTrace = null;
    if (cnmDTipoAllegato == null)
        throw new SecurityException(""id tipo allegato non trovato"");
    CnmTAllegato cnmTAllegato = new CnmTAllegato();
    if (idVerbaleAudizione != null && idVerbaleAudizione != 0)
        cnmTAllegato.setIdAllegato(idVerbaleAudizione);
    if (tipoProtocolloAllegato.getId() == TipoProtocolloAllegato.PROTOCOLLARE.getId()) {
        if (folder == null)
            throw new IllegalArgumentException(""folder non valorizzato"");
        CnmDStatoAllegato cnmDStatoAllegato = cnmDStatoAllegatoRepository.findOne(Constants.STATO_ALLEGATO_PROTOCOLLATO);
        ResponseProtocollaDocumento responseProtocollaDocumento = doquiServiceFacade.protocollaDocumentoFisico(folder, file, filename, idEntitaFruitore, isMaster, protocollazioneInUscita, soggettoActa, rootActa, idTipoAllegato.longValue(), tipoActa, cnmTSoggettoList, null);
        cnmTAllegato.setCnmDStatoAllegato(cnmDStatoAllegato);
        cnmTAllegato.setIdActa(responseProtocollaDocumento.getIdDocumento());
        operationToTrace = cnmTAllegato.isFlagDocumentoPregresso() ? TraceOperation.INSERIMENTO_ALLEGATO_PREGRESSO.getOperation() : TraceOperation.INSERIMENTO_ALLEGATO.getOperation();
        utilsTraceCsiLogAuditService.traceCsiLogAudit(operationToTrace, Constants.OGGETTO_ACTA, ""objectIdDocumento="" + responseProtocollaDocumento.getObjectIdDocumento(), Thread.currentThread().getStackTrace()[1].getMethodName(), cnmDTipoAllegato.getDescTipoAllegato());
        if (cnmTAllegato.getIdAllegato() != null && cnmTAllegato.getIdAllegato() > 0) {
            CnmTAllegato cnmTAllegatoSaved = cnmTAllegatoRepository.findOne(cnmTAllegato.getIdAllegato());
            if (cnmTAllegatoSaved != null && StringUtils.isNotBlank(cnmTAllegatoSaved.getIdIndex())) {
                logger.debug(""provo a eliminare da INDEX l'allegato con idIndex : "" + cnmTAllegatoSaved.getIdIndex());
                try {
                    doquiServiceFacade.eliminaDocumentoIndex(cnmTAllegatoSaved.getIdIndex());
                    utilsTraceCsiLogAuditService.traceCsiLogAudit(TraceOperation.SPOSTAMENTO_ALLEGATO_DA_INDEX.getOperation(), cnmTAllegato.getClass().getAnnotation(Table.class).name(), ""id_allegato="" + cnmTAllegato.getIdAllegato(), Thread.currentThread().getStackTrace()[1].getMethodName(), cnmTAllegato.getCnmDTipoAllegato().getDescTipoAllegato());
                } catch (Exception e) {
                    logger.error(""Non riesco ad eliminare da INDEX l'allegato con idIndex: "" + cnmTAllegatoSaved.getIdIndex());
                }
            }
        }
        cnmTAllegato.setIdIndex(null);
        cnmTAllegato.setNumeroProtocollo(responseProtocollaDocumento.getProtocollo());
        cnmTAllegato.setDataOraProtocollo(now);
    } else if (tipoProtocolloAllegato.getId() == TipoProtocolloAllegato.NON_PROTOCOLLARE.getId()) {
        CnmDStatoAllegato cnmDStatoAllegato = cnmDStatoAllegatoRepository.findOne(Constants.STATO_ALLEGATO_NON_PROTOCOLLARE);
        ResponseSalvaDocumento responseSalvaDocumento = doquiServiceFacade.salvaDocumentoIndex(cnmDTipoAllegato.getDescTipoAllegato(), file, filename, """", cnmDTipoAllegato.getIndexType());
        cnmTAllegato.setCnmDStatoAllegato(cnmDStatoAllegato);
        cnmTAllegato.setIdActa(null);
        cnmTAllegato.setIdIndex(responseSalvaDocumento.getIdDocumento());
    } else if (tipoProtocolloAllegato.getId() == TipoProtocolloAllegato.DA_PROTOCOLLARE_IN_ISTANTE_SUCCESSIVO.getId()) {
        CnmDStatoAllegato cnmDStatoAllegato = cnmDStatoAllegatoRepository.findOne(Constants.STATO_ALLEGATO_DA_PROTOCOLLARE_IN_ISTANTE_SUCCESSIVO);
        ResponseSalvaDocumento responseSalvaDocumento = doquiServiceFacade.salvaDocumentoIndex(cnmDTipoAllegato.getDescTipoAllegato(), file, filename, """", cnmDTipoAllegato.getIndexType());
        cnmTAllegato.setCnmDStatoAllegato(cnmDStatoAllegato);
        cnmTAllegato.setIdActa(null);
        cnmTAllegato.setIdIndex(responseSalvaDocumento.getIdDocumento());
    } else if (tipoProtocolloAllegato.getId() == TipoProtocolloAllegato.SALVA_MULTI_SENZA_PROTOCOLARE.getId()) {
        CnmDStatoAllegato cnmDStatoAllegato = cnmDStatoAllegatoRepository.findOne(Constants.STATO_ALLEGATO_NON_PROTOCOLLARE);
        if (isMaster) {
            ResponseArchiviaDocumento responseArchiviaDocumento = doquiServiceFacade.archiviaDocumentoFisico(file, filename, folder, rootActa, numeroAllegati, idEntitaFruitore, idTipoAllegato.longValue(), isMaster, null, null);
            cnmTAllegato.setCnmDStatoAllegato(cnmDStatoAllegato);
            cnmTAllegato.setIdActa(responseArchiviaDocumento.getIdDocumento());
            cnmTAllegato.setIdIndex(null);
            operationToTrace = cnmTAllegato.isFlagDocumentoPregresso() ? TraceOperation.INSERIMENTO_ALLEGATO_PREGRESSO.getOperation() : TraceOperation.INSERIMENTO_ALLEGATO.getOperation();
            utilsTraceCsiLogAuditService.traceCsiLogAudit(operationToTrace, Constants.OGGETTO_ACTA, ""objectIdDocumento="" + responseArchiviaDocumento.getObjectIdDocumento(), Thread.currentThread().getStackTrace()[1].getMethodName(), cnmDTipoAllegato.getDescTipoAllegato());
        } else {
            ResponseSalvaDocumento responseSalvaDocumento = doquiServiceFacade.salvaDocumentoIndex(cnmDTipoAllegato.getDescTipoAllegato(), file, filename, """", cnmDTipoAllegato.getIndexType());
            cnmTAllegato.setCnmDStatoAllegato(cnmDStatoAllegato);
            cnmTAllegato.setIdActa(null);
            cnmTAllegato.setIdIndex(responseSalvaDocumento.getIdDocumento());
        }
    }
    cnmTAllegato.setCnmDTipoAllegato(cnmDTipoAllegato);
    cnmTAllegato.setDataOraInsert(now);
    cnmTAllegato.setNomeFile(filename);
    cnmTAllegato.setCnmTUser2(cnmTUser);
    cnmTAllegato = cnmTAllegatoRepository.save(cnmTAllegato);
    operationToTrace = cnmTAllegato.isFlagDocumentoPregresso() ? TraceOperation.INSERIMENTO_ALLEGATO_PREGRESSO.getOperation() : TraceOperation.INSERIMENTO_ALLEGATO.getOperation();
    utilsTraceCsiLogAuditService.traceCsiLogAudit(operationToTrace, cnmTAllegato.getClass().getAnnotation(Table.class).name(), ""id_allegato="" + cnmTAllegato.getIdAllegato(), Thread.currentThread().getStackTrace()[1].getMethodName(), cnmDTipoAllegato.getDescTipoAllegato());
    if (configAllegato == null || configAllegato.isEmpty())
        return cnmTAllegato;
    List<CnmTAllegatoField> cnmTAllegatoFieldList = new ArrayList<>();
    for (AllegatoFieldVO c : configAllegato) {
        CnmTAllegatoField cnmTAllegatoField = new CnmTAllegatoField();
        cnmTAllegatoField.setCnmTAllegato(cnmTAllegato);
        cnmTAllegatoField.setCnmTUser2(cnmTUser);
        cnmTAllegatoField.setDataOraInsert(now);
        Long idField = c.getIdField();
        if (idField == null)
            throw new IllegalArgumentException(""Errore field type non valorizzato"");
        CnmCField cnmCField = cnmCFieldRepository.findOne(idField);
        cnmTAllegatoField.setCnmCField(cnmCField);
        Long idFieldType = cnmCField.getCnmCFieldType().getIdFieldType();
        if (idFieldType == Constants.FIELD_TYPE_BOOLEAN) {
            cnmTAllegatoField.setValoreBoolean(c.getBooleanValue());
        }
        if (idFieldType == Constants.FIELD_TYPE_NUMERIC || idFieldType == Constants.FIELD_TYPE_ELENCO) {
            cnmTAllegatoField.setValoreNumber(c.getNumberValue());
        }
        if (idFieldType == Constants.FIELD_TYPE_STRING) {
            cnmTAllegatoField.setValoreString(c.getStringValue());
        }
        if (idFieldType == Constants.FIELD_TYPE_DATA_ORA) {
            cnmTAllegatoField.setValoreDataOra(utilsDate.asTimeStamp(c.getDateTimeValue()));
        }
        if (idFieldType == Constants.FIELD_TYPE_DATA) {
            cnmTAllegatoField.setValoreData(utilsDate.asDate(c.getDateValue()));
        }
        if (idFieldType == Constants.FIELD_TYPE_ELENCO_SOGGETTI) {
            if (c.getNumberValue() != null) {
                cnmTAllegatoField.setValoreNumber(c.getNumberValue());
            }
        }
        cnmTAllegatoFieldList.add(cnmTAllegatoField);
    }
    if (!cnmTAllegatoFieldList.isEmpty())
        cnmTAllegatoFieldRepository.save(cnmTAllegatoFieldList);
    return cnmTAllegato;
}",java:S100,
"private void explain_(RelNode rel, List<Pair<String, Object>> values){
    final Map<String, Object> map = relJson.map();
    map.put(""id"", null);
    map.put(""relOp"", relJson.classToTypeName(rel.getClass()));
    for (Pair<String, Object> value : values) {
        if (value.right instanceof RelNode)
            continue;
        map.put(value.left, relJson.toJson(value.right));
    }
    final List<Object> list = explainInputs(rel.getInputs());
    if (list.size() != 1 || !list.get(0).equals(previousId)) {
        map.put(""inputs"", list);
    }
    final String id = Integer.toString(relIdMap.size());
    relIdMap.put(rel, id);
    map.put(""id"", id);
    relList.add(map);
    previousId = id;
}",java:S100,
"public static StatelessIntHash murmur3_32(int seed){
    return Hashes.getStatelessInt(new MurmurHash3Parameters(MurmurHash3Variant.X86_32, seed));
}",java:S100,
"public static Geometry ST_Expand(Geometry geom, BigDecimal deltaX, BigDecimal deltaY){
    Envelope envelope = geom.getEnvelopeInternal().copy();
    envelope.expandBy(deltaX.doubleValue(), deltaY.doubleValue());
    return geom.getFactory().toGeometry(envelope);
}",java:S100,
"public void _setTypeCode(BitSet typeCode){
    this.typeCode = typeCode;
}",java:S100,
"public static int ST_SRID(Geometry geom){
    return geom.getSRID();
}",java:S100,
"private PrincipalForApplicationUser createPrincipal_inApplicationUserRepository(final String username){
    return execute(new Supplier<PrincipalForApplicationUser>() {

        @Override
        public PrincipalForApplicationUser get() {
            val applicationUser = applicationUserRepository.findOrCreateUserByUsername(username);
            return PrincipalForApplicationUser.from(applicationUser);
        }

        @Inject
        private ApplicationUserRepository applicationUserRepository;
    });
}",java:S100,
"public void setHave_field_flags_hi(final boolean have_field_flags_hi){
    this.have_field_flags_hi = have_field_flags_hi;
}",java:S100,
"public int getArchive_modtime(){
    return archive_modtime;
}",java:S100,
"public static ArchRule every_jpa_Entity_must_be_annotated_with_DomainObject_nature_of_ENTITY(){
    return classes().that().areAnnotatedWith(Entity.class).should().beAnnotatedWith(CommonPredicates.DomainObject_nature_ENTITY());
}",java:S100,
"@Nullable
public static Geometry ST_GeomFromWKT(String wkt){
    return ST_GeomFromWKT(wkt, NO_SRID);
}",java:S100,
"public static ArchRule every_injected_field_of_jaxb_view_model_must_be_annotated_with_XmlTransient(){
    return fields().that().areDeclaredInClassesThat(areJaxbViewModels()).and().areAnnotatedWith(Inject.class).should().beAnnotatedWith(XmlTransient.class);
}",java:S100,
"public static boolean ST_IsRing(Geometry geom){
    if (geom instanceof LineString) {
        return ((LineString) geom).isClosed() && geom.isSimple();
    }
    if (geom instanceof MultiLineString) {
        return ((MultiLineString) geom).isClosed() && geom.isSimple();
    }
    return false;
}",java:S100,
"@Nullable
public static String ST_AsEWKT(Geometry geometry){
    return asEwkt(geometry);
}",java:S100,
"public static ArchRule every_Action_mixin_must_follow_naming_convention(){
    return mixin_must_follow_naming_conventions(Action.class, ""act"", mixinMethodNameToFind -> javaMethodCandidate -> javaMethodCandidate.getName().equals(mixinMethodNameToFind));
}",java:S100,
"public static boolean ST_Covers(Geometry geom1, Geometry geom2){
    return geom1.covers(geom2);
}",java:S100,
"@Nullable
public static Geometry ST_MakeEllipse(Geometry point, BigDecimal width, BigDecimal height){
    if (!(point instanceof Point)) {
        return null;
    }
    GeometricShapeFactory factory = new GeometricShapeFactory(point.getFactory());
    factory.setCentre(point.getCoordinate());
    factory.setWidth(width.doubleValue());
    factory.setHeight(height.doubleValue());
    return factory.createEllipse();
}",java:S100,
"public static ArchRule every_jpa_Entity_must_be_annotated_with_XmlJavaAdapter_of_PersistentEntityAdapter(){
    return classes().that().areAnnotatedWith(Entity.class).should().beAnnotatedWith(CommonPredicates.XmlJavaTypeAdapter_value_PersistentEntityAdapter());
}",java:S100,
"public static ArchRule every_jpa_Entity_must_be_annotated_as_Table_with_schema(){
    return classes().that().areAnnotatedWith(Entity.class).should().beAnnotatedWith(Table_schema());
}",java:S100,
" static long MurmurHash3_x64_64(LoadStrategy<R> loader, R resource, long offset, int len, final int seed){
    final long tailStart = offset + (len & ~(MURMUR64_BLOCK_SIZE - 1));
    long h1 = 0x9368e53c2f6af274L ^ seed;
    long h2 = 0x586dcd208f7cd3fdL ^ seed;
    long c1 = 0x87c37b91114253d5L;
    long c2 = 0x4cf5ad432745937fL;
    long k1;
    long k2;
    for (long blockAddr = offset; blockAddr < tailStart; blockAddr += MURMUR64_BLOCK_SIZE) {
        k1 = loader.getLong(resource, blockAddr);
        k2 = loader.getLong(resource, blockAddr + 8);
        k1 *= c1;
        k1 = (k1 << 23) | (k1 >>> 64 - 23);
        k1 *= c2;
        h1 ^= k1;
        h1 += h2;
        h2 = (h2 << 41) | (h2 >>> 64 - 41);
        k2 *= c2;
        k2 = (k2 << 23) | (k2 >>> 64 - 23);
        k2 *= c1;
        h2 ^= k2;
        h2 += h1;
        h1 = h1 * 3 + 0x52dce729;
        h2 = h2 * 3 + 0x38495ab5;
        c1 = c1 * 5 + 0x7b7d159c;
        c2 = c2 * 5 + 0x6bce6396;
    }
    k1 = 0;
    k2 = 0;
    switch(len & 15) {
        case 15:
            k2 ^= (long) loader.getByte(resource, tailStart + 14) << 48;
        case 14:
            k2 ^= (long) loader.getByte(resource, tailStart + 13) << 40;
        case 13:
            k2 ^= (long) loader.getByte(resource, tailStart + 12) << 32;
        case 12:
            k2 ^= (long) loader.getByte(resource, tailStart + 11) << 24;
        case 11:
            k2 ^= (long) loader.getByte(resource, tailStart + 10) << 16;
        case 10:
            k2 ^= (long) loader.getByte(resource, tailStart + 9) << 8;
        case 9:
            k2 ^= loader.getByte(resource, tailStart + 8);
        case 8:
            k1 ^= (long) loader.getByte(resource, tailStart + 7) << 56;
        case 7:
            k1 ^= (long) loader.getByte(resource, tailStart + 6) << 48;
        case 6:
            k1 ^= (long) loader.getByte(resource, tailStart + 5) << 40;
        case 5:
            k1 ^= (long) loader.getByte(resource, tailStart + 4) << 32;
        case 4:
            k1 ^= (long) loader.getByte(resource, tailStart + 3) << 24;
        case 3:
            k1 ^= (long) loader.getByte(resource, tailStart + 2) << 16;
        case 2:
            k1 ^= (long) loader.getByte(resource, tailStart + 1) << 8;
        case 1:
            k1 ^= loader.getByte(resource, tailStart);
            k1 *= c1;
            k1 = (k1 << 23) | (k1 >>> 64 - 23);
            k1 *= c2;
            h1 ^= k1;
            h1 += h2;
            h2 = (h2 << 41) | (h2 >>> 64 - 41);
            k2 *= c2;
            k2 = (k2 << 23) | (k2 >>> 64 - 23);
            k2 *= c1;
            h2 ^= k2;
            h2 += h1;
            h1 = h1 * 3 + 0x52dce729;
            h2 = h2 * 3 + 0x38495ab5;
        default:
    }
    h2 ^= len;
    h1 += h2;
    h2 += h1;
    h1 = MurmurHash3_fmix(h1);
    h2 = MurmurHash3_fmix(h2);
    return h1 + h2;
}",java:S100,
"public static ArchRule every_jpa_Entity_must_be_annotated_as_an_CausewayEntityListener(){
    return classes().that().areAnnotatedWith(Entity.class).should().beAnnotatedWith(EntityListeners_with_CausewayEntityListener());
}",java:S100,
"public static Geometry ST_ConstrainedDelaunay(Geometry geom){
    return ST_ConstrainedDelaunay(geom, 0);
}",java:S100,
"private static byte[] decode_base64(String s, int maxolen) throws IllegalArgumentException{
    StringBuffer rs = new StringBuffer();
    int off = 0, slen = s.length(), olen = 0;
    byte[] ret;
    byte c1, c2, c3, c4, o;
    if (maxolen <= 0)
        throw new IllegalArgumentException(""Invalid maxolen"");
    while (off < slen - 1 && olen < maxolen) {
        c1 = char64(s.charAt(off++));
        c2 = char64(s.charAt(off++));
        if (c1 == -1 || c2 == -1)
            break;
        o = (byte) (c1 << 2);
        o |= (c2 & 0x30) >> 4;
        rs.append((char) o);
        if (++olen >= maxolen || off >= slen)
            break;
        c3 = char64(s.charAt(off++));
        if (c3 == -1)
            break;
        o = (byte) ((c2 & 0x0f) << 4);
        o |= (c3 & 0x3c) >> 2;
        rs.append((char) o);
        if (++olen >= maxolen || off >= slen)
            break;
        c4 = char64(s.charAt(off++));
        o = (byte) ((c3 & 0x03) << 6);
        o |= c4;
        rs.append((char) o);
        ++olen;
    }
    ret = new byte[olen];
    for (off = 0; off < olen; off++) ret[off] = (byte) rs.charAt(off);
    return ret;
}",java:S100,
"public void kBaseInternal_removeRule(InternalKnowledgePackage pkg, RuleImpl rule, Collection<InternalWorkingMemory> workingMemories){
    this.reteooBuilder.removeRules(Collections.singletonList(rule), workingMemories);
    pkg.removeRule(rule);
    addReloadDialectDatas(pkg.getDialectRuntimeRegistry());
}",java:S100,
"public static SwitchStatement switch_(Expression switchValue, Expression defaultBody, Method method, SwitchCase... cases){
    return switch_(switchValue, defaultBody, method, toList(cases));
}",java:S100,
"public static ArchRule every_jdo_PersistenceCapable_must_be_annotated_as_XmlJavaAdapter_PersistentEntityAdapter(){
    return classes().that().areAnnotatedWith(javax.jdo.annotations.PersistenceCapable.class).should().beAnnotatedWith(CommonPredicates.XmlJavaTypeAdapter_value_PersistentEntityAdapter());
}",java:S100,
"public boolean getDefaultValueAs_boolean(){
    if (StringUtils.isEmpty(initExpr)) {
        return false;
    } else {
        if (""true"".equalsIgnoreCase(initExpr)) {
            return true;
        } else if (""false"".equalsIgnoreCase(initExpr)) {
            return false;
        } else {
            return CoreComponentsBuilder.get().getMVELExecutor().eval(initExpr, Boolean.class);
        }
    }
}",java:S100,
"public static final float PID(String seq1, String seq2, int start, int end){
    int s1len = seq1.length();
    int s2len = seq2.length();
    int len = Math.min(s1len, s2len);
    if (end < len) {
        len = end;
    }
    if (len < start) {
        start = len - 1;
    }
    int bad = 0;
    char chr1;
    char chr2;
    for (int i = start; i < len; i++) {
        chr1 = seq1.charAt(i);
        chr2 = seq2.charAt(i);
        if ('a' <= chr1 && chr1 <= 'z') {
            chr1 -= caseShift;
        }
        if ('a' <= chr2 && chr2 <= 'z') {
            chr2 -= caseShift;
        }
        if (chr1 != chr2 && !isGap(chr1) && !isGap(chr2)) {
            bad++;
        }
    }
    return ((float) 100 * (len - bad)) / len;
}",java:S100,
" Iterable<Object> _createIterable(StatementHandle handle, Signature signature, @Nullable List<TypedValue> parameterValues, @Nullable Frame firstFrame){
    try {
        final CalcitePrepare.CalciteSignature<Object> calciteSignature = (CalcitePrepare.CalciteSignature<Object>) signature;
        return getConnection().enumerable(handle, calciteSignature, parameterValues);
    } catch (SQLException e) {
        throw new RuntimeException(e.getMessage());
    }
}",java:S100,
"private ParseResult parse_(Context context, String sql, boolean convert, boolean analyze, boolean fail){
    final JavaTypeFactory typeFactory = context.getTypeFactory();
    CalciteCatalogReader catalogReader = new CalciteCatalogReader(context.getRootSchema(), context.getDefaultSchemaPath(), typeFactory, context.config());
    SqlParser parser = createParser(sql);
    SqlNode sqlNode;
    try {
        sqlNode = parser.parseStmt();
    } catch (SqlParseException e) {
        throw new RuntimeException(""parse failed"", e);
    }
    final SqlValidator validator = createSqlValidator(context, catalogReader);
    SqlNode sqlNode1 = validator.validate(sqlNode);
    if (convert) {
        return convert_(context, sql, analyze, fail, catalogReader, validator, sqlNode1);
    }
    return new ParseResult(this, validator, sql, sqlNode1, validator.getValidatedNodeType(sqlNode1));
}",java:S100,
"private void _parse(){
    cursor = offset;
    parse();
    length = cursor - offset;
    if (length != payload.length) {
        byte[] trimmed = new byte[length];
        System.arraycopy(payload, offset, trimmed, 0, length);
        payload = trimmed;
        offset = 0;
    }
    cursor = 0;
}",java:S100,
"@Nullable
public static Geometry ST_MLineFromText(String wkt){
    Geometry geometry = ST_GeomFromWKT(wkt);
    return geometry instanceof MultiLineString ? geometry : null;
}",java:S100,
"public static Geometry ST_Buffer(Geometry geom, double distance, int quadSegs){
    return geom.buffer(distance, quadSegs);
}",java:S100,
"public static FeeMarketException BaseFeePresentBeforeForkBlock(){
    return new FeeMarketException(""Invalid block header: basefee should not be present before fee market fork block"");
}",java:S100,
"@Nullable
public static Geometry ST_PolyFromText(String wkt, int srid){
    Geometry geometry = ST_GeomFromWKT(wkt, srid);
    return geometry instanceof Polygon ? geometry : null;
}",java:S100,
"public static Geometry ST_Expand(Geometry geom, BigDecimal distance){
    Envelope envelope = geom.getEnvelopeInternal().copy();
    envelope.expandBy(distance.doubleValue());
    return geom.getFactory().toGeometry(envelope);
}",java:S100,
"public static Geometry ST_Centroid(Geometry geom){
    return geom.getCentroid();
}",java:S100,
"public static int ST_NumInteriorRing(Geometry geom){
    return ST_NumInteriorRings(geom);
}",java:S100,
"private Frame peek_(int inputCount, int inputOrdinal){
    return peek_(inputCount - 1 - inputOrdinal);
}",java:S100,
"public byte getDefaultValueAs_byte(){
    try {
        return initExpr == null ? 0 : Byte.parseByte(initExpr);
    } catch (NumberFormatException nfe) {
        return StringUtils.isEmpty(initExpr) ? 0 : CoreComponentsBuilder.get().getMVELExecutor().eval(initExpr, Byte.class);
    }
}",java:S100,
"private void Optimize(){
    if (gridOptimized == null) {
        List<Entry<GridPosition, Set<Integer>>> gridValues = new ArrayList<>();
        grid.forEach((k, v) -> {
            gridValues.add(new AbstractMap.SimpleEntry<>(k, v));
        });
        gridOptimized = SceneIndexManager.buildIndex(2, gridValues, entry -> entry.getKey().toPoint());
    }
}",java:S100,
"@Nullable
public static Geometry ST_MPointFromText(String wkt, int srid){
    Geometry geometry = ST_GeomFromWKT(wkt, srid);
    return geometry instanceof MultiPoint ? geometry : null;
}",java:S100,
"public static Geometry ST_ConstrainedDelaunay(Geometry geom, int flag){
    GeometryFactory factory = geom.getFactory();
    ConstrainedDelaunayTriangulator cdt = new ConstrainedDelaunayTriangulator(geom);
    List<Tri> tris = cdt.getTriangles();
    Polygon[] polygons = new Polygon[tris.size()];
    int i = 0;
    for (Tri tri : tris) {
        polygons[i++] = tri.toPolygon(factory);
    }
    MultiPolygon multiPolygon = factory.createMultiPolygon(polygons);
    if (flag == 0) {
        return multiPolygon;
    } else {
        return asTriangleEdges(multiPolygon);
    }
}",java:S100,
"public static Geometry ST_BoundingCircle(Geometry geom){
    return new MinimumBoundingCircle(geom).getCircle();
}",java:S100,
"@Nullable
public static Double ST_MaxDistance(Geometry geom1, Geometry geom2){
    double maxDistance = Double.MIN_VALUE;
    for (Coordinate coordinate1 : geom1.getCoordinates()) {
        for (Coordinate coordinate2 : geom2.getCoordinates()) {
            double distance = coordinate1.distance(coordinate2);
            if (distance > maxDistance) {
                maxDistance = distance;
            }
        }
    }
    return maxDistance;
}",java:S100,
"private String _insdc_feature_position_string(Point location, int increment){
    StringBuilder sb = new StringBuilder();
    Formatter formatter = new Formatter(sb, Locale.US);
    formatter.format(""%s"", location.getPosition() + increment);
    String output = formatter.toString();
    formatter.close();
    return output;
}",java:S100,
"public boolean have_all_code_flags(){
    return have_all_code_flags;
}",java:S100,
"public static UnaryExpression convertChecked_(Expression expression, Type type, Method method){
    throw Extensions.todo();
}",java:S100,
"public static ArchRule every_Property_mixin_must_follow_naming_convention(){
    return mixin_must_follow_naming_conventions(Property.class, ""prop"", mixinMethodNameToFind -> javaMethodCandidate -> javaMethodCandidate.getName().equals(mixinMethodNameToFind) && javaMethodCandidate.getRawParameterTypes().size() == 0);
}",java:S100,
"public void kBaseInternal_writeLock(){
    this.lock.writeLock().lock();
}",java:S100,
"private String GenerateAuthor(String lastName, String initials){
    return lastName + "", "" + initials;
}",java:S100,
"public static Geometry ST_UnaryUnion(Geometry geom1, Geometry geom2){
    return geom1.union(geom2);
}",java:S100,
" static DescribedPredicate<JavaAnnotation<?>> EntityListeners_with_CausewayEntityListener(){
    return new DescribedPredicate<JavaAnnotation<?>>(""@EntityListener({CausewayEntityListener.class})"") {

        @Override
        public boolean test(final JavaAnnotation<?> javaAnnotation) {
            if (!javaAnnotation.getRawType().isAssignableTo(EntityListeners.class)) {
                return false;
            }
            val properties = javaAnnotation.getProperties();
            val listeners = properties.get(""value"");
            return listeners instanceof JavaClass[] && containsCausewayEntityListener((JavaClass[]) listeners);
        }

        private boolean containsCausewayEntityListener(final JavaClass[] classes) {
            return Arrays.stream(classes).anyMatch(x -> Objects.equals(x.getFullName(), CausewayEntityListener.class.getName()) || x.isAssignableTo(CausewayEntityListener.class));
        }
    };
}",java:S100,
"private static GroupKey groupKey_(Iterable<? extends RexNode> nodes, Iterable<? extends Iterable<? extends RexNode>> nodeLists){
    final ImmutableList.Builder<ImmutableList<RexNode>> builder = ImmutableList.builder();
    for (Iterable<? extends RexNode> nodeList : nodeLists) {
        builder.add(ImmutableList.copyOf(nodeList));
    }
    return new GroupKeyImpl(ImmutableList.copyOf(nodes), builder.build(), null);
}",java:S100,
"@Nullable
public static Geometry ST_GeomFromText(String wkt, int srid){
    return ST_GeomFromWKT(wkt, srid);
}",java:S100,
"public static Geometry ST_Intersection(Geometry geom1, Geometry geom2){
    return geom1.intersection(geom2);
}",java:S100,
"public static ArchRule every_logicalTypeName_must_be_unique(){
    return classes().that().areAnnotatedWith(DomainObject.class).or().areAnnotatedWith(DomainService.class).and(new DescribedPredicate<>(""have an logicalTypeName"") {

        @Override
        public boolean test(final JavaClass javaClass) {
            return _LogicalNaming.hasExplicitLogicalName(javaClass);
        }
    }).should(new ArchCondition<>(""be unique"") {

        @Override
        public void check(final JavaClass javaClass, final ConditionEvents conditionEvents) {
            val logicalTypeName = _LogicalNaming.logicalNameFor(javaClass);
            final JavaClass existing = javaClassByLogicalTypeName.get(logicalTypeName);
            if (existing != null) {
                conditionEvents.add(new SimpleConditionEvent(javaClass, false, String.format(""Classes '%s' and '%s' have the same logicalTypeName '%s'"", javaClass.getName(), existing.getName(), logicalTypeName)));
            } else {
                javaClassByLogicalTypeName.put(logicalTypeName, javaClass);
            }
        }
    });
}",java:S100,
"private static void validateActionParameter_whenCollection(final ObjectSpecification objectSpec, final ObjectAction objectAction, final ObjectActionParameter parameter, final int paramNum){
    if (parameter.isSingular()) {
        return;
    }
    parameter.lookupFacet(TypeOfFacet.class).ifPresentOrElse(typeOfFacet -> {
        if (!typeOfFacet.value().isSupportedForActionParameter()) {
            val messageFormat = ""Collection action parameter found that is not exactly one "" + ""of the following supported types: "" + ""List, Set, SortedSet, Collection, Can or Array.  "" + ""Class: %s action: %s parameter %d"";
            ValidationFailure.raise(objectSpec, String.format(messageFormat, objectSpec.getFullIdentifier(), objectAction.getId(), paramNum));
        }
    }, () -> {
        val messageFormat = ""framework bug: non-scalar action parameter found,"" + "" that has no TypeOfFacet"" + ""Class: %s action: %s parameter %d"";
        throw _Exceptions.unrecoverable(messageFormat, objectSpec.getFullIdentifier(), objectAction.getId(), paramNum);
    });
    val parameterTypeSpec = parameter.getElementType();
    if (parameter.containsFacet(ActionParameterChoicesFacet.class) || parameter.containsFacet(ActionParameterAutoCompleteFacet.class) || parameterTypeSpec.containsNonFallbackFacet(AutoCompleteFacet.class)) {
        return;
    }
    val messageFormat = ""Collection action parameter found without supporting "" + ""choices or autoComplete facet.  "" + ""Class: %s action: %s parameter %d"";
    ValidationFailure.raise(objectSpec, String.format(messageFormat, objectSpec.getFullIdentifier(), objectAction.getId(), paramNum));
}",java:S100,
"private void _parse(InputStream in) throws IOException{
    if (isFixedSize()) {
        payload = Utils.readBytesStrict(in, fixedSize());
        length = payload.length;
        offset = 0;
        cursor = 0;
        parse();
        cursor = 0;
    } else {
        length = parse(in);
    }
}",java:S100,
" CalciteSignature<T> prepare_(Context context, Query<T> query, Type elementType, long maxRowCount){
    if (SIMPLE_SQLS.contains(query.sql)) {
        return simplePrepare(context, castNonNull(query.sql));
    }
    final JavaTypeFactory typeFactory = context.getTypeFactory();
    CalciteCatalogReader catalogReader = new CalciteCatalogReader(context.getRootSchema(), context.getDefaultSchemaPath(), typeFactory, context.config());
    final List<Function1<Context, RelOptPlanner>> plannerFactories = createPlannerFactories();
    if (plannerFactories.isEmpty()) {
        throw new AssertionError(""no planner factories"");
    }
    RuntimeException exception = Util.FoundOne.NULL;
    for (Function1<Context, RelOptPlanner> plannerFactory : plannerFactories) {
        final RelOptPlanner planner = plannerFactory.apply(context);
        if (planner == null) {
            throw new AssertionError(""factory returned null planner"");
        }
        try {
            CalcitePreparingStmt preparingStmt = getPreparingStmt(context, elementType, catalogReader, planner);
            return prepare2_(context, query, elementType, maxRowCount, catalogReader, preparingStmt);
        } catch (RelOptPlanner.CannotPlanException e) {
            exception = e;
        }
    }
    throw exception;
}",java:S100,
"public static ArchRule every_enum_field_of_jpa_Entity_must_be_annotated_with_Enumerable_STRING(){
    return fields().that().areDeclaredInClassesThat(areEntities()).and().haveRawType(ofAnEnum()).should().beAnnotatedWith(annotationOf(Enumerated.class, ""value"", ""EnumType.STRING""));
}",java:S100,
"@Nullable
public static String ST_AsWKT(Geometry geometry){
    return asWkt(geometry);
}",java:S100,
"private void init_key(){
    P = (int[]) P_orig.clone();
    S = (int[]) S_orig.clone();
}",java:S100,
"private ResponseProtocollaDocumento avviaProtocollazioneDocumentoEsistente_Doqui(CnmTAllegato cnmTAllegato, CnmTUser cnmTUser){
    ResponseProtocollaDocumento responseProtocollaDocumento = null;
    Timestamp now = utilsDate.asTimeStamp(LocalDateTime.now());
    List<CnmTAllegato> cnmTAllegatoList = new ArrayList<>();
    if (cnmTAllegato.getCnmDStatoAllegato().getIdStatoAllegato() != Constants.STATO_ALLEGATO_NON_PROTOCOLLARE)
        throw new RuntimeException(""Allegato master non e' nello stato corretto"");
    String folder;
    String idEntitaFruitore;
    String soggettoActa;
    String rootActa;
    CnmTVerbale cnmTVerbale = null;
    if (cnmTAllegato.getCnmDTipoAllegato().getIdTipoAllegato() == TipoAllegato.ISTANZA_RATEIZZAZIONE.getId()) {
        CnmTOrdinanza cnmTOrdinanza = cnmRAllegatoOrdVerbSogRepository.findByCnmTAllegato(cnmTAllegato).get(0).getCnmROrdinanzaVerbSog().getCnmTOrdinanza();
        folder = utilsDoqui.createOrGetfolder(cnmTOrdinanza);
        idEntitaFruitore = utilsDoqui.createIdEntitaFruitore(cnmTOrdinanza, cnmTAllegato.getCnmDTipoAllegato());
        soggettoActa = utilsDoqui.getSoggettoActa(cnmTOrdinanza);
        rootActa = utilsDoqui.getRootActa(cnmTOrdinanza);
    } else if (cnmTAllegato.getCnmDTipoAllegato().getIdTipoAllegato() == TipoAllegato.RAPPORTO_TRASMISSIONE.getId()) {
        cnmTVerbale = cnmRAllegatoVerbaleRepository.findByCnmTAllegato(cnmTAllegato).getCnmTVerbale();
        folder = utilsDoqui.createOrGetfolder(cnmTVerbale);
        idEntitaFruitore = utilsDoqui.createIdEntitaFruitore(cnmTVerbale, cnmTAllegato.getCnmDTipoAllegato());
        soggettoActa = utilsDoqui.getSoggettoActa(cnmTVerbale);
        rootActa = utilsDoqui.getRootActa(cnmTVerbale);
    } else if (cnmTAllegato.getCnmDTipoAllegato().getIdTipoAllegato() == TipoAllegato.LETTERA_ORDINANZA.getId()) {
        CnmTOrdinanza cnmTOrdinanza = cnmRAllegatoOrdinanzaRepository.findByCnmTAllegato(cnmTAllegato).get(0).getCnmTOrdinanza();
        folder = utilsDoqui.createOrGetfolder(cnmTOrdinanza);
        idEntitaFruitore = utilsDoqui.createIdEntitaFruitore(cnmTOrdinanza, cnmTAllegato.getCnmDTipoAllegato());
        soggettoActa = utilsDoqui.getSoggettoActa(cnmTOrdinanza);
        rootActa = utilsDoqui.getRootActa(cnmTOrdinanza);
    } else if (cnmTAllegato.getCnmDTipoAllegato().getIdTipoAllegato() == TipoAllegato.COMPARSA.getId()) {
        cnmTVerbale = cnmRAllegatoVerbaleRepository.findByCnmTAllegato(cnmTAllegato).getCnmTVerbale();
        folder = utilsDoqui.createOrGetfolder(cnmTVerbale);
        idEntitaFruitore = utilsDoqui.createIdEntitaFruitore(cnmTVerbale, cnmTAllegato.getCnmDTipoAllegato());
        soggettoActa = utilsDoqui.getSoggettoActa(cnmTVerbale);
        rootActa = utilsDoqui.getRootActa(cnmTVerbale);
    } else {
        throw new SecurityException(""tipo alleggato non corretto"");
    }
    if (cnmTAllegato.getCnmDStatoAllegato().getIdStatoAllegato() == Constants.STATO_ALLEGATO_NON_PROTOCOLLARE) {
        responseProtocollaDocumento = doquiServiceFacade.protocollaDocumentoFisicoEsistente(folder, cnmTAllegato.getNomeFile(), idEntitaFruitore, true, false, soggettoActa, rootActa, cnmTAllegato.getCnmDTipoAllegato().getIdTipoAllegato(), DoquiServiceFacade.TIPOLOGIA_DOC_ACTA_MASTER_INGRESSO_CON_ALLEGATI, null, cnmTAllegato.getIdActa());
        cnmTAllegato.setCnmDStatoAllegato(cnmDStatoAllegatoRepository.findOne(Constants.STATO_ALLEGATO_PROTOCOLLATO));
        cnmTAllegato.setObjectidSpostamentoActa(null);
        cnmTAllegato.setIdActa(responseProtocollaDocumento.getIdDocumento());
        cnmTAllegato.setDataOraUpdate(now);
        cnmTAllegato.setNumeroProtocollo(responseProtocollaDocumento.getProtocollo());
        cnmTAllegato.setDataOraProtocollo(now);
        cnmTAllegatoList.add(cnmTAllegato);
        if (cnmTAllegato.getCnmDTipoAllegato().getIdTipoAllegato() == TipoAllegato.RAPPORTO_TRASMISSIONE.getId()) {
            verbaleService.salvaNumeroProtocollo(cnmTVerbale.getIdVerbale(), responseProtocollaDocumento.getProtocollo(), cnmTUser);
        }
    }
    cnmTAllegatoRepository.save(cnmTAllegatoList);
    return responseProtocollaDocumento;
}",java:S100,
"public static ArchRule every_class_named_Repository_must_be_annotated_correctly(){
    return classes().that().haveNameMatching("".*Repository"").should().beAnnotatedWith(Repository.class);
}",java:S100,
"public static ForStatement for_(DeclarationStatement declaration, @Nullable Expression condition, @Nullable Expression post, Statement body){
    return new ForStatement(Collections.singletonList(declaration), condition, post, body);
}",java:S100,
"@Nullable
public static Geometry ST_PointFromText(String wkt, int srid){
    Geometry geometry = ST_GeomFromWKT(wkt, srid);
    return geometry instanceof Point ? geometry : null;
}",java:S100,
"@Nullable
public static Geometry ST_GeomFromText(String wkt){
    return ST_GeomFromWKT(wkt);
}",java:S100,
"public static ArchRule every_jdo_PersistenceCapable_must_be_annotated_with_DomainObject_nature_of_ENTITY(){
    return classes().that().areAnnotatedWith(javax.jdo.annotations.PersistenceCapable.class).should().beAnnotatedWith(CommonPredicates.DomainObject_nature_ENTITY());
}",java:S100,
"public static Geometry ST_FlipCoordinates(Geometry geom){
    FlipCoordinatesTransformer transformer = new FlipCoordinatesTransformer();
    return transformer.transform(geom);
}",java:S100,
"public static int ST_NumInteriorRings(Geometry geom){
    int[] num = new int[] { 0 };
    geom.apply(new GeometryFilter() {

        @Override
        public void filter(Geometry geom) {
            if (geom instanceof Polygon) {
                num[0] += ((Polygon) geom).getNumInteriorRing();
            }
        }
    });
    return num[0];
}",java:S100,
"public void setCp_Field_count(final int count){
    cp_Field_count = count;
}",java:S100,
" static DescribedPredicate<JavaAnnotation<?>> DomainXxx_logicalTypeName(final Class<? extends Annotation> annotationClass){
    return new DescribedPredicate<>(String.format(""@%s(logicalTypeName=...)"", annotationClass.getSimpleName())) {

        @Override
        public boolean test(final JavaAnnotation<?> javaAnnotation) {
            if (!javaAnnotation.getRawType().isAssignableTo(annotationClass)) {
                return false;
            }
            val properties = javaAnnotation.getProperties();
            val value = properties.get(""logicalTypeName"");
            return value instanceof String && ((String) value).length() > 0;
        }
    };
}",java:S100,
"private String _insdc_feature_location_string(FeatureInterface<AbstractSequence<C>, C> feature, int record_length){
    if (feature.getChildrenFeatures().isEmpty()) {
        if (feature.getLocations().getSubLocations().isEmpty()) {
            String location = _insdc_location_string_ignoring_strand_and_subfeatures(feature.getLocations(), record_length);
            if (feature.getLocations().getStrand() == Strand.NEGATIVE) {
                StringBuilder sb = new StringBuilder();
                Formatter formatter = new Formatter(sb, Locale.US);
                formatter.format(""complement(%s)"", location);
                String output = formatter.toString();
                formatter.close();
                location = output;
            }
            return location;
        } else if (feature.getLocations().getStrand() == Strand.NEGATIVE) {
            for (Location l : feature.getLocations().getSubLocations()) {
                if (l.getStrand() != Strand.NEGATIVE) {
                    StringBuilder sb = new StringBuilder();
                    Formatter formatter = new Formatter(sb, Locale.US);
                    formatter.format(""Inconsistent strands: %s for parent, %s for child"", feature.getLocations().getStrand(), l.getStrand());
                    String output = formatter.toString();
                    formatter.close();
                    throw new RuntimeException(output);
                }
            }
            StringBuilder sb = new StringBuilder();
            Formatter formatter = new Formatter(sb, Locale.US);
            ArrayList<String> locations = new ArrayList<String>();
            for (Location l : feature.getLocations().getSubLocations()) {
                locations.add(_insdc_location_string_ignoring_strand_and_subfeatures((AbstractLocation) l, record_length));
            }
            String location = StringManipulationHelper.join(locations, "","");
            formatter.format(""complement(%s(%s))"", ""join"", location);
            String output = formatter.toString();
            formatter.close();
            return output;
        } else {
            StringBuilder sb = new StringBuilder();
            Formatter formatter = new Formatter(sb, Locale.US);
            ArrayList<String> locations = new ArrayList<String>();
            for (Location l : feature.getLocations().getSubLocations()) {
                locations.add(_insdc_location_string_ignoring_strand_and_subfeatures((AbstractLocation) l, record_length));
            }
            String location = StringManipulationHelper.join(locations, "","");
            formatter.format(""%s(%s)"", ""join"", location);
            String output = formatter.toString();
            formatter.close();
            return output;
        }
    }
    if (feature.getLocations().getStrand() == Strand.NEGATIVE) {
        for (FeatureInterface<?, ?> f : feature.getChildrenFeatures()) {
            if (f.getLocations().getStrand() != Strand.NEGATIVE) {
                StringBuilder sb = new StringBuilder();
                Formatter formatter = new Formatter(sb, Locale.US);
                formatter.format(""Inconsistent strands: %s for parent, %s for child"", feature.getLocations().getStrand(), f.getLocations().getStrand());
                String output = formatter.toString();
                formatter.close();
                throw new RuntimeException(output);
            }
        }
        StringBuilder sb = new StringBuilder();
        Formatter formatter = new Formatter(sb, Locale.US);
        ArrayList<String> locations = new ArrayList<String>();
        for (FeatureInterface<AbstractSequence<C>, C> f : feature.getChildrenFeatures()) {
            locations.add(_insdc_location_string_ignoring_strand_and_subfeatures(f.getLocations(), record_length));
        }
        String location = StringManipulationHelper.join(locations, "","");
        formatter.format(""complement(%s(%s))"", ""join"", location);
        String output = formatter.toString();
        formatter.close();
        return output;
    }
    StringBuilder sb = new StringBuilder();
    Formatter formatter = new Formatter(sb, Locale.US);
    ArrayList<String> locations = new ArrayList<String>();
    for (FeatureInterface<AbstractSequence<C>, C> f : feature.getChildrenFeatures()) {
        locations.add(_insdc_location_string_ignoring_strand_and_subfeatures(f.getLocations(), record_length));
    }
    String location = StringManipulationHelper.join(locations, "","");
    formatter.format(""%s(%s)"", ""join"", location);
    String output = formatter.toString();
    formatter.close();
    return output;
}",java:S100,
"private static LogicalAggregate create_(final RelNode input, List<RelHint> hints, ImmutableBitSet groupSet, @Nullable List<ImmutableBitSet> groupSets, List<AggregateCall> aggCalls){
    final RelOptCluster cluster = input.getCluster();
    final RelTraitSet traitSet = cluster.traitSetOf(Convention.NONE);
    return new LogicalAggregate(cluster, traitSet, hints, input, groupSet, groupSets, aggCalls);
}",java:S100,
"public static Geometry ST_Buffer(Geometry geom, double distance, String bufferStyle){
    BufferStyle style = new BufferStyle(bufferStyle);
    BufferParameters params = style.asBufferParameters();
    double sidedDistance = style.asSidedDistance(distance);
    Geometry result = new BufferOp(geom, params).getResultGeometry(sidedDistance);
    return result;
}",java:S100,
"public void setCp_String_count(final int count){
    cp_String_count = count;
}",java:S100,
"private OverCall partitionBy_(ImmutableList<RexNode> partitionKeys){
    return new OverCallImpl(op, distinct, operands, ignoreNulls, alias, partitionKeys, sortKeys, rows, lowerBound, upperBound, nullWhenCountZero, allowPartial);
}",java:S100,
"public static ArchRule every_jpa_Entity_must_have_protected_no_arg_constructor(){
    return classes().that().areAnnotatedWith(Entity.class).and().doNotHaveModifier(JavaModifier.ABSTRACT).should(haveNoArgProtectedConstructor());
}",java:S100,
"public static NewExpression new_(Type type, Iterable<? extends Expression> arguments, MemberDeclaration... memberDeclarations){
    return new NewExpression(type, toList(arguments), toList(memberDeclarations));
}",java:S100,
"public void kBaseInternal_unlock(){
    this.lock.writeLock().unlock();
}",java:S100,
"private String _insdc_feature_position_string(Point location){
    return _insdc_feature_position_string(location, 0);
}",java:S100,
"public static boolean ST_EnvelopesIntersect(Geometry geom1, Geometry geom2){
    final Geometry e1 = geom1.getEnvelope();
    final Geometry e2 = geom2.getEnvelope();
    return e1.intersects(e2);
}",java:S100,
"private static String toBase64_(byte[] bytes){
    String base64 = Base64.getEncoder().encodeToString(bytes);
    StringBuilder str = new StringBuilder(base64.length() + base64.length() / 76);
    Splitter.fixedLength(76).split(base64).iterator().forEachRemaining(s -> {
        str.append(s);
        str.append(""\n"");
    });
    return str.substring(0, str.length() - 1);
}",java:S100,
"public void setCp_Long_count(final int count){
    cp_Long_count = count;
}",java:S100,
"public static NewExpression new_(Type type, Iterable<? extends Expression> arguments, @Nullable Iterable<? extends MemberDeclaration> memberDeclarations){
    return new NewExpression(type, toList(arguments), memberDeclarations == null ? null : toList(memberDeclarations));
}",java:S100,
"private static void _initOperationDesc2(){
    org.apache.axis.description.OperationDesc oper;
    org.apache.axis.description.ParameterDesc param;
    oper = new org.apache.axis.description.OperationDesc();
    oper.setName(""cambiaStatoRichiesta"");
    param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName("""", ""in0""), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(""urn:stadocStadoc"", ""RequestCambiaStatoRichiesta""), it.csi.conam.conambl.integration.beans.RequestCambiaStatoRichiesta.class, false, false);
    oper.addParameter(param);
    oper.setReturnType(new javax.xml.namespace.QName(""urn:stadocStadoc"", ""ResponseCambiaStatoRichiesta""));
    oper.setReturnClass(it.csi.conam.conambl.integration.beans.ResponseCambiaStatoRichiesta.class);
    oper.setReturnQName(new javax.xml.namespace.QName("""", ""cambiaStatoRichiestaReturn""));
    oper.setStyle(org.apache.axis.constants.Style.RPC);
    oper.setUse(org.apache.axis.constants.Use.ENCODED);
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.UnrecoverableException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""UnrecoverableException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.CSIException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""CSIException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.SystemException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""SystemException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.CambiaStatoRichiestaException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""CambiaStatoRichiestaException""), true));
    _operations[10] = oper;
    oper = new org.apache.axis.description.OperationDesc();
    oper.setName(""recuperaRiferimentoDocumentoFisico"");
    param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName("""", ""in0""), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(""urn:stadocStadoc"", ""RequestRecuperaRiferimentoDocumentoFisico""), it.csi.conam.conambl.integration.beans.RequestRecuperaRiferimentoDocumentoFisico.class, false, false);
    oper.addParameter(param);
    oper.setReturnType(new javax.xml.namespace.QName(""urn:stadocStadoc"", ""ResponseRecuperaRiferimentoDocumentoFisico""));
    oper.setReturnClass(it.csi.conam.conambl.integration.beans.ResponseRecuperaRiferimentoDocumentoFisico.class);
    oper.setReturnQName(new javax.xml.namespace.QName("""", ""recuperaRiferimentoDocumentoFisicoReturn""));
    oper.setStyle(org.apache.axis.constants.Style.RPC);
    oper.setUse(org.apache.axis.constants.Use.ENCODED);
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.UnrecoverableException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""UnrecoverableException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.CSIException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""CSIException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.SystemException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""SystemException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.RecuperaRiferimentoDocumentoFisicoException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""RecuperaRiferimentoDocumentoFisicoException""), true));
    _operations[11] = oper;
    oper = new org.apache.axis.description.OperationDesc();
    oper.setName(""ricercaDocumento"");
    param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName("""", ""in0""), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(""urn:stadocStadoc"", ""RequestRicercaDocumento""), it.csi.conam.conambl.integration.beans.RequestRicercaDocumento.class, false, false);
    oper.addParameter(param);
    oper.setReturnType(new javax.xml.namespace.QName(""urn:stadocStadoc"", ""ResponseRicercaDocumento""));
    oper.setReturnClass(it.csi.conam.conambl.integration.beans.ResponseRicercaDocumento.class);
    oper.setReturnQName(new javax.xml.namespace.QName("""", ""ricercaDocumentoReturn""));
    oper.setStyle(org.apache.axis.constants.Style.RPC);
    oper.setUse(org.apache.axis.constants.Use.ENCODED);
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.UnrecoverableException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""UnrecoverableException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.CSIException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""CSIException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.SystemException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""SystemException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.RicercaDocumentoException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""RicercaDocumentoException""), true));
    _operations[12] = oper;
    oper = new org.apache.axis.description.OperationDesc();
    oper.setName(""associaDocumentoFisico"");
    param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName("""", ""in0""), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(""urn:stadocStadoc"", ""RequestAssociaDocumentoFisico""), it.csi.conam.conambl.integration.beans.RequestAssociaDocumentoFisico.class, false, false);
    oper.addParameter(param);
    oper.setReturnType(new javax.xml.namespace.QName(""urn:stadocStadoc"", ""ResponseAssociaDocumentoFisico""));
    oper.setReturnClass(it.csi.conam.conambl.integration.beans.ResponseAssociaDocumentoFisico.class);
    oper.setReturnQName(new javax.xml.namespace.QName("""", ""associaDocumentoFisicoReturn""));
    oper.setStyle(org.apache.axis.constants.Style.RPC);
    oper.setUse(org.apache.axis.constants.Use.ENCODED);
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.UnrecoverableException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""UnrecoverableException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.CSIException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""CSIException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.SystemException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""SystemException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.AssociaDocumentoFisicoException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""AssociaDocumentoFisicoException""), true));
    _operations[13] = oper;
    oper = new org.apache.axis.description.OperationDesc();
    oper.setName(""aggiungiAllegato"");
    param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName("""", ""in0""), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(""urn:stadocStadoc"", ""RequestAggiungiAllegato""), it.csi.conam.conambl.integration.beans.RequestAggiungiAllegato.class, false, false);
    oper.addParameter(param);
    oper.setReturnType(new javax.xml.namespace.QName(""urn:stadocStadoc"", ""ResponseAggiungiAllegato""));
    oper.setReturnClass(it.csi.conam.conambl.integration.beans.ResponseAggiungiAllegato.class);
    oper.setReturnQName(new javax.xml.namespace.QName("""", ""aggiungiAllegatoReturn""));
    oper.setStyle(org.apache.axis.constants.Style.RPC);
    oper.setUse(org.apache.axis.constants.Use.ENCODED);
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.UnrecoverableException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""UnrecoverableException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.CSIException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""CSIException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.SystemException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""SystemException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.AggiungiAllegatoException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""AggiungiAllegatoException""), true));
    _operations[14] = oper;
    oper = new org.apache.axis.description.OperationDesc();
    oper.setName(""ricercaAllegato"");
    param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName("""", ""in0""), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(""urn:stadocStadoc"", ""RequestRicercaAllegato""), it.csi.conam.conambl.integration.beans.RequestRicercaAllegato.class, false, false);
    oper.addParameter(param);
    oper.setReturnType(new javax.xml.namespace.QName(""urn:stadocStadoc"", ""ResponseRicercaAllegato""));
    oper.setReturnClass(it.csi.conam.conambl.integration.beans.ResponseRicercaAllegato.class);
    oper.setReturnQName(new javax.xml.namespace.QName("""", ""ricercaAllegatoReturn""));
    oper.setStyle(org.apache.axis.constants.Style.RPC);
    oper.setUse(org.apache.axis.constants.Use.ENCODED);
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.UnrecoverableException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""UnrecoverableException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.CSIException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""CSIException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.SystemException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""SystemException""), true));
    oper.addFault(new org.apache.axis.description.FaultDesc(new javax.xml.namespace.QName(""http://tst-applogic.reteunitaria.piemonte.it/stadocApplStadocWsfad/services/stadocStadoc"", ""fault""), ""it.csi.conam.conambl.integration.stadoc.RicercaAllegatoException"", new javax.xml.namespace.QName(""urn:stadocStadoc"", ""RicercaAllegatoException""), true));
    _operations[15] = oper;
}",java:S100,
"@Nullable
private Frame peek_(){
    return stack.peek();
}",java:S100,
"@Nullable
public static Geometry ST_MinimumRectangle(Geometry geom){
    return new MinimumDiameter(geom).getMinimumRectangle();
}",java:S100,
"@Nullable
public static Geometry ST_ToMultiLine(Geometry geom){
    GeometryFactory factory = geom.getFactory();
    ArrayList<LineString> lines = new ArrayList<>();
    geom.apply((GeometryComponentFilter) inputGeom -> {
        if (inputGeom instanceof LineString) {
            lines.add(factory.createLineString(inputGeom.getCoordinates()));
        }
    });
    if (lines.isEmpty()) {
        return factory.createMultiLineString();
    } else {
        return factory.createMultiLineString(lines.toArray(new LineString[lines.size()]));
    }
}",java:S100,
"@Nullable
public static Geometry ST_LineFromWKB(ByteString wkt, int srid){
    Geometry geometry = ST_GeomFromWKB(wkt, srid);
    return geometry instanceof LineString ? geometry : null;
}",java:S100,
"public Integer getEnable_id_trans(){
    return enable_id_trans;
}",java:S100,
"@Nullable
public static Geometry ST_GeomFromWKB(ByteString wkb){
    return fromWkb(wkb);
}",java:S100,
"private Object _adaptToType(final Class<?> parameterType, final Object parameterValue){
    if (parameterValue == null) {
        return parameterType.isPrimitive() ? ClassUtil.defaultByPrimitive.get(parameterType) : null;
    }
    return CollectionSemantics.valueOf(parameterType).map(collectionType -> collectionType.unmodifiableCopyOf(parameterType, (Iterable<?>) parameterValue)).orElse(parameterValue);
}",java:S100,
"public static Geometry ST_PointN(Geometry geom, int n){
    Coordinate[] coordinates = geom.getCoordinates();
    int i = (coordinates.length + (n % coordinates.length)) % coordinates.length;
    return geom.getFactory().createPoint(coordinates[i]);
}",java:S100,
"@Nullable
public static Geometry ST_GeomFromGeoJSON(String geojson){
    return fromGeoJson(geojson);
}",java:S100,
"private String _write_the_first_line(S sequence){
    String locus;
    try {
        locus = sequence.getAccession().getID();
    } catch (Exception e) {
        locus = """";
    }
    if (locus.length() > 16) {
        throw new RuntimeException(""Locus identifier "" + locus + "" is too long"");
    }
    String units = """";
    String mol_type = """";
    if (sequence.getCompoundSet() instanceof DNACompoundSet) {
        units = ""bp"";
        mol_type = ""DNA"";
    } else if (sequence.getCompoundSet() instanceof RNACompoundSet) {
        units = ""bp"";
        mol_type = ""RNA"";
    } else if (sequence.getCompoundSet() instanceof AminoAcidCompoundSet) {
        units = ""aa"";
        mol_type = """";
    } else {
        throw new RuntimeException(""Need a DNACompoundSet, RNACompoundSet, or an AminoAcidCompoundSet"");
    }
    String division = _get_data_division(sequence);
    if (seqType != null) {
        division = seqType;
    }
    assert units.length() == 2;
    StringBuilder sb = new StringBuilder();
    Formatter formatter = new Formatter(sb, Locale.US);
    formatter.format(""LOCUS       %s %s %s    %s           %s %s"" + lineSep, StringManipulationHelper.padRight(locus, 16), StringManipulationHelper.padLeft(Integer.toString(sequence.getLength()), 11), units, StringManipulationHelper.padRight(mol_type, 6), division, _get_date(sequence));
    String output = formatter.toString();
    formatter.close();
    return output;
}",java:S100,
"private static ClassesShouldConjunction mixin_must_follow_naming_conventions(final Class<? extends Annotation> type, final String mixinMethodNameDefault, final Function<String, Predicate<JavaMethod>> function){
    return classes().that().areAnnotatedWith(type).should(new ArchCondition<JavaClass>(""follow mixin naming conventions"") {

        @Override
        public void check(final JavaClass item, final ConditionEvents events) {
            if (!item.isTopLevelClass() || item.isAnnotation()) {
                return;
            }
            val oneArgConstructorParameterTypeIfAny = item.getConstructors().stream().map(JavaCodeUnit::getRawParameterTypes).filter(rawParameterTypes -> rawParameterTypes.size() == 1).map(x -> x.get(0)).findFirst();
            if (!oneArgConstructorParameterTypeIfAny.isPresent()) {
                events.add(new SimpleConditionEvent(item, false, item.getSimpleName() + "" does not have a 1-arg constructor""));
                return;
            }
            final JavaClass parameterType = oneArgConstructorParameterTypeIfAny.get();
            val constructorClassName = parameterType.getSimpleName();
            val requiredPrefix = constructorClassName + ""_"";
            if (!item.getSimpleName().startsWith(requiredPrefix)) {
                events.add(new SimpleConditionEvent(item, false, item.getSimpleName() + "" should have a prefix of '"" + requiredPrefix + ""'""));
                return;
            }
            val mixinMethodName = item.tryGetAnnotationOfType(DomainObject.class).map(DomainObject::mixinMethod).orElse(mixinMethodNameDefault);
            val mixinMethodIfAny = item.getAllMethods().stream().filter(function.apply(mixinMethodName)).findAny();
            if (!mixinMethodIfAny.isPresent()) {
                events.add(new SimpleConditionEvent(item, false, String.format(""%s does not have a mixin method named '%s'"", item.getSimpleName(), mixinMethodName)));
            }
        }
    });
}",java:S100,
"private ResponseProtocollaDocumento avviaProtocollazione_Stadoc(List<CnmRAllegatoVerbale> cnmRAllegatoVerbaleList){
    CnmRAllegatoVerbale cnmRAllegatoVerbale = Iterables.tryFind(cnmRAllegatoVerbaleList, UtilsTipoAllegato.findAllegatoInCnmRAllegatoVerbaleByTipoAllegato(TipoAllegato.RAPPORTO_TRASMISSIONE)).orNull();
    if (cnmRAllegatoVerbale == null)
        throw new RuntimeException(""verbale di trasmissione non trovato"");
    CnmTAllegato cnmTAllegato = cnmRAllegatoVerbale.getCnmTAllegato();
    if (cnmTAllegato.getCnmDStatoAllegato().getIdStatoAllegato() != Constants.STATO_ALLEGATO_DA_PROTOCOLLARE_IN_ISTANTE_SUCCESSIVO)
        throw new RuntimeException(""Rapporto di trasmissione non Ã¨ nello stato corretto"");
    CnmTVerbale cnmTVerbale = cnmRAllegatoVerbale.getCnmTVerbale();
    if (cnmTAllegato.getIdIndex() == null)
        throw new RuntimeException(""documento non trovato su index"");
    ResponseProtocollaDocumento responseProtocollaDocumento = stadocServiceFacade.protocollaDocumentoFisico(utilsDoqui.createOrGetfolder(cnmTVerbale), null, cnmTAllegato.getNomeFile(), utilsDoqui.createIdEntitaFruitore(cnmTVerbale, cnmTAllegato.getCnmDTipoAllegato()), true, false, utilsDoqui.getSoggettoActa(cnmTVerbale), utilsDoqui.getRootActa(cnmTVerbale), cnmTAllegato.getCnmDTipoAllegato().getIdTipoAllegato(), StadocServiceFacade.TIPOLOGIA_DOC_ACTA_MASTER_INGRESSO_CON_ALLEGATI, null, cnmTAllegato.getIdIndex());
    cnmTAllegato.setCnmDStatoAllegato(cnmDStatoAllegatoRepository.findOne(Constants.STATO_ALLEGATO_PROTOCOLLATO));
    cnmTAllegato.setIdActa(responseProtocollaDocumento.getIdDocumento());
    cnmTAllegato.setIdIndex(null);
    Timestamp now = utilsDate.asTimeStamp(LocalDateTime.now());
    cnmTAllegato.setDataOraUpdate(now);
    List<CnmTAllegato> cnmTAllegatoList = new ArrayList<>();
    CnmDStatoAllegato cnmDStatoAllegato = cnmDStatoAllegatoRepository.findOne(Constants.STATO_AVVIA_SPOSTAMENTO_ACTA);
    for (CnmRAllegatoVerbale cnmRAllegatoVerbaleT : cnmRAllegatoVerbaleList) {
        CnmTAllegato cnmTAllegatoT = cnmRAllegatoVerbaleT.getCnmTAllegato();
        boolean rapportoTrasmissione = cnmTAllegatoT.getCnmDTipoAllegato().getIdTipoAllegato() == TipoAllegato.RAPPORTO_TRASMISSIONE.getId();
        boolean statoDaProtocollareInAcquisizione = cnmTAllegatoT.getCnmDStatoAllegato().getIdStatoAllegato() == Constants.STATO_ALLEGATO_DA_PROTOCOLLARE_IN_ISTANTE_SUCCESSIVO;
        if (!rapportoTrasmissione && statoDaProtocollareInAcquisizione) {
            cnmTAllegatoT.setCnmDStatoAllegato(cnmDStatoAllegato);
            cnmTAllegatoList.add(cnmTAllegatoT);
        }
    }
    cnmTAllegatoList.add(cnmTAllegato);
    cnmTAllegatoRepository.save(cnmTAllegatoList);
    return responseProtocollaDocumento;
}",java:S100,
"@Nullable
private static String password_bcrypt(String passwd){
    return BCrypt.hashpw(passwd, BCrypt.gensalt(bCryptGensaltLog2Rounds));
}",java:S100,
"private void TaskDefinitionUpdateValid(TaskDefinition taskDefinitionOriginal, TaskDefinition taskDefinitionUpdate){
    if (processService.isTaskOnline(taskDefinitionOriginal.getCode()) && taskDefinitionOriginal.getFlag() == Flag.YES) {
        if (taskDefinitionOriginal.getTaskExecuteType() != TaskExecuteType.STREAM) {
            throw new ServiceException(Status.NOT_SUPPORT_UPDATE_TASK_DEFINITION);
        }
    }
    if (taskDefinitionOriginal.equals(taskDefinitionUpdate)) {
        throw new ServiceException(Status.TASK_DEFINITION_NOT_CHANGE, taskDefinitionOriginal.getCode());
    }
    Integer version = taskDefinitionLogMapper.queryMaxVersionForDefinition(taskDefinitionOriginal.getCode());
    if (version == null || version == 0) {
        throw new ServiceException(Status.DATA_IS_NOT_VALID, taskDefinitionOriginal.getCode());
    }
}",java:S100,
" void _setBottomTypeCode(BitSet bottomTypeCode){
    ((TraitTypeMap) _getTraitMap()).setBottomCode(bottomTypeCode);
}",java:S100,
"public static Geometry ST_Simplify(Geometry geom, BigDecimal distance){
    DouglasPeuckerSimplifier simplifier = new DouglasPeuckerSimplifier(geom);
    simplifier.setDistanceTolerance(distance.doubleValue());
    return simplifier.getResultGeometry();
}",java:S100,
"private D _makeParent(D left, D right){
    recalculations++;
    return makeParent(left, right);
}",java:S100,
" static DescribedPredicate<JavaAnnotation<?>> Table_schema(){
    return new DescribedPredicate<JavaAnnotation<?>>(""@Table(schema=...)"") {

        @Override
        public boolean test(final JavaAnnotation<?> javaAnnotation) {
            if (!javaAnnotation.getRawType().isAssignableTo(Table.class)) {
                return false;
            }
            val properties = javaAnnotation.getProperties();
            val schema = properties.get(""schema"");
            return schema instanceof String && ((String) schema).length() > 0;
        }
    };
}",java:S100,
" boolean _canAcceptInternal(){
    return !hadCommFailure && !disabled && (numSchedulableTasks == -1 || ((numSchedulableTasks - numScheduledTasks) > 0));
}",java:S100,
"public static long pop_intersect(long[] arr1, long[] arr2, int wordOffset, int numWords){
    long popCount = 0;
    for (int i = wordOffset, end = wordOffset + numWords; i < end; ++i) {
        popCount += Long.bitCount(arr1[i] & arr2[i]);
    }
    return popCount;
}",java:S100,
"public static final float PID(String seq1, String seq2){
    return PID(seq1, seq2, 0, seq1.length());
}",java:S100,
"private Enumerator<Object> getSearchResults_(String search, Map<String, String> otherArgs, List<String> wantedFields, SearchResultListener srl){
    String searchUrl = String.format(Locale.ROOT, ""%s://%s:%d/services/search/jobs/export"", url.getProtocol(), url.getHost(), url.getPort());
    StringBuilder data = new StringBuilder();
    Map<String, String> args = new LinkedHashMap<>();
    if (otherArgs != null) {
        args.putAll(otherArgs);
    }
    args.put(""search"", search);
    args.put(""output_mode"", ""csv"");
    args.put(""preview"", ""0"");
    args.put(""check_connection"", ""0"");
    appendURLEncodedArgs(data, args);
    try {
        InputStream in = post(searchUrl, data, requestHeaders, 10000, 1800000);
        if (srl == null) {
            return new SplunkResultEnumerator(in, wantedFields);
        } else {
            parseResults(in, srl);
            return null;
        }
    } catch (Exception e) {
        StringWriter sw = new StringWriter();
        e.printStackTrace(new PrintWriter(sw));
        LOGGER.warn(""{}\n{}"", e.getMessage(), sw);
        return srl == null ? Linq4j.emptyEnumerator() : null;
    }
}",java:S100,
"public static int ST_CoordDim(Geometry geom){
    Coordinate coordinate = geom.getCoordinate();
    if (coordinate != null && !Double.isNaN(coordinate.getZ())) {
        return 3;
    }
    return 2;
}",java:S100,
"public static boolean ST_Disjoint(Geometry geom1, Geometry geom2){
    return geom1.disjoint(geom2);
}",java:S100,
"private String _insdc_location_string_ignoring_strand_and_subfeatures(AbstractLocation sequenceLocation, int record_length){
    String ref = """";
    if (!sequenceLocation.getStart().isUncertain() && !sequenceLocation.getEnd().isUncertain() && sequenceLocation.getStart() == sequenceLocation.getEnd()) {
        if (sequenceLocation.getEnd().getPosition() == record_length) {
            StringBuilder sb = new StringBuilder();
            Formatter formatter = new Formatter(sb, Locale.US);
            formatter.format(""%s%d^1"", ref, record_length);
            String output = formatter.toString();
            formatter.close();
            return output;
        } else {
            StringBuilder sb = new StringBuilder();
            Formatter formatter = new Formatter(sb, Locale.US);
            formatter.format(""%s%d^%d"", ref, sequenceLocation.getStart().getPosition(), sequenceLocation.getEnd().getPosition());
            String output = formatter.toString();
            formatter.close();
            return output;
        }
    }
    if (!sequenceLocation.getStart().isUncertain() && !sequenceLocation.getEnd().isUncertain() && sequenceLocation.getStart().getPosition() + 1 == sequenceLocation.getEnd().getPosition()) {
        StringBuilder sb = new StringBuilder();
        Formatter formatter = new Formatter(sb, Locale.US);
        formatter.format(""%s%d"", ref, sequenceLocation.getEnd().getPosition());
        String output = formatter.toString();
        formatter.close();
        return output;
    } else if (sequenceLocation.getStart().isUnknown() || sequenceLocation.getEnd().isUnknown()) {
        if (sequenceLocation.getStart().isUnknown() && sequenceLocation.getEnd().isUnknown()) {
            throw new RuntimeException(""Feature with unknown location"");
        } else if (sequenceLocation.getStart().isUnknown()) {
            StringBuilder sb = new StringBuilder();
            Formatter formatter = new Formatter(sb, Locale.US);
            formatter.format(""%s<%d..%s"", ref, sequenceLocation.getEnd().getPosition(), _insdc_feature_position_string(sequenceLocation.getEnd()));
            String output = formatter.toString();
            formatter.close();
            return output;
        } else {
            StringBuilder sb = new StringBuilder();
            Formatter formatter = new Formatter(sb, Locale.US);
            formatter.format(""%s%s..>%d"", ref, _insdc_feature_position_string(sequenceLocation.getStart()), sequenceLocation.getStart().getPosition());
            String output = formatter.toString();
            formatter.close();
            return output;
        }
    } else {
        String start = _insdc_feature_position_string(sequenceLocation.getStart());
        String end = _insdc_feature_position_string(sequenceLocation.getEnd());
        if (sequenceLocation.isPartial()) {
            if (sequenceLocation.isPartialOn5prime()) {
                start = ""<"" + start;
            }
            if (sequenceLocation.isPartialOn3prime()) {
                end = "">"" + end;
            }
        }
        return ref + start + "".."" + end;
    }
}",java:S100,
"@Nullable
public static Geometry ST_PointFromWKB(ByteString wkb, int srid){
    Geometry geometry = ST_GeomFromWKB(wkb, srid);
    return geometry instanceof Point ? geometry : null;
}",java:S100,
"public static Geometry ST_EndPoint(Geometry geom){
    return ST_PointN(geom, -1);
}",java:S100,
"public static Geometry ST_MakeEnvelope(BigDecimal xMin, BigDecimal yMin, BigDecimal xMax, BigDecimal yMax, int srid){
    Geometry geom = ST_GeomFromText(""POLYGON(("" + xMin + "" "" + yMin + "", "" + xMin + "" "" + yMax + "", "" + xMax + "" "" + yMax + "", "" + xMax + "" "" + yMin + "", "" + xMin + "" "" + yMin + ""))"", srid);
    return Objects.requireNonNull(geom, ""geom"");
}",java:S100,
"public static int MurmurHash3_fmix(int k){
    k ^= k >>> 16;
    k *= 0x85ebca6b;
    k ^= k >>> 13;
    k *= 0xc2b2ae35;
    k ^= k >>> 16;
    return k;
}",java:S100,
"public static GotoStatement return_(LabelTarget labelTarget){
    return return_(labelTarget, (Expression) null);
}",java:S100,
"public void CommitTransaction(){
    mapValues.commitDatabaseBatchWrite();
}",java:S100,
"public static SwitchStatement switch_(Type type, Expression switchValue, Expression defaultBody, Method method, SwitchCase... cases){
    return switch_(type, switchValue, defaultBody, method, toList(cases));
}",java:S100,
" static long MurmurHash3_x64_64(LoadStrategy<R> loader, R resource, long offset, int len){
    return MurmurHash3_x64_64(loader, resource, offset, len, DEFAULT_MURMUR_SEED);
}",java:S100,
"public static StatelessIntHash murmur3_32(){
    return Hashes.getStatelessInt(new MurmurHash3Parameters(MurmurHash3Variant.X86_32));
}",java:S100,
"public static double ST_Distance(Geometry geom1, Geometry geom2){
    return geom1.distance(geom2);
}",java:S100,
"private PreparedResult prepare_(Supplier<RelNode> fn, RelDataType resultType){
    Class runtimeContextClass = Object.class;
    init(runtimeContextClass);
    final RelNode rel = fn.get();
    final RelDataType rowType = rel.getRowType();
    final List<Pair<Integer, String>> fields = Pair.zip(ImmutableIntList.identity(rowType.getFieldCount()), rowType.getFieldNames());
    final RelCollation collation = rel instanceof Sort ? ((Sort) rel).collation : RelCollations.EMPTY;
    RelRoot root = new RelRoot(rel, resultType, SqlKind.SELECT, fields, collation, new ArrayList<>());
    if (timingTracer != null) {
        timingTracer.traceTime(""end sql2rel"");
    }
    final RelDataType jdbcType = makeStruct(rexBuilder.getTypeFactory(), resultType);
    fieldOrigins = Collections.nCopies(jdbcType.getFieldCount(), null);
    parameterRowType = rexBuilder.getTypeFactory().builder().build();
    root = root.withRel(flattenTypes(root.rel, true));
    root = trimUnusedFields(root);
    final List<Materialization> materializations = ImmutableList.of();
    final List<CalciteSchema.LatticeEntry> lattices = ImmutableList.of();
    root = optimize(root, materializations, lattices);
    if (timingTracer != null) {
        timingTracer.traceTime(""end optimization"");
    }
    return implement(root);
}",java:S100,
"public static Geometry ST_RemoveHoles(Geometry geom){
    RemoveHoleTransformer transformer = new RemoveHoleTransformer();
    return transformer.transform(geom);
}",java:S100,
"public static Geometry ST_PrecisionReducer(Geometry geometry, BigDecimal decimal){
    double scale = Math.pow(10, decimal.doubleValue());
    PrecisionModel precisionModel = new PrecisionModel(scale);
    GeometryPrecisionReducer precisionReducer = new GeometryPrecisionReducer(precisionModel);
    return precisionReducer.reduce(geometry);
}",java:S100,
"private void print_line(final int indent, final CharSequence chars){
    final long counterValue = counter.longValue();
    for (int i = 0; i < indent; ++i) {
        out.print(indentLiteral);
    }
    final String message = ""["" + label + "" "" + counterValue + ""] "" + chars;
    out.println(String.format(emphasisFormat, message));
}",java:S100,
"@Nullable
public static Geometry ST_MPolyFromText(String wkt, int srid){
    Geometry geometry = ST_GeomFromWKT(wkt, srid);
    return geometry instanceof MultiPolygon ? geometry : null;
}",java:S100,
"public void setDeflate_hint(final boolean deflate_hint){
    this.deflate_hint = deflate_hint;
}",java:S100,
"public void graceful_stop(){
    verifyStarted();
    hiveServer2.graceful_stop();
}",java:S100,
"@Nullable
public static Geometry ST_GeomFromWKT(String wkt, int srid){
    Geometry geometry = fromWkt(wkt);
    geometry.setSRID(srid);
    return geometry;
}",java:S100,
"public static int ST_NPoints(Geometry geom){
    return ST_NumPoints(geom);
}",java:S100,
"private static Comparable case_(List<Comparable> values){
    final int size;
    final Comparable elseValue;
    if (values.size() % 2 == 0) {
        size = values.size();
        elseValue = N;
    } else {
        size = values.size() - 1;
        elseValue = Util.last(values);
    }
    for (int i = 0; i < size; i += 2) {
        if (values.get(i).equals(true)) {
            return values.get(i + 1);
        }
    }
    return elseValue;
}",java:S100,
"public static GotoStatement break_(LabelTarget labelTarget, Expression expression, Type type){
    throw Extensions.todo();
}",java:S100,
"private static Enumerable<TResult> groupByMultiple_(final Map<TKey, TAccumulate> map, Enumerable<TSource> enumerable, List<Function1<TSource, TKey>> keySelectors, Function0<TAccumulate> accumulatorInitializer, Function2<TAccumulate, TSource, TAccumulate> accumulatorAdder, final Function2<TKey, TAccumulate, TResult> resultSelector){
    try (Enumerator<TSource> os = enumerable.enumerator()) {
        while (os.moveNext()) {
            for (Function1<TSource, TKey> keySelector : keySelectors) {
                TSource o = os.current();
                TKey key = keySelector.apply(o);
                @SuppressWarnings(""argument.type.incompatible"")
                TAccumulate accumulator = map.get(key);
                if (accumulator == null) {
                    accumulator = accumulatorInitializer.apply();
                    accumulator = accumulatorAdder.apply(accumulator, o);
                    map.put(key, accumulator);
                } else {
                    TAccumulate accumulator0 = accumulator;
                    accumulator = accumulatorAdder.apply(accumulator, o);
                    if (accumulator != accumulator0) {
                        map.put(key, accumulator);
                    }
                }
            }
        }
    }
    return new LookupResultEnumerable<>(map, resultSelector);
}",java:S100,
"public boolean have_file_modtime(){
    return have_file_modtime;
}",java:S100,
"private static void ST_MakeGridPoints(final Geometry geom, final BigDecimal deltaX, final BigDecimal deltaY){
}",java:S100,
"public static boolean ST_IsClosed(Geometry geom){
    if (geom instanceof LineString) {
        return ((LineString) geom).isClosed();
    }
    if (geom instanceof MultiLineString) {
        return ((MultiLineString) geom).isClosed();
    }
    return false;
}",java:S100,
"public static Geometry ST_Rotate(Geometry geom, BigDecimal angle){
    AffineTransformation transformation = new AffineTransformation();
    transformation.rotate(angle.doubleValue());
    return transformation.transform(geom);
}",java:S100,
" static DescribedPredicate<JavaAnnotation<?>> Table_uniqueConstraints(){
    return new DescribedPredicate<JavaAnnotation<?>>(""@Table(uniqueConstraints=...)"") {

        @Override
        public boolean test(final JavaAnnotation<?> javaAnnotation) {
            if (!javaAnnotation.getRawType().isAssignableTo(Table.class)) {
                return false;
            }
            val properties = javaAnnotation.getProperties();
            val uniqueConstraints = properties.get(""uniqueConstraints"");
            return uniqueConstraints instanceof JavaAnnotation[] && ((JavaAnnotation<?>[]) uniqueConstraints).length > 0;
        }
    };
}",java:S100,
"@Nullable
public static Geometry ST_MPointFromText(String wkt){
    Geometry geometry = ST_GeomFromWKT(wkt);
    return geometry instanceof MultiPoint ? geometry : null;
}",java:S100,
"private void ABITraceInit(BufferedInputStream bis) throws IOException{
    byte[] bytes = null;
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    int b;
    while ((b = bis.read()) >= 0) {
        baos.write(b);
    }
    bis.close();
    baos.close();
    bytes = baos.toByteArray();
    initData(bytes);
}",java:S100,
"public static JobID StringToJobID(String id) throws BadParam{
    try {
        return JobID.forName(id);
    } catch (IllegalArgumentException e) {
        throw new BadParam(e.getMessage());
    }
}",java:S100,
"public static DefaultExpression default_(){
    throw Extensions.todo();
}",java:S100,
"public static T MAX_GENERIC(T a, T b, Comparator<T> f){
    return f.compare(a, b) > 0 ? a : b;
}",java:S100,
"public boolean isBit1_accessTimePresent(){
    return bit1_accessTimePresent;
}",java:S100,
"public void kBaseInternal_removeFunction(InternalKnowledgePackage pkg, String functionName){
    Function function = pkg.getFunctions().get(functionName);
    if (function == null) {
        throw new IllegalArgumentException(""function name '"" + functionName + ""' does not exist in the Package '"" + pkg.getName() + ""'."");
    }
    pkg.removeFunction(functionName);
    if (rootClassLoader instanceof ProjectClassLoader) {
        ((ProjectClassLoader) rootClassLoader).undefineClass(function.getClassName());
    }
    addReloadDialectDatas(pkg.getDialectRuntimeRegistry());
}",java:S100,
"public int PrevTalent(){
    return prevTalent;
}",java:S100,
"public void setEnable_id_trans(Integer enable_id_trans){
    this.enable_id_trans = enable_id_trans;
}",java:S100,
"private void _registerAllocationInHostMap(String host, Map<String, AtomicInteger> hostMap){
    AtomicInteger val = hostMap.get(host);
    if (val == null) {
        val = new AtomicInteger(0);
        hostMap.put(host, val);
    }
    val.incrementAndGet();
}",java:S100,
"public void setFile_count(final int file_count){
    this.file_count = file_count;
}",java:S100,
"private static int compare_(Object o0, Object o1){
    if (o0 instanceof Comparable) {
        return compare((Comparable) o0, (Comparable) o1);
    }
    return compare((List) o0, (List) o1);
}",java:S100,
"private OverCall orderBy_(ImmutableList<RexFieldCollation> sortKeys){
    return new OverCallImpl(op, distinct, operands, ignoreNulls, alias, partitionKeys, sortKeys, rows, lowerBound, upperBound, nullWhenCountZero, allowPartial);
}",java:S100,
"public static boolean ST_Equals(Geometry geom1, Geometry geom2){
    return geom1.equals(geom2);
}",java:S100,
"public static GotoStatement goto_(LabelTarget labelTarget){
    throw Extensions.todo();
}",java:S100,
"private List<DocumentoScaricatoVO> downloadAllegatoById_Doqui(Integer id){
    if (id == null)
        throw new IllegalArgumentException(""id non valorizzato"");
    CnmTAllegato cnmTAllegato = cnmTAllegatoRepository.findOne(id);
    cnmTAllegato = validateRequestAllegato(cnmTAllegato);
    if (cnmTAllegato.getIdIndex() != null) {
        ResponseRicercaAllegato responseIndex = doquiServiceFacade.recuperaDocumentoIndex(cnmTAllegato.getIdIndex(), cnmTAllegato.getCnmDTipoAllegato().getIndexType());
        if (responseIndex != null && responseIndex.getDocumento() != null && responseIndex.getDocumento().getFile() != null) {
            List<DocumentoScaricatoVO> response = new ArrayList<DocumentoScaricatoVO>();
            DocumentoScaricatoVO doc = new DocumentoScaricatoVO();
            doc.setFile(responseIndex.getDocumento().getFile());
            response.add(doc);
            return response;
        } else {
            throw new RuntimeException(""documento non trovato su index"");
        }
    } else if (cnmTAllegato.getIdActa() != null) {
        ResponseRicercaDocumentoMultiplo response = doquiServiceFacade.recuperaDocumentoActa(cnmTAllegato.getIdActa());
        if (response != null && response.getSottoDocumenti() != null) {
            if (Constants.DOCUMENTI_CREATI_DA_CONAM.contains(cnmTAllegato.getCnmDTipoAllegato().getIdTipoAllegato()) && !cnmTAllegato.isFlagDocumentoPregresso()) {
                for (int i = 0; i < response.getSottoDocumenti().size(); i++) {
                    Documento doc = response.getSottoDocumenti().get(i);
                    doc.setFile(addProtocolloToDocument(doc.getFile(), cnmTAllegato.getNumeroProtocollo(), cnmTAllegato.getCnmDTipoAllegato().getIdTipoAllegato()));
                    response.getSottoDocumenti().set(i, doc);
                }
            }
            List<DocumentoScaricatoVO> docScaricatoVOList = new ArrayList<DocumentoScaricatoVO>();
            for (Documento doc : response.getSottoDocumenti()) {
                DocumentoScaricatoVO docScaricatoVO = new DocumentoScaricatoVO();
                docScaricatoVO.setFile(doc.getFile());
                docScaricatoVO.setNomeFile(doc.getNomeFile());
                docScaricatoVO.setObjectIdDocumentoFisico(doc.getObjectIdDocumentoFisico());
                docScaricatoVOList.add(docScaricatoVO);
            }
            return docScaricatoVOList;
        } else {
            throw new RuntimeException(""documento non trovato su acta per parola chiave"");
        }
    } else if (cnmTAllegato.getObjectidSpostamentoActa() != null) {
        List<DocumentoScaricatoVO> response = downloadAllegatoByObjectIdDocumento(cnmTAllegato.getObjectidSpostamentoActa());
        if (response != null) {
            return response;
        } else {
            throw new RuntimeException(""documento non trovato su acta per objectIdDocumento"");
        }
    } else {
        throw new RuntimeException(""idIndex, idActa e objectIdSpostamentoActa non valorizzati"");
    }
}",java:S100,
"public static Geometry ST_Rotate(Geometry geom, BigDecimal angle, Geometry origin){
    if (!(origin instanceof Point)) {
        throw new RuntimeException(""The origin must be a point"");
    }
    Point point = (Point) origin;
    AffineTransformation transformation = new AffineTransformation();
    transformation.rotate(angle.doubleValue(), point.getX(), point.getY());
    return transformation.transform(geom);
}",java:S100,
"public static GotoStatement break_(LabelTarget labelTarget){
    return new GotoStatement(GotoExpressionKind.Break, null, null);
}",java:S100,
"private void _openTag() throws IOException{
    if (isOpeningTag) {
        writer.println('>');
        afterNewline = true;
    }
    if (afterNewline) {
        writeIndent();
    }
    indent++;
    isOpeningTag = true;
    afterNewline = false;
    namespaceBindings.add(null);
}",java:S100,
"public float getDefaultValueAs_float(){
    try {
        return initExpr == null ? 0.0f : Float.parseFloat(initExpr);
    } catch (NumberFormatException nfe) {
        return StringUtils.isEmpty(initExpr) ? 0.0f : CoreComponentsBuilder.get().getMVELExecutor().eval(initExpr, Float.class);
    }
}",java:S100,
"@Nullable
public static Geometry ST_MakePolygon(Geometry shell, Geometry hole0, Geometry hole1, Geometry hole2, Geometry hole3, Geometry hole4, Geometry hole5, Geometry hole6, Geometry hole7, Geometry hole8){
    return makePolygon(shell, hole0, hole1, hole2, hole3, hole4, hole5, hole6, hole7, hole8);
}",java:S100,
"@Nullable
public static String ST_AsText(Geometry geometry){
    return ST_AsWKT(geometry);
}",java:S100,
" static ClassesShouldConjunction everyJpa_Entity_must_have_a_field_named_and_annotated(final String fieldName, final Class<? extends Annotation> annotationClass){
    final String fieldAnnotation = annotationClass.getSimpleName();
    return classes().that().areAnnotatedWith(Entity.class).should(new ArchCondition<JavaClass>(String.format(""have a field named '%s' annotated with '@%s'"", fieldName, fieldAnnotation)) {

        @Override
        public void check(final JavaClass javaClass, final ConditionEvents conditionEvents) {
            val javaFieldIfAny = javaClass.getAllFields().stream().filter(x -> Objects.equals(x.getName(), fieldName)).findAny();
            if (!javaFieldIfAny.isPresent()) {
                conditionEvents.add(new SimpleConditionEvent(javaClass, false, String.format(""%s does not have a field named '%s'"", javaClass.getSimpleName(), fieldName)));
                return;
            }
            val javaField = javaFieldIfAny.get();
            if (!javaField.isAnnotatedWith(annotationClass)) {
                conditionEvents.add(new SimpleConditionEvent(javaClass, false, String.format(""%s has field named '%s' but it is not annotated with '@%s'"", javaClass.getSimpleName(), fieldName, fieldAnnotation)));
            }
        }
    });
}",java:S100,
"public static final XComponentContext defaultBootstrap_InitialComponentContext(String ini_file, Map<String, String> bootstrap_parameters) throws Exception{
    String[] pairs = null;
    if (null != bootstrap_parameters) {
        pairs = new String[2 * bootstrap_parameters.size()];
        int n = 0;
        for (Map.Entry<String, String> bootstrap_parameter : bootstrap_parameters.entrySet()) {
            pairs[n++] = bootstrap_parameter.getKey();
            pairs[n++] = bootstrap_parameter.getValue();
        }
    }
    if (!M_LOADED_JUH) {
        if (""The Android Project"".equals(System.getProperty(""java.vendor""))) {
            boolean disable_dynloading = false;
            try {
                System.loadLibrary(""lo-bootstrap"");
            } catch (UnsatisfiedLinkError e) {
                disable_dynloading = true;
            }
            if (!disable_dynloading) {
                NativeLibraryLoader.loadLibrary(Bootstrap.class.getClassLoader(), ""juh"");
            }
        } else {
            NativeLibraryLoader.loadLibrary(Bootstrap.class.getClassLoader(), ""juh"");
        }
        M_LOADED_JUH = true;
    }
    return UnoRuntime.queryInterface(XComponentContext.class, cppuhelper_bootstrap(ini_file, pairs, Bootstrap.class.getClassLoader()));
}",java:S100,
"private String RemoveResourceFromResourceList(String stringToDelete, String taskParameter, boolean isDir){
    Map<String, Object> taskParameters = JSONUtils.parseObject(taskParameter, new TypeReference<Map<String, Object>>() {
    });
    if (taskParameters.containsKey(""resourceList"")) {
        String resourceListStr = JSONUtils.toJsonString(taskParameters.get(""resourceList""));
        List<ResourceInfo> resourceInfoList = JSONUtils.toList(resourceListStr, ResourceInfo.class);
        List<ResourceInfo> updatedResourceInfoList;
        if (isDir) {
            String stringToDeleteWSeparator = stringToDelete + FOLDER_SEPARATOR;
            updatedResourceInfoList = resourceInfoList.stream().filter(Objects::nonNull).filter(resourceInfo -> !resourceInfo.getResourceName().startsWith(stringToDeleteWSeparator)).collect(Collectors.toList());
        } else {
            updatedResourceInfoList = resourceInfoList.stream().filter(Objects::nonNull).filter(resourceInfo -> !resourceInfo.getResourceName().equals(stringToDelete)).collect(Collectors.toList());
        }
        taskParameters.put(""resourceList"", updatedResourceInfoList);
        return JSONUtils.toJsonString(taskParameters);
    }
    return taskParameter;
}",java:S100,
"public static GotoStatement break_(LabelTarget labelTarget, Type type){
    throw Extensions.todo();
}",java:S100,
"public static ArchRule every_jdo_PersistenceCapable_must_implement_Comparable(){
    return classes().that().areAnnotatedWith(javax.jdo.annotations.PersistenceCapable.class).should().implement(Comparable.class);
}",java:S100,
"public static ArchRule every_Repository_must_follow_naming_conventions(){
    return classes().that().areAnnotatedWith(Repository.class).should().haveNameMatching("".*Repository"");
}",java:S100,
"public static ArchRule every_jdo_PersistenceCapable_must_be_annotated_with_Version(){
    return classes().that().areAnnotatedWith(javax.jdo.annotations.PersistenceCapable.class).and(not(areSubtypeEntities())).should().beAnnotatedWith(javax.jdo.annotations.Version.class);
}",java:S100,
"public byte[] crypt_raw(byte[] password, byte[] salt, int log_rounds, int[] cdata){
    int rounds, i, j;
    int clen = cdata.length;
    byte[] ret;
    if (log_rounds < 4 || log_rounds > 30)
        throw new IllegalArgumentException(""Bad number of rounds"");
    rounds = 1 << log_rounds;
    if (salt.length != BCRYPT_SALT_LEN)
        throw new IllegalArgumentException(""Bad salt length"");
    init_key();
    ekskey(salt, password);
    for (i = 0; i != rounds; i++) {
        key(password);
        key(salt);
    }
    for (i = 0; i < 64; i++) {
        for (j = 0; j < (clen >> 1); j++) encipher(cdata, j << 1);
    }
    ret = new byte[clen * 4];
    for (i = 0, j = 0; i < clen; i++) {
        ret[j++] = (byte) ((cdata[i] >> 24) & 0xff);
        ret[j++] = (byte) ((cdata[i] >> 16) & 0xff);
        ret[j++] = (byte) ((cdata[i] >> 8) & 0xff);
        ret[j++] = (byte) (cdata[i] & 0xff);
    }
    return ret;
}",java:S100,
"public static char CONST(final char v){
    return v;
}",java:S100,
"public static boolean ST_Intersects(Geometry geom1, Geometry geom2){
    return geom1.intersects(geom2);
}",java:S100,
"public static int ST_NumGeometries(Geometry geom){
    return geom.getNumGeometries();
}",java:S100,
"public boolean have_code_flags_hi(){
    return have_code_flags_hi;
}",java:S100,
"public static Geometry ST_Densify(Geometry geom, BigDecimal tolerance){
    return Densifier.densify(geom, tolerance.doubleValue());
}",java:S100,
"public void setCp_Signature_count(final int count){
    cp_Signature_count = count;
}",java:S100,
"@Nullable
public static ByteString ST_AsBinary(Geometry geometry){
    return ST_AsWKB(geometry);
}",java:S100,
"public static String ST_GeometryType(Geometry geom){
    return SpatialType.fromGeometry(geom).name();
}",java:S100,
"public static ArchRule every_injected_field_of_jdo_PersistenceCapable_must_be_annotated_with_NotPersistent(){
    return fields().that().areDeclaredInClassesThat(areEntities()).and().areAnnotatedWith(Inject.class).should().beAnnotatedWith(NotPersistent.class);
}",java:S100,
"public static IgniteDistribution _distribution(RelNode rel, RelMetadataQuery mq){
    assert mq instanceof RelMetadataQueryEx;
    return (IgniteDistribution) mq.distribution(rel);
}",java:S100,
"@Nullable
public static Geometry ST_MinimumDiameter(Geometry geom){
    return new MinimumDiameter(geom).getDiameter();
}",java:S100,
"public static CompletableFuture<Void> Void(){
    return value(null);
}",java:S100,
"private static String encode_base64(byte[] d, int len) throws IllegalArgumentException{
    int off = 0;
    StringBuffer rs = new StringBuffer();
    int c1, c2;
    if (len <= 0 || len > d.length)
        throw new IllegalArgumentException(""Invalid len"");
    while (off < len) {
        c1 = d[off++] & 0xff;
        rs.append(base64_code[(c1 >> 2) & 0x3f]);
        c1 = (c1 & 0x03) << 4;
        if (off >= len) {
            rs.append(base64_code[c1 & 0x3f]);
            break;
        }
        c2 = d[off++] & 0xff;
        c1 |= (c2 >> 4) & 0x0f;
        rs.append(base64_code[c1 & 0x3f]);
        c1 = (c2 & 0x0f) << 2;
        if (off >= len) {
            rs.append(base64_code[c1 & 0x3f]);
            break;
        }
        c2 = d[off++] & 0xff;
        c1 |= (c2 >> 6) & 0x03;
        rs.append(base64_code[c1 & 0x3f]);
        rs.append(base64_code[c2 & 0x3f]);
    }
    return rs.toString();
}",java:S100,
"private void check3AccessLink1_2(Context context, AccessLink accessLink, ValidationParameters parameters){
    StopArea start = accessLink.getStopArea();
    AccessPoint end = accessLink.getAccessPoint();
    if (start == null || end == null) {
        return;
    }
    if (!start.hasCoordinates() || !end.hasCoordinates()) {
        return;
    }
    long distanceMax = parameters.getInterAccessLinkDistanceMax();
    double distance = quickDistance(start, end);
    if (distance > distanceMax) {
        DataLocation location = buildLocation(context, accessLink);
        DataLocation startTarget = buildLocation(context, start);
        DataLocation endTarget = buildLocation(context, end);
        ValidationReporter reporter = ValidationReporter.Factory.getInstance();
        reporter.addCheckPointReportError(context, ACCESS_LINK_1, location, Integer.valueOf((int) distance).toString(), Integer.valueOf((int) distanceMax).toString(), startTarget, endTarget);
    } else {
        if (accessLink.getLinkDistance() != null && !accessLink.getLinkDistance().equals(BigDecimal.ZERO)) {
            if (distance > accessLink.getLinkDistance().doubleValue()) {
                DataLocation location = buildLocation(context, accessLink);
                DataLocation startTarget = buildLocation(context, start);
                DataLocation endTarget = buildLocation(context, end);
                ValidationReporter reporter = ValidationReporter.Factory.getInstance();
                reporter.addCheckPointReportError(context, ACCESS_LINK_2, location, Integer.valueOf((int) distance).toString(), Integer.valueOf(accessLink.getLinkDistance().intValue()).toString(), startTarget, endTarget);
            }
        }
    }
}",java:S100,
"public static Geometry ST_Scale(Geometry geom, BigDecimal xFactor, BigDecimal yFactor){
    AffineTransformation transformation = new AffineTransformation();
    transformation.scale(xFactor.doubleValue(), yFactor.doubleValue());
    return transformation.transform(geom);
}",java:S100,
"@Nullable
public static Double ST_Length(Geometry geom){
    return geom.getLength();
}",java:S100,
"public void attach(KieRuntimeEventManager ksession){
    ksession.addEventListener(ruleRuntimeStats);
    super.attach(ksession);
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeObject(packageNames);
    out.writeObject(expression);
    if (extractor instanceof ClassFieldReader) {
        out.writeObject(((ClassFieldReader) extractor).getAccessorKey());
    } else {
        out.writeObject(extractor);
    }
    out.writeObject(indexingDeclaration);
    out.writeObject(declarations);
    out.writeObject(constraintType);
    out.writeBoolean(isUnification);
    out.writeBoolean(isDynamic);
    out.writeObject(fieldValue);
    out.writeObject(compilationUnit);
    out.writeObject(evaluationContext);
    out.writeObject(operators);
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeObject(variableId);
    out.writeObject(variableInstanceId);
    out.writeObject(objectToString);
}",java:S1161,
"public String toString(){
    return ""ReaderResource[resource="" + this.reader + "",encoding="" + this.encoding + ""]"";
}",java:S1161,
"public BeliefSet newBeliefSet(InternalFactHandle fh){
    return new DefeasibleBeliefSet(this, fh);
}",java:S1161,
" void postAccumulate(AccumulateNode accNode, Object accctx, LeftTuple match){
    ((GroupByContext) accctx).addMatchOnLastTupleList(match);
}",java:S1161,
"public void setBlockedPrevious(LeftTuple blockerPrevious){
    this.blockedPrevious = blockerPrevious;
}",java:S1161,
"public String toString(){
    return ""AllocatedCashflow["" + ""account="" + account + "",date="" + getDate() + "",type="" + (getType() == CREDIT ? ""Credit"" : ""Debit"") + "",amount="" + getAmount() + ""]"";
}",java:S1161,
"public LeftTuple createLeftTuple(final InternalFactHandle factHandle, final LeftTuple leftTuple, final Sink sink){
    return new ReactiveFromNodeLeftTuple(factHandle, leftTuple, sink);
}",java:S1161,
"public Builder clear(){
    super.clear();
    if (versionBuilder_ == null) {
        version_ = KieModuleCache.Version.getDefaultInstance();
    } else {
        versionBuilder_.clear();
    }
    bitField0_ = (bitField0_ & ~0x00000001);
    if (signatureBuilder_ == null) {
        signature_ = KieModuleCache.Signature.getDefaultInstance();
    } else {
        signatureBuilder_.clear();
    }
    bitField0_ = (bitField0_ & ~0x00000002);
    payload_ = com.google.protobuf.ByteString.EMPTY;
    bitField0_ = (bitField0_ & ~0x00000004);
    return this;
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    groupingFunction = (String) in.readObject();
    groupingKey = (String) in.readObject();
}",java:S1161,
"public Expression visitNonEqualExpression(NonEqualViewExpression nonEqualExpression, Void context){
    Pair<Expression, Expression> pair = this.getExpressionsForBinaryExpression(nonEqualExpression);
    return new NonEqualExpression(pair.left, pair.right);
}",java:S1161,
"protected String getFormatVersion(){
    return EVENT_FORMAT_VERSION;
}",java:S1161,
"public void mousePressed(MouseEvent e){
    gameView.getKsession().insert(new GrabCommand());
    gameView.getKsession().fireAllRules();
}",java:S1161,
"protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException{
    return resolveClass(desc.getName());
}",java:S1161,
"public void unlinkFromLeftParent(){
    super.unlinkFromLeftParent();
}",java:S1161,
"public int getSerializedSize(){
    int size = memoizedSerializedSize;
    if (size != -1)
        return size;
    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream.computeInt32Size(1, versionMajor_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream.computeInt32Size(2, versionMinor_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream.computeInt32Size(3, versionRevision_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
}",java:S1161,
"public int read(byte[] bytes, int off, int len){
    if (!src.hasRemaining()) {
        return -1;
    }
    len = Math.min(len, src.remaining());
    src.get(bytes, off, len);
    return len;
}",java:S1161,
"public void mouseReleased(MouseEvent e){
    JButton button = (JButton) e.getComponent();
    callback.checkout((JFrame) button.getTopLevelAncestor(), tableModel.getItems());
}",java:S1161,
"public Expression visitLogicOrExpression(LogicOrViewExpression logicOrExpression, Void context){
    Pair<Expression, Expression> pair = this.getExpressionsForBinaryExpression(logicOrExpression);
    return new LogicOrExpression(pair.left, pair.right);
}",java:S1161,
"public void run(){
    try {
        try {
            LOG.info(""Starting {} bookies : allowLoopback = {}"", numBookies, serverConf.getAllowLoopback());
            lb.start();
            LOG.info(""{} bookies are started."", numBookies);
            while (true) {
                Thread.sleep(1000);
            }
        } finally {
            lb.close();
        }
    } catch (InterruptedException e) {
        Thread.currentThread().interrupt();
    } catch (Exception e) {
        LOG.error(""Error starting local bk"", e);
    }
}",java:S1161,
"public String toString(){
    return ""Strings not sound alike"";
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeLong(startMinDev);
    out.writeLong(startMaxDev);
    out.writeLong(endMinDev);
    out.writeLong(endMaxDev);
    out.writeObject(paramText);
}",java:S1161,
"public InputStream getResourceAsStream(final String name){
    byte[] bytes;
    synchronized (this.store) {
        bytes = this.store.get(convertResourcePathToClassName(name));
    }
    if (bytes != null) {
        return new ByteArrayInputStream(bytes);
    } else {
        InputStream input = this.getParent().getResourceAsStream(name);
        if (input == null) {
            input = super.getResourceAsStream(name);
        }
        return input;
    }
}",java:S1161,
"public void addCellValue(int row, int column, String value, boolean trim){
    this.hasValues = true;
    if (this.constraints.isEmpty()) {
        return;
    }
    Integer key = Integer.valueOf(column);
    String content = this.constraints.get(key);
    if (content == null) {
        throw new DecisionTableParseException(""No code snippet for CONDITION in cell "" + RuleSheetParserUtil.rc2name(this.headerRow + 2, this.headerCol));
    }
    SnippetBuilder snip = new SnippetBuilder(content, trim);
    String result = snip.build(fixValue(column, value));
    this.values.add(result);
}",java:S1161,
"public void setDomain(String domain){
    m_domain = domain;
}",java:S1161,
"public Expression visitTernaryExpression(TernaryViewExpression ternaryViewExpression, Void context){
    throw new RuntimeException(new NotSupportedException(""Can not construct abstract class.""));
}",java:S1161,
"public RefreshPoolsJobConfig setOwner(Owner owner){
    if (owner == null) {
        throw new IllegalArgumentException(""owner is null"");
    }
    this.setContextOwner(owner).setJobArgument(OWNER_KEY, owner.getKey());
    return this;
}",java:S1161,
"public RecordWriter<Text, Mutation> getRecordWriter(FileSystem ignored, JobConf job, String name, Progressable progress) throws IOException{
    try {
        return new AccumuloIndexedOutputFormat.AccumuloRecordWriter(job);
    } catch (Exception e) {
        throw new IOException(e);
    }
}",java:S1161,
"protected CreateTxBackupLogOperation createCreateTxBackupLogOperation(){
    return new CreateAllowedDuringPassiveStateTxBackupLogOperation(getOwnerUuid(), getTxnId());
}",java:S1161,
"public boolean add(V v){
    return delegate.add(DeferredValue.withValue(v));
}",java:S1161,
"public ClassLoader getClassLoader(){
    return this.classLoader;
}",java:S1161,
"public boolean equals(Object o){
    if (this == o)
        return true;
    if (!(o instanceof ColumnDesc))
        return false;
    ColumnDesc that = (ColumnDesc) o;
    return xequals(this.name, that.name) && xequals(this.type, that.type) && xequals(this.comment, that.comment) && super.equals(that);
}",java:S1161,
"public synchronized E poll() throws InterruptedException{
    while (isEmpty()) {
        this.wait();
    }
    E output = pollFirst();
    size--;
    reservedSize++;
    return output;
}",java:S1161,
"public void visitInnerClass(final String arg0, final String arg1, final String arg2, final int arg3){
}",java:S1161,
"public boolean isEmpty(){
    return StringUtils.isEmpty(value);
}",java:S1161,
"public synchronized Class loadClass(final String name, final boolean resolve) throws ClassNotFoundException{
    Class clazz = fastFindClass(name);
    if (clazz == null) {
        final ClassLoader parent = getParent();
        if (parent != null) {
            clazz = Class.forName(name, true, parent);
        }
    }
    if (resolve) {
        resolveClass(clazz);
    }
    return clazz;
}",java:S1161,
"public String toString(){
    return symbol;
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    variableId = (String) in.readObject();
    variableInstanceId = (String) in.readObject();
    objectToString = (String) in.readObject();
}",java:S1161,
"public void visitEnum(final String name, final String desc, final String value){
}",java:S1161,
"public long getDate(){
    long current = getCurrentDate();
    long extra = m_step * TimeHelper.ONE_HOUR;
    if (m_date <= 0) {
        return current + extra;
    } else {
        long result = m_date + extra;
        if (result > current) {
            return current;
        }
        return result;
    }
}",java:S1161,
"public UndoImportsJobConfig setOwner(Owner owner){
    if (owner == null) {
        throw new IllegalArgumentException(""owner is null"");
    }
    this.setContextOwner(owner).setJobArgument(OWNER_KEY, owner.getKey());
    return this;
}",java:S1161,
"public int getSerializedSize(){
    int size = memoizedSerializedSize;
    if (size != -1)
        return size;
    size = 0;
    for (int i = 0; i < compilationData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, compilationData_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
}",java:S1161,
"public void println(String out){
    if (byPass()) {
        printDirect(out);
    } else {
        process(out);
    }
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeBoolean(sequential);
    out.writeObject(sequentialAgenda);
    out.writeBoolean(maintainTms);
    out.writeBoolean(removeIdentities);
    out.writeBoolean(shareAlphaNodes);
    out.writeBoolean(shareBetaNodes);
    out.writeInt(permGenThreshold);
    out.writeInt(jittingThreshold);
    out.writeInt(alphaNodeHashingThreshold);
    out.writeInt(alphaNodeRangeIndexThreshold);
    out.writeBoolean(betaNodeRangeIndexEnabled);
    out.writeInt(compositeKeyDepth);
    out.writeBoolean(indexLeftBetaMemory);
    out.writeBoolean(indexRightBetaMemory);
    out.writeObject(indexPrecedenceOption);
    out.writeObject(assertBehaviour);
    out.writeObject(consequenceExceptionHandler);
    out.writeObject(ruleBaseUpdateHandler);
    out.writeObject(conflictResolver);
    out.writeObject(parallelExecution);
    out.writeInt(maxThreads);
    out.writeObject(eventProcessingMode);
    out.writeBoolean(declarativeAgenda);
    out.writeInt(sessionPoolSize);
}",java:S1161,
"public int getSerializedSize(){
    int size = memoizedSerializedSize;
    if (size != -1)
        return size;
    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream.computeBytesSize(1, getIdBytes());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream.computeBytesSize(2, data_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
}",java:S1161,
"public void run(){
    ICacheService service = getService();
    ICacheRecordStore cache = service.getOrCreateRecordStore(name, getPartitionId());
    int partitionId = getPartitionId();
    Set<Data> partitionKeySet = new HashSet<Data>();
    for (Data key : keys) {
        if (partitionId == getNodeEngine().getPartitionService().getPartitionId(key)) {
            partitionKeySet.add(key);
        }
    }
    response = cache.getAll(partitionKeySet, expiryPolicy);
}",java:S1161,
"public Permission getRequiredPermission(){
    return new CachePermission(parameters, ActionConstants.ACTION_LISTEN);
}",java:S1161,
"public LeftTuple createLeftTuple(LeftTuple leftTuple, RightTuple rightTuple, Sink sink){
    throw new UnsupportedOperationException();
}",java:S1161,
" void verifyHeader(Net net){
    getHeader().verifyHeader(net);
}",java:S1161,
"public Long getCreatedAt(){
    return 0L;
}",java:S1161,
"public long getCurrentDate(){
    long timestamp = getCurrentTimeMillis();
    return timestamp - timestamp % TimeHelper.ONE_HOUR;
}",java:S1161,
"public Expression visitLessEqualExpression(LessEqualViewExpression lessEqualExpression, Void context){
    Pair<Expression, Expression> pair = this.getExpressionsForBinaryExpression(lessEqualExpression);
    return new LessEqualExpression(pair.left, pair.right);
}",java:S1161,
"public List<String> getIps(){
    if (m_report == null) {
        return new ArrayList<String>();
    } else {
        return SortHelper.sortDomain(m_report.getIps());
    }
}",java:S1161,
"public void reset(){
    super.reset();
    this.processNodesTriggered.set(0);
}",java:S1161,
"public Map<String, Object> _getDynamicProperties(){
    return __$$dynamic_properties_map$$;
}",java:S1161,
"public void visitSource(final String arg0, final String arg1){
}",java:S1161,
"public Builder mergeFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException{
    KieModuleCache.Version parsedMessage = null;
    try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (KieModuleCache.Version) e.getUnfinishedMessage();
        throw e;
    } finally {
        if (parsedMessage != null) {
            mergeFrom(parsedMessage);
        }
    }
    return this;
}",java:S1161,
"public String toString(){
    return ""[AfterActivationFired("" + getActivation().getActivationNumber() + ""): rule="" + getActivation().getRule().getName() + ""; tuple="" + getActivation().getTuple() + ""]"";
}",java:S1161,
"public StorageHandlerTypes getType(){
    return StorageHandlerTypes.ICEBERG;
}",java:S1161,
"public void visit(final String name, final Object value){
}",java:S1161,
"public Expression visitAdditionExpression(AdditionViewExpression additionExpression, Void context){
    Pair<Expression, Expression> pair = this.getExpressionsForBinaryExpression(additionExpression);
    return new AdditionExpression(pair.left, pair.right);
}",java:S1161,
"public AnnotationVisitor visitArray(final String name){
    return new DummyAnnotationVisitor();
}",java:S1161,
"public void removeObjectSink(final ObjectSink objectSink){
    final ObjectTypeNode node = (ObjectTypeNode) objectSink;
    this.objectTypeNodes.remove(node.getObjectType());
}",java:S1161,
"protected String getCommonSuperClass(final String type1, final String type2){
    Class c, d;
    try {
        c = Class.forName(type1.replace('/', '.'), false, classLoader);
        d = Class.forName(type2.replace('/', '.'), false, classLoader);
    } catch (Exception e) {
        throw new RuntimeException(e.toString());
    }
    if (c.isAssignableFrom(d)) {
        return type1;
    }
    if (d.isAssignableFrom(c)) {
        return type2;
    }
    if (c.isInterface() || d.isInterface()) {
        return ""java/lang/Object"";
    } else {
        do {
            c = c.getSuperclass();
        } while (!c.isAssignableFrom(d));
        return c.getName().replace('.', '/');
    }
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    if (CompiledInvoker.isCompiledInvoker(accumulator)) {
        out.writeObject(null);
    } else {
        out.writeObject(accumulator);
    }
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    this.sinks = (LeftTupleSinkNodeList) in.readObject();
}",java:S1161,
"public int getHashCode(Object object){
    throw new RuntimeException(""Can't extract a value from global "" + identifier + "" without a working memory reference"");
}",java:S1161,
"public void suspendMinorGC(){
    gcThread.suspendMinorGC();
}",java:S1161,
"public boolean contains(final Object o){
    return Object2LongHashMap.this.containsKey(o);
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeObject(this.className);
    out.writeObject(this.expr);
    out.writeBoolean(this.typesafe);
    out.writeObject(this.evaluationContext);
}",java:S1161,
"public Executor defaultExecutor(){
    return ConcurrencyUtil.getDefaultAsyncExecutor();
}",java:S1161,
"public Mutator setStartSequenceId(long startSequenceId){
    this.startSequenceId = startSequenceId;
    return this;
}",java:S1161,
"public void stop(){
    writer.interrupt();
    super.stop();
}",java:S1161,
"public void run(){
    Address address = member.getAddress();
    logger.fine(format(""%s will ping %s"", node.getThisAddress(), address));
    if (doPing(address, Level.FINE)) {
        boolean pingRestored = (icmpFailureDetector.heartbeat(member) > 0);
        if (pingRestored) {
            splitBrainProtectionService.onPingRestored(member);
        }
        return;
    }
    icmpFailureDetector.logAttempt(member);
    splitBrainProtectionService.onPingLost(member);
    String reason = format(""%s could not ping %s"", node.getThisAddress(), address);
    logger.warning(reason);
    if (!icmpFailureDetector.isAlive(member)) {
        clusterService.suspectMember(member, reason, true);
    }
}",java:S1161,
"public FieldVisitor visitField(final int access, final String name, final String desc, final String signature, final Object value){
    return null;
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeObject(groupingFunction);
    out.writeObject(groupingKey);
}",java:S1161,
"public LeftTuple getBlockedNext(){
    return this.blockedNext;
}",java:S1161,
"public String toString(){
    return ""<==[AgendaGroupPoppedEvent("" + getAgendaGroup().getName() + ""]"";
}",java:S1161,
"public final boolean isInitialized(){
    return true;
}",java:S1161,
"public Builder clear(){
    super.clear();
    if (compilationDataBuilder_ == null) {
        compilationData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
    } else {
        compilationDataBuilder_.clear();
    }
    return this;
}",java:S1161,
"public String toString(){
    return ""==>[RuleFlowGroupDeactivated(name="" + getRuleFlowGroup().getName() + ""; size="" + getRuleFlowGroup().size() + "")]"";
}",java:S1161,
"public String getDomain(){
    if (m_domain == null || """".equals(m_domain)) {
        return null;
    } else {
        return m_domain;
    }
}",java:S1161,
"public Builder mergeFrom(com.google.protobuf.Message other){
    if (other instanceof KieModuleCache.CompDataEntry) {
        return mergeFrom((KieModuleCache.CompDataEntry) other);
    } else {
        super.mergeFrom(other);
        return this;
    }
}",java:S1161,
"public String toString(){
    StringBuilder sb = new StringBuilder();
    sb.append('[');
    Iterator<StackItem> i = descendingIterator();
    while (i.hasNext()) {
        if (sb.length() > 1)
            sb.append(',');
        sb.append(i.next());
    }
    sb.append(']');
    return sb.toString();
}",java:S1161,
"public void removeObjectSink(final ObjectSink objectSink){
    final EntryPointNode node = (EntryPointNode) objectSink;
    entryPoints.remove(node.getEntryPoint());
    kBase.registeRremovedEntryNodeCache(node);
}",java:S1161,
"public Method getNativeReadMethod(){
    try {
        return this.getClass().getDeclaredMethod(""getValue"", ValueResolver.class, Object.class);
    } catch (final Exception e) {
        throw new RuntimeException(""This is a bug. Please report to development team: "" + e.getMessage(), e);
    }
}",java:S1161,
"public Tree dupNode(){
    return new DroolsTree(this);
}",java:S1161,
"public String getColumnName(int col){
    return columnNames[col];
}",java:S1161,
"public Void call() throws Exception{
    try {
        JDKCallableJobCommand command = new JDKCallableJobCommand(this);
        runner.execute(command);
    } catch (Exception e) {
        logger.error(""Unable to execute job!"", e);
        throw e;
    }
    return null;
}",java:S1161,
"public void keyPressed(KeyEvent e){
    this.keyPressedEntryPoint.insert(e);
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    finalRange = in.readLong();
    paramText = (String) in.readObject();
}",java:S1161,
"public Expression visitBetweenExpression(BetweenViewExpression betweenViewExpression, Void context){
    Expression first = this.process(betweenViewExpression.getFirstExpression(), null);
    Expression second = this.process(betweenViewExpression.getSecondExpression(), null);
    Expression third = this.process(betweenViewExpression.getThirdExpression(), null);
    return new org.apache.iotdb.db.queryengine.plan.expression.ternary.BetweenExpression(first, second, third, betweenViewExpression.isNotBetween());
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    packageNames = (Set<String>) in.readObject();
    expression = (String) in.readObject();
    if (in instanceof DroolsObjectInputStream) {
        ((DroolsObjectInputStream) in).readExtractor(this::setReadAccessor);
    } else {
        extractor = (ReadAccessor) in.readObject();
    }
    indexingDeclaration = (Declaration) in.readObject();
    declarations = (Declaration[]) in.readObject();
    constraintType = (ConstraintTypeOperator) in.readObject();
    isUnification = in.readBoolean();
    isDynamic = in.readBoolean();
    fieldValue = (FieldValue) in.readObject();
    compilationUnit = (MVELCompilationUnit) in.readObject();
    evaluationContext = (EvaluationContext) in.readObject();
    operators = (EvaluatorWrapper[]) in.readObject();
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeBoolean(left);
    out.writeBoolean(right);
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeBoolean(keepReference);
    out.writeObject(clockType);
    out.writeObject(timerJobFactoryType);
}",java:S1161,
"public String toString(){
    return toExternalForm();
}",java:S1161,
"public synchronized void write(byte[] b, int off, int len){
    int storable = Math.min(maxBytes - nBytes, len);
    if (storable > 0) {
        nBytes += storable;
        super.write(b, off, storable);
    }
}",java:S1161,
"public boolean add(StackItem item){
    stackBytes += item.length();
    return super.add(item);
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeObject(events);
    out.writeObject(fileName);
    out.writeInt(maxEventsInMemory);
    out.writeInt(nbOfFile);
    out.writeBoolean(split);
    out.writeBoolean(initialized);
    out.writeBoolean(terminate);
}",java:S1161,
"public void visitAttribute(final Attribute attr){
}",java:S1161,
" Date getTimeAsDate(){
    return getHeader().getTimeAsDate();
}",java:S1161,
"public SqlOperandCountRange getOperandCountRange(){
    return SqlOperandCountRanges.from(1);
}",java:S1161,
"public void mousePressed(MouseEvent e){
    FactHandle fh = gameView.getKsession().getFactHandle(gameView);
    if (gameView.isShowAllCells()) {
        gameView.setShowAllCells(false);
    } else {
        gameView.setShowAllCells(true);
    }
    gameView.getKsession().update(fh, gameView);
    gameView.getKsession().fireAllRules();
}",java:S1161,
"public boolean markSupported(){
    return false;
}",java:S1161,
"public void resetTuple(){
    this.left = null;
    this.tuple = null;
}",java:S1161,
"public void toggleNegation(){
    throw new UnsupportedOperationException();
}",java:S1161,
"protected int calculateHashCode(){
    return 0;
}",java:S1161,
"public boolean isValid(Logger log, String[] allowedTypes){
    if (!super.isValid(log, allowedTypes))
        return false;
    if (timeZone == null || timeZone.isEmpty()) {
        log.error(""missing time_zone"");
        return false;
    }
    if (objectIdPrefix == null || objectIdPrefix.isEmpty()) {
        log.error(""missing object_id_prefix"");
        return false;
    }
    return true;
}",java:S1161,
"public HypervisorHeartbeatUpdateJobConfig setOwner(Owner owner){
    if (owner == null) {
        throw new IllegalArgumentException(""owner is null"");
    }
    this.setContextOwner(owner).setJobArgument(OWNER_KEY, owner.getKey());
    return this;
}",java:S1161,
"public void addNullOrEmptyTarget(){
    throw new UnsupportedOperationException(""Can't modify an immutable MultiResult"");
}",java:S1161,
"public boolean equals(final Object obj){
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof PatternExtractor)) {
        return false;
    }
    final PatternExtractor other = (PatternExtractor) obj;
    return this.objectType.equals(other.objectType);
}",java:S1161,
"public void visit(final String arg0, final Object arg1){
}",java:S1161,
"public void configureTableJobProperties(TableDesc tableDesc, Map<String, String> jobProperties){
    return;
}",java:S1161,
"public ResourceConfiguration fromProperties(Properties prop){
    super.fromProperties(prop);
    inputType = DecisionTableInputType.valueOf(prop.getProperty(DROOLS_DT_TYPE, DecisionTableInputType.XLS.toString()));
    worksheetName = prop.getProperty(DROOLS_DT_WORKSHEET, null);
    return this;
}",java:S1161,
"public void addNotify(){
    super.addNotify();
    KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(this);
}",java:S1161,
"public ClassLoader getRootClassLoader(){
    return rootClassLoader;
}",java:S1161,
"public ImportJobConfig setOwner(Owner owner){
    if (owner == null) {
        throw new IllegalArgumentException(""owner is null"");
    }
    this.setContextOwner(owner).setJobArgument(OWNER_KEY, owner.getKey());
    return this;
}",java:S1161,
"public String toString(){
    return ""[WindowNode("" + this.id + "") constraints="" + this.constraints + ""]"";
}",java:S1161,
"public String toString(){
    return this.getMessage();
}",java:S1161,
"public boolean isEmpty(){
    return this.errors.length == 0;
}",java:S1161,
"public void setText(String text){
    this.text = text;
}",java:S1161,
"protected AbstractSerDe createSerDe() throws SerDeException{
    return new ArrowColumnarBatchSerDe();
}",java:S1161,
"public final boolean isInitialized(){
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized != -1)
        return isInitialized == 1;
    memoizedIsInitialized = 1;
    return true;
}",java:S1161,
"public void run(){
    while (!stop) {
        try {
            FileSystem fs = null;
            try {
                fs = new Path(storage_root).getFileSystem(appConf);
                checkFiles(fs);
            } catch (Exception e) {
                LOG.error(""Cleanup cycle failed: "" + e.getMessage());
            } finally {
                if (fs != null) {
                    try {
                        fs.close();
                    } catch (Exception e) {
                        LOG.error(""Closing file system failed: "" + e.getMessage());
                    }
                }
            }
            long sleepMillis = (long) (Math.random() * interval);
            LOG.info(""Next execution: "" + new Date(new Date().getTime() + sleepMillis));
            Thread.sleep(sleepMillis);
        } catch (Exception e) {
            isRunning = false;
            LOG.error(""Cleanup failed: "" + e.getMessage(), e);
        }
    }
    isRunning = false;
}",java:S1161,
"public ImmutableSetBuilder<T> add(T item){
    super.add(item);
    return this;
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeObject(packageName);
    out.writeObject(ruleName);
}",java:S1161,
"public Expression visitModuloExpression(ModuloViewExpression moduloExpression, Void context){
    Pair<Expression, Expression> pair = this.getExpressionsForBinaryExpression(moduloExpression);
    return new ModuloExpression(pair.left, pair.right);
}",java:S1161,
"public void visitOuterClass(final String owner, final String name, final String desc){
}",java:S1161,
"public void mousePressed(MouseEvent e){
    gameView.getKsession().insert(new ShootCommand());
    gameView.getKsession().fireAllRules();
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    queryListener = (QueryListenerOption) in.readObject();
}",java:S1161,
"public void addValue(Map<String, Object> vars){
    for (int i = 0; i < values.length; i++) {
        vars.put(column.getName() + i, values[i]);
    }
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeLong(startTS);
    out.writeLong(startTS);
}",java:S1161,
"public String getServiceName(){
    return DistributedDurableExecutorService.SERVICE_NAME;
}",java:S1161,
"public Properties toProperties(){
    Properties prop = super.toProperties();
    prop.setProperty(""drools.jaxb.conf.systemId"", systemId);
    prop.setProperty(""drools.jaxb.conf.classes"", classes.toString());
    if (xjcOpts != null) {
        prop.setProperty(""drools.jaxb.conf.opts.class"", xjcOpts.getClass().getName());
        if (xjcOpts.getSchemaLanguage() != null) {
            prop.setProperty(""drools.jaxb.conf.opts.lang"", xjcOpts.getSchemaLanguage().toString());
        }
    }
    return prop;
}",java:S1161,
"public String toString(){
    return ""ConstraintType::"" + this.desc;
}",java:S1161,
"public String toString(){
    return ""Object excludes"";
}",java:S1161,
"public HealEntireOrgJobConfig setOwner(final Owner owner){
    if (owner == null) {
        throw new IllegalArgumentException(""Owner is null"");
    }
    this.setContextOwner(owner).setJobArgument(OWNER_KEY, owner.getKey());
    return this;
}",java:S1161,
"public int getSerializedSize(){
    int size = memoizedSerializedSize;
    if (size != -1)
        return size;
    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, version_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(4, signature_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream.computeBytesSize(10, payload_);
    }
    size += extensionsSerializedSize();
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
}",java:S1161,
"public Builder mergeFrom(com.google.protobuf.Message other){
    if (other instanceof KieModuleCache.KModuleCache) {
        return mergeFrom((KieModuleCache.KModuleCache) other);
    } else {
        super.mergeFrom(other);
        return this;
    }
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeObject(processId);
    out.writeObject(processName);
    out.writeObject(processInstanceId);
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    factId = in.readLong();
    objectToString = (String) in.readObject();
}",java:S1161,
"public void printTypeArgs(final NodeWithTypeArguments<?> nodeWithTypeArguments, final Void arg){
    NodeList<Type> typeArguments = nodeWithTypeArguments.getTypeArguments().orElse(null);
    if (!isNullOrEmpty(typeArguments)) {
        printer.print(""<"");
        for (final Iterator<Type> i = typeArguments.iterator(); i.hasNext(); ) {
            final Type t = i.next();
            t.accept(this, arg);
            if (i.hasNext()) {
                printer.print("", "");
            }
        }
        printer.print("">"");
    }
}",java:S1161,
"public boolean contains(final Object o){
    final Entry entry = (Entry) o;
    final Long value = get(entry.getKey());
    return value != null && value.equals(entry.getValue());
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    endDev = in.readLong();
    paramText = (String) in.readObject();
}",java:S1161,
"public String toString(){
    final StringBuilder builder = new StringBuilder().append(this.message).append("" : "").append(""\n"");
    return BuilderResultUtils.appendProblems(this.object, builder).toString();
}",java:S1161,
"public String getTitle(){
    return title;
}",java:S1161,
"public long getPubUid(){
    return pubUid;
}",java:S1161,
"public void appendFiles(org.apache.hadoop.hive.metastore.api.Table table, URI fromURI, boolean isOverwrite, Map<String, String> partitionSpec) throws SemanticException{
    Table icebergTbl = IcebergTableUtil.getTable(conf, table);
    String format = table.getParameters().get(TableProperties.DEFAULT_FILE_FORMAT);
    HiveTableUtil.appendFiles(fromURI, format, icebergTbl, isOverwrite, partitionSpec, conf);
}",java:S1161,
"public void mousePressed(MouseEvent e){
    if (e.isPopupTrigger())
        react(e);
}",java:S1161,
"public void mouseReleased(MouseEvent e){
    JList jlist = (JList) e.getSource();
    tableModel.addItem((Product) jlist.getSelectedValue());
}",java:S1161,
"public InternalFactHandle insertLogical(Object object, Object value){
    return insertLogical(toStatefulKnowledgeSession().getDefaultEntryPoint(), object, value);
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    packageName = (String) in.readObject();
    ruleName = (String) in.readObject();
}",java:S1161,
"public GameServer getServer(){
    return server;
}",java:S1161,
"public boolean isValid(Logger log){
    return super.isValid(log);
}",java:S1161,
"public Iterator<StackItem> iterator(){
    return listIterator();
}",java:S1161,
"public void setPage(ReportPage page){
    m_page = page;
}",java:S1161,
"public void visit(final int arg0, final int arg1, final String arg2, final String arg3, final String arg4, final String[] arg5){
}",java:S1161,
"public synchronized void push(E element){
    if (element == null) {
        throw new NullPointerException(""pushed element is null"");
    }
    Preconditions.checkState(size + reservedSize < capacity, ""The system can't allow more query tasks."");
    pushToQueue(element);
    size++;
    this.notifyAll();
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    this.file = (File) in.readObject();
    this.encoding = (String) in.readObject();
}",java:S1161,
"public void onBegin(WorldChallenge challenge){
    challenge.getScene().broadcastPacket(new PacketChallengeDataNotify(challenge, 2, 100));
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeObject(id);
    out.writeObject(label);
    out.writeObject(arguments);
}",java:S1161,
"public String toString(){
    return ""||"";
}",java:S1161,
"public String toString(){
    return ""finishes["" + ((paramText != null) ? paramText : """") + ""]"";
}",java:S1161,
"public Set<String> getOptionSubKeys(OptionKey<T> option){
    switch(option.name()) {
        case AccumulateFunctionOption.PROPERTY_NAME:
            {
                return this.accumulateFunctions.keySet();
            }
        case EvaluatorOption.PROPERTY_NAME:
            {
                return this.evaluatorRegistry.keySet();
            }
        default:
            return compConfig.getOptionSubKeys(option);
    }
}",java:S1161,
"public void visit(final int version, final int access, final String name, final String signature, final String superName, final String[] interfaces){
}",java:S1161,
"public void visit(CompilationUnit u, Void arg){
    PackageDeclaration packageDeclaration = u.getPackageDeclaration().orElseThrow(() -> new ParseException(""Expected package declaration."", -1));
    String pkgName = packageDeclaration.getNameAsString();
    builder.name(pkgName);
    for (ImportDeclaration i : u.getImports()) {
        this.visit(i, null);
    }
    ModuleDeclaration moduleDeclaration = u.getModule().orElseThrow(() -> new ParseException(""Expected unit declaration."", -1));
    builder.newUnit().target(String.format(""%s.%s"", pkgName, moduleDeclaration.getNameAsString()));
    for (TypeDeclaration<?> typeDeclaration : u.getTypes()) {
        RuleDeclaration rd = (RuleDeclaration) typeDeclaration;
        this.visit(rd, null);
    }
}",java:S1161,
"public RequestContext execute(Executable executable, RequestContext ctx){
    executeNext(executable, ctx);
    if (requiresFireAllRules(((InternalExecutable) executable))) {
        new FireAllRulesCommand().execute(ctx);
    }
    return ctx;
}",java:S1161,
"public void clearBlocker(){
    this.blockedPrevious = null;
    this.blockedNext = null;
    this.blocker = null;
}",java:S1161,
"public Set<String> getOptionSubKeys(OptionKey<T> option){
    return compConfig.getOptionSubKeys(option);
}",java:S1161,
"protected boolean holdLock(ConfigNodeProcedureEnv env){
    return true;
}",java:S1161,
"public LogicalDependency<M> newLogicalDependency(TruthMaintenanceSystemInternalMatch<M> activation, BeliefSet<M> beliefSet, Object object, Object value){
    M mode = asMode(value);
    DefeasibleLogicalDependency<M> dep = new DefeasibleLogicalDependency(activation, beliefSet, object, mode);
    mode.setLogicalDependency(dep);
    mode.initDefeats();
    return dep;
}",java:S1161,
"public void doAttach(BuildContext context){
    super.doAttach(context);
    this.source.addObjectSink(this);
    if (context != null) {
        for (InternalWorkingMemory workingMemory : context.getWorkingMemories()) {
            workingMemory.updateEntryPointsCache();
        }
    }
}",java:S1161,
"public void networkUpdated(UpdateContext updateContext){
}",java:S1161,
"public String toString(){
    return ""import function "" + this.getTarget();
}",java:S1161,
"public String toString(){
    return ""TypedCashflow[date="" + getDate() + "",type="" + (type == CREDIT ? ""Credit"" : ""Debit"") + "",amount="" + getAmount() + ""]"";
}",java:S1161,
"protected Date getDate(ValueResolver valueResolver, Object object){
    LocalDateTime ldt = ((LocalDateTime) getValue(valueResolver, object));
    return Date.from(ldt.atZone(ZoneId.systemDefault()).toInstant());
}",java:S1161,
"public boolean isNullEmptyTarget(){
    return multiResult.isNullEmptyTarget();
}",java:S1161,
"protected RollbackTxBackupLogOperation createRollbackTxBackupLogOperation(){
    return new RollbackAllowedDuringPassiveStateTxBackupLogOperation(getTxnId());
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    mutabilityEnabled = in.readBoolean();
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeObject(annotations);
}",java:S1161,
"public String toString(){
    String msg = null;
    switch(this.getType()) {
        case BEFORE_RULEFLOW_NODE_TRIGGERED:
            msg = ""BEFORE PROCESS NODE TRIGGERED"";
            break;
        case AFTER_RULEFLOW_NODE_TRIGGERED:
            msg = ""AFTER PROCESS NODE TRIGGERED"";
            break;
        case BEFORE_RULEFLOW_NODE_EXITED:
            msg = ""BEFORE PROCESS NODE EXITED"";
            break;
        case AFTER_RULEFLOW_NODE_EXITED:
            msg = ""AFTER PROCESS NODE EXITED"";
            break;
        default:
            return super.toString();
    }
    return msg + "" node:"" + nodeName + ""[id="" + nodeId + ""] process:"" + getProcessName() + ""[id="" + getProcessId() + ""]"";
}",java:S1161,
"public void unlinkFromRightParent(){
    super.unlinkFromRightParent();
}",java:S1161,
"public boolean supportsAppendData(org.apache.hadoop.hive.metastore.api.Table table, boolean withPartClause) throws SemanticException{
    Table icebergTbl = IcebergTableUtil.getTable(conf, table);
    if (icebergTbl.spec().isUnpartitioned()) {
        return true;
    }
    if (icebergTbl.currentSnapshot() != null) {
        if (icebergTbl.currentSnapshot().allManifests(icebergTbl.io()).parallelStream().map(ManifestFile::partitionSpecId).anyMatch(id -> id < icebergTbl.spec().specId())) {
            if (withPartClause) {
                throw new SemanticException(""Can not Load into an iceberg table, which has undergone partition evolution "" + ""using the PARTITION clause"");
            }
            return false;
        }
    }
    return withPartClause;
}",java:S1161,
"protected boolean parallelRulesBuild(List<RuleDescr> rules){
    return false;
}",java:S1161,
"public TupleList getNext(){
    return null;
}",java:S1161,
"public String toString(){
    final StringBuilder buf = new StringBuilder();
    for (int i = 0, length = this.errors.length; i < length; i++) {
        buf.append(errors[i]);
        buf.append(""\n"");
    }
    return buf.toString();
}",java:S1161,
"public void visit(RuleDeclaration decl, Void v){
    this.ruleDescrBuilder = builder.newRule();
    ruleDescrBuilder.name(decl.getNameAsString());
    CEDescrBuilder<?, ?> lhs = ruleDescrBuilder.lhs();
    lhsList.push(lhs);
    for (RuleItem item : decl.getRuleBody().getItems()) {
        item.accept(this, v);
    }
    lhsList.pop();
    ruleDescrBuilder = null;
}",java:S1161,
"public void suspendMajorGC(){
    gcThread.suspendMajorGC();
}",java:S1161,
"public void add(T result){
    throw new UnsupportedOperationException(""Can't modify an immutable MultiResult"");
}",java:S1161,
"public Builder mergeFrom(com.google.protobuf.Message other){
    if (other instanceof KieModuleCache.Signature) {
        return mergeFrom((KieModuleCache.Signature) other);
    } else {
        super.mergeFrom(other);
        return this;
    }
}",java:S1161,
"public Expression visitEqualToExpression(EqualToViewExpression equalToExpression, Void context){
    Pair<Expression, Expression> pair = this.getExpressionsForBinaryExpression(equalToExpression);
    return new EqualToExpression(pair.left, pair.right);
}",java:S1161,
"public int getId(){
    return id;
}",java:S1161,
"public String getName(){
    return this.name;
}",java:S1161,
"protected Class findClass(final String name) throws ClassNotFoundException{
    return fastFindClass(name);
}",java:S1161,
"public void visit(RuleConsequence c, Void v){
    ruleDescrBuilder.rhs(PrintUtil.printNode(c.getStatement()));
}",java:S1161,
"public void visitAttribute(final Attribute arg0){
}",java:S1161,
"public Expression visitMultiplicationExpression(MultiplicationViewExpression multiplicationExpression, Void context){
    Pair<Expression, Expression> pair = this.getExpressionsForBinaryExpression(multiplicationExpression);
    return new MultiplicationExpression(pair.left, pair.right);
}",java:S1161,
"public boolean collect(){
    boolean res = super.collect();
    if (line.getNetwork() == null) {
        log.error(""line "" + line.getObjectId() + "" : missing network"");
        return false;
    }
    if (line.getCompany() == null) {
        log.error(""line "" + line.getObjectId() + "" : missing company"");
        return false;
    }
    return res;
}",java:S1161,
"public Expression visitCompareBinaryExpression(CompareBinaryViewExpression compareBinaryExpression, Void context){
    throw new RuntimeException(new NotSupportedException(""Can not construct abstract class.""));
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeObject(left);
    out.writeObject(right);
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeInt(arraySize);
    out.writeInt(accumulators.length);
    for (Accumulator acc : accumulators) {
        if (CompiledInvoker.isCompiledInvoker(acc)) {
            out.writeObject(null);
        } else {
            out.writeObject(acc);
        }
    }
}",java:S1161,
"public Set<String> getOptionSubKeys(OptionKey<T> option){
    switch(option.name()) {
        case KBuilderSeverityOption.PROPERTY_NAME:
            {
                return this.severityMap.keySet();
            }
        default:
            return compConfig.getOptionSubKeys(option);
    }
}",java:S1161,
"public void setNullOrEmptyTarget(boolean nullOrEmptyTarget){
    throw new UnsupportedOperationException(""Can't modify an immutable MultiResult"");
}",java:S1161,
"public synchronized void reset() throws IOException{
    if (in == null) {
        throw new IOException(""Stream Closed"");
    }
    slack = null;
    in.reset();
}",java:S1161,
"public Expression visitLessThanExpression(LessThanViewExpression lessThanExpression, Void context){
    Pair<Expression, Expression> pair = this.getExpressionsForBinaryExpression(lessThanExpression);
    return new LessThanExpression(pair.left, pair.right);
}",java:S1161,
"public void endElement(QName element, Augmentations augs) throws XNIException{
    if (fElementDepth <= fRemovalElementDepth && elementAccepted(element.rawname)) {
        super.endElement(element, augs);
    }
    fElementDepth--;
    if (fElementDepth == fRemovalElementDepth) {
        fRemovalElementDepth = Integer.MAX_VALUE;
    }
    XMLString string = new XMLString();
    string.setValues(new char[] { ' ', ' ' }, 0, 1);
    characters(string, augs);
}",java:S1161,
"public void setIndex(int i){
    throw new RuntimeException(""You cannot call setQueueIndex on an ArrayCell"");
}",java:S1161,
"public boolean equals(Object o){
    if (this == o)
        return true;
    if (!(o instanceof TableDesc))
        return false;
    TableDesc that = (TableDesc) o;
    return xequals(this.external, that.external) && xequals(this.ifNotExists, that.ifNotExists) && xequals(this.table, that.table) && xequals(this.comment, that.comment) && xequals(this.columns, that.columns) && xequals(this.partitionedBy, that.partitionedBy) && xequals(this.clusteredBy, that.clusteredBy) && xequals(this.format, that.format) && xequals(this.location, that.location) && xequals(this.tableProperties, that.tableProperties) && super.equals(that);
}",java:S1161,
"public void setDate(String date){
    m_rawDate = date;
    super.setDate(date);
}",java:S1161,
"public void doAttach(BuildContext context){
    super.doAttach(context);
    this.leftInput.addTupleSink(this, context);
}",java:S1161,
"public String getMessage(){
    return this.message;
}",java:S1161,
"public void run(){
    node.shutdown(false);
}",java:S1161,
"public void endOperation(InternalOperationType operationType){
    delegate.endOperation(operationType);
}",java:S1161,
"public void close(){
    try {
        reset();
    } catch (IOException e) {
        LOG.error(""Exception"", e);
    }
}",java:S1161,
"protected List<Data> getLoadingSequence(Map<?, ?> entries){
    List<Data> keyValueSequence = new ArrayList<>(entries.size() * 2);
    for (Map.Entry<?, ?> entry : entries.entrySet()) {
        Object key = entry.getKey();
        MetadataAwareValue loaderEntry = (MetadataAwareValue) entry.getValue();
        Object value = loaderEntry.getValue();
        long expirationTime = loaderEntry.getExpirationTime();
        Data dataKey = mapServiceContext.toData(key);
        Data dataValue = mapServiceContext.toData(value);
        Data dataExpirationTime = mapServiceContext.toData(expirationTime);
        keyValueSequence.add(dataKey);
        keyValueSequence.add(dataValue);
        keyValueSequence.add(dataExpirationTime);
    }
    return keyValueSequence;
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    startDev = in.readLong();
    endDev = in.readLong();
    unwrapLeft = in.readBoolean();
    unwrapRight = in.readBoolean();
    paramText = (String) in.readObject();
}",java:S1161,
"public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions){
    return this.methodName.equals(name) ? new DumpMethodVisitor(this::setText) : null;
}",java:S1161,
"public String toString(){
    return ""Object contains"";
}",java:S1161,
"public void run(){
    while (true) {
        try {
            TaskExecutionContext taskExecutionContext = globalTaskInstanceDispatchQueue.take();
            LogUtils.setTaskInstanceLogFullPathMDC(taskExecutionContext.getLogPath());
            LogUtils.setTaskInstanceIdMDC(taskExecutionContext.getTaskInstanceId());
            long remainTime = DateUtils.getRemainTime(DateUtils.timeStampToDate(taskExecutionContext.getFirstSubmitTime()), taskExecutionContext.getDelayTime() * 60L);
            if (remainTime > 0) {
                log.info(""Current taskInstance is choose delay execution, delay time: {}s"", remainTime);
                taskExecutionContext.setCurrentExecutionStatus(TaskExecutionStatus.DELAY_EXECUTION);
                workerMessageSender.sendMessage(taskExecutionContext, ITaskInstanceExecutionEvent.TaskInstanceExecutionEventType.FINISH);
            }
            WorkerDelayTaskExecuteRunnable workerTaskExecuteRunnable = WorkerTaskExecuteRunnableFactoryBuilder.createWorkerDelayTaskExecuteRunnableFactory(taskExecutionContext, workerConfig, workerMessageSender, taskPluginManager, storageOperate, workerRegistryClient).createWorkerTaskExecuteRunnable();
            if (workerManager.offer(workerTaskExecuteRunnable)) {
                log.info(""Success submit WorkerDelayTaskExecuteRunnable to WorkerManagerThread's waiting queue"");
            }
        } catch (InterruptedException e) {
            log.error(""GlobalTaskDispatchQueueLooper interrupted"");
            break;
        } catch (Exception ex) {
            log.error(""GlobalTaskDispatchQueueLooper error"", ex);
        } finally {
            LogUtils.removeTaskInstanceIdMDC();
            LogUtils.removeTaskInstanceLogFullPathMDC();
        }
    }
}",java:S1161,
"public ValueWrapper putIfAbsent(Object key, Object value){
    Object result = map.putIfAbsent(key, toStoreValue(value));
    return result != null ? new SimpleValueWrapper(fromStoreValue(result)) : null;
}",java:S1161,
"public void setValue(Object object){
    Product item = (Product) object;
    setText(item.getName());
}",java:S1161,
"public void run(){
    shutdown();
}",java:S1161,
"public LeftTuple createLeftTuple(LeftTuple leftTuple, Sink sink, PropagationContext pctx, boolean leftTupleMemoryEnabled){
    throw new UnsupportedOperationException();
}",java:S1161,
"public String getNativeReadMethodName(){
    return ""getValue"";
}",java:S1161,
"public Expression visitLogicAndExpression(LogicAndViewExpression logicAndExpression, Void context){
    Pair<Expression, Expression> pair = this.getExpressionsForBinaryExpression(logicAndExpression);
    return new LogicAndExpression(pair.left, pair.right);
}",java:S1161,
"public RequestContext createContext(){
    return PersistableRunner.this.createContext();
}",java:S1161,
"public void resumeMajorGC(){
    gcThread.resumeMajorGC();
}",java:S1161,
"public void save(){
    List<Friendship> friendships = DatabaseHelper.getReverseFriends(getPlayer());
    for (Friendship friend : friendships) {
        friend.setFriendProfile(this.getPlayer());
        friend.save();
    }
}",java:S1161,
"public void handleException(InternalMatch internalMatch, Exception e){
    agendas[0].handleException(internalMatch, e);
}",java:S1161,
"public void removeNotify(){
    KeyboardFocusManager.getCurrentKeyboardFocusManager().removeKeyEventDispatcher(this);
    super.removeNotify();
}",java:S1161,
"public String toString(){
    return ""[BeforeActivationFired("" + getActivation().getActivationNumber() + ""): rule="" + getActivation().getRule().getName() + ""; tuple="" + getActivation().getTuple() + ""]"";
}",java:S1161,
" void replaceAll(@Nonnull BiFunction<? super K, ? super V, ? extends V> function){
    ConcurrentMap.super.replaceAll(function);
}",java:S1161,
"public void keyTyped(KeyEvent e){
}",java:S1161,
"public Builder<T> add(T item){
    super.add(item);
    return this;
}",java:S1161,
"public void serviceInit(Configuration conf) throws Exception{
    super.serviceInit(conf);
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    sequential = in.readBoolean();
    sequentialAgenda = (SequentialAgenda) in.readObject();
    maintainTms = in.readBoolean();
    removeIdentities = in.readBoolean();
    shareAlphaNodes = in.readBoolean();
    shareBetaNodes = in.readBoolean();
    permGenThreshold = in.readInt();
    jittingThreshold = in.readInt();
    alphaNodeHashingThreshold = in.readInt();
    alphaNodeRangeIndexThreshold = in.readInt();
    betaNodeRangeIndexEnabled = in.readBoolean();
    compositeKeyDepth = in.readInt();
    indexLeftBetaMemory = in.readBoolean();
    indexRightBetaMemory = in.readBoolean();
    indexPrecedenceOption = (IndexPrecedenceOption) in.readObject();
    assertBehaviour = (AssertBehaviour) in.readObject();
    consequenceExceptionHandler = (String) in.readObject();
    ruleBaseUpdateHandler = (String) in.readObject();
    conflictResolver = (ConflictResolver) in.readObject();
    parallelExecution = (ParallelExecutionOption) in.readObject();
    maxThreads = in.readInt();
    eventProcessingMode = (EventProcessingOption) in.readObject();
    declarativeAgenda = in.readBoolean();
    sessionPoolSize = in.readInt();
}",java:S1161,
"protected Operation createOperation(List<Data> loadingSequence){
    MapOperationProvider operationProvider = mapServiceContext.getMapOperationProvider(name);
    return operationProvider.createPutFromLoadAllOperation(name, loadingSequence, true);
}",java:S1161,
"protected void sendOperationsForNamespaces(int permits){
    InternalPartitionServiceImpl partitionService = getService();
    try {
        PartitionReplicationEvent event = new PartitionReplicationEvent(getCallerAddress(), partitionId, getReplicaIndex());
        readReplicaVersions();
        final Iterator<ServiceNamespace> iterator = namespaces.iterator();
        for (int i = 0; i < permits; i++) {
            ServiceNamespace namespace = iterator.next();
            Collection<Operation> operations = Collections.emptyList();
            Collection<ChunkSupplier> chunkSuppliers = Collections.emptyList();
            if (NonFragmentedServiceNamespace.INSTANCE.equals(namespace)) {
                operations = createNonFragmentedReplicationOperations(event);
            } else {
                chunkSuppliers = isChunkedMigrationEnabled() ? collectChunkSuppliers(event, namespace) : chunkSuppliers;
                if (isEmpty(chunkSuppliers)) {
                    operations = createFragmentReplicationOperationsOffload(event, namespace);
                }
            }
            if (isNotEmpty(operations) || isNotEmpty(chunkSuppliers)) {
                sendOperationsOnPartitionThread(new CopyOnWriteArrayList<>(operations), new CopyOnWriteArrayList<>(chunkSuppliers), namespace);
                while (hasRemainingChunksToSend(chunkSuppliers)) {
                    sendOperationsOnPartitionThread(new CopyOnWriteArrayList<>(operations), new CopyOnWriteArrayList<>(chunkSuppliers), namespace);
                }
                iterator.remove();
            }
        }
    } finally {
        partitionService.getReplicaManager().releaseReplicaSyncPermits(permits);
    }
}",java:S1161,
"public synchronized void write(int b){
    if (nBytes < maxBytes) {
        ++nBytes;
        super.write(b);
    }
}",java:S1161,
"public void visitSource(final String source, final String debug){
}",java:S1161,
"public final boolean isInitialized(){
    if (!extensionsAreInitialized()) {
        return false;
    }
    return true;
}",java:S1161,
"public Expression visitSubtractionExpression(SubtractionViewExpression subtractionExpression, Void context){
    Pair<Expression, Expression> pair = this.getExpressionsForBinaryExpression(subtractionExpression);
    return new SubtractionExpression(pair.left, pair.right);
}",java:S1161,
"public Builder clear(){
    super.clear();
    versionMajor_ = 0;
    bitField0_ = (bitField0_ & ~0x00000001);
    versionMinor_ = 0;
    bitField0_ = (bitField0_ & ~0x00000002);
    versionRevision_ = 0;
    bitField0_ = (bitField0_ & ~0x00000004);
    return this;
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
}",java:S1161,
"public KieModuleMetaInfo generateKieModuleMetaInfo(ResourceStore trgMfs){
    Map<String, TypeMetaInfo> typeInfos = new HashMap<>();
    Map<String, Set<String>> rulesPerPackage = new HashMap<>();
    KieModuleModel kieModuleModel = kModule.getKieModuleModel();
    for (String kieBaseName : kieModuleModel.getKieBaseModels().keySet()) {
        KnowledgeBuilder kBuilder = kModule.getKnowledgeBuilderForKieBase(kieBaseName);
        KieModuleCache.KModuleCache.Builder _kmoduleCacheBuilder = createCacheBuilder();
        KieModuleCache.CompilationData.Builder _compData = createCompilationData();
        for (KiePackage kPkg : kBuilder.getKnowledgePackages()) {
            PackageRegistry pkgRegistry = ((InternalKnowledgeBuilder) kBuilder).getPackageRegistry(kPkg.getName());
            JavaDialectRuntimeData runtimeData = (JavaDialectRuntimeData) pkgRegistry.getDialectRuntimeRegistry().getDialectData(""java"");
            List<String> types = new ArrayList<>();
            for (FactType factType : kPkg.getFactTypes()) {
                Class<?> typeClass = ((ClassDefinition) factType).getDefinedClass();
                TypeDeclaration typeDeclaration = pkgRegistry.getPackage().getTypeDeclaration(typeClass);
                if (typeDeclaration != null) {
                    typeInfos.put(typeClass.getName(), new TypeMetaInfo(typeDeclaration));
                }
                String className = factType.getName();
                String internalName = className.replace('.', '/') + "".class"";
                if (trgMfs != null) {
                    byte[] bytes = runtimeData.getBytecode(internalName);
                    if (bytes != null) {
                        trgMfs.write(internalName, bytes, true);
                    }
                }
                types.add(internalName);
            }
            Set<String> rules = rulesPerPackage.get(kPkg.getName());
            if (rules == null) {
                rules = new HashSet<>();
            }
            for (Rule rule : kPkg.getRules()) {
                rules.add(rule.getName());
            }
            if (!rules.isEmpty()) {
                rulesPerPackage.put(kPkg.getName(), rules);
            }
            addToCompilationData(_compData, runtimeData, types);
        }
        _kmoduleCacheBuilder.addCompilationData(_compData.build());
        if (trgMfs != null) {
            writeCompilationDataToTrg(_kmoduleCacheBuilder.build(), kieBaseName, trgMfs);
        }
    }
    return new KieModuleMetaInfo(typeInfos, rulesPerPackage);
}",java:S1161,
"public void run(){
    while (!ServerLifeCycleManager.isStopped()) {
        try {
            if (MapUtils.isEmpty(needToRetryMessages)) {
                Thread.sleep(MESSAGE_RETRY_WINDOW);
            }
            long now = System.currentTimeMillis();
            Iterator<Map.Entry<Integer, List<TaskInstanceMessage>>> iterator = needToRetryMessages.entrySet().iterator();
            while (iterator.hasNext()) {
                Map.Entry<Integer, List<TaskInstanceMessage>> taskEntry = iterator.next();
                Integer taskInstanceId = taskEntry.getKey();
                List<TaskInstanceMessage> taskInstanceMessages = taskEntry.getValue();
                if (taskInstanceMessages.isEmpty()) {
                    iterator.remove();
                    continue;
                }
                LogUtils.setTaskInstanceIdMDC(taskInstanceId);
                try {
                    for (TaskInstanceMessage taskInstanceMessage : taskInstanceMessages) {
                        ITaskInstanceExecutionEvent.TaskInstanceExecutionEventType eventType = taskInstanceMessage.getEventType();
                        ITaskInstanceExecutionEvent event = taskInstanceMessage.getEvent();
                        if (now - event.getEventSendTime() > MESSAGE_RETRY_WINDOW) {
                            log.info(""Begin retry send message to master, event: {}"", event);
                            event.setEventSendTime(now);
                            messageSenderMap.get(eventType).sendEvent(event);
                            log.info(""Success send message to master, event: {}"", event);
                        }
                    }
                } catch (Exception e) {
                    log.warn(""Retry send message to master error"", e);
                } finally {
                    LogUtils.removeTaskInstanceIdMDC();
                }
            }
            Thread.sleep(Constants.SLEEP_TIME_MILLIS);
        } catch (InterruptedException instance) {
            log.warn(""The message retry thread is interrupted, will break this loop"", instance);
            Thread.currentThread().interrupt();
            break;
        } catch (Exception ex) {
            log.error(""Retry send message failed, get an known exception."", ex);
        }
    }
}",java:S1161,
"public boolean contains(final Object o){
    return Object2LongHashMap.this.containsValue(o);
}",java:S1161,
"protected RelDataType deriveRowType(){
    return new RelRecordType(Lists.newArrayList());
}",java:S1161,
"public void remove(){
    if (this.currentNode != null) {
        LeftTupleSinkNodeList.this.remove(this.currentNode);
        this.currentNode = null;
    } else {
        throw new IllegalStateException(""No item to remove. Call next() before calling remove()."");
    }
}",java:S1161,
"public Builder clear(){
    super.clear();
    dialect_ = """";
    bitField0_ = (bitField0_ & ~0x00000001);
    if (entryBuilder_ == null) {
        entry_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
    } else {
        entryBuilder_.clear();
    }
    return this;
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    field = (FieldValue) in.readObject();
    declarations = (Declaration[]) in.readObject();
    rightReadAccessor = (ReadAccessor) in.readObject();
    evaluator = (Evaluator) in.readObject();
}",java:S1161,
"public void write(byte[] bytes, int off, int len){
    dst.put(bytes, off, len);
}",java:S1161,
"public int getId(){
    return Id;
}",java:S1161,
"public String toString(){
    return ""String not matches"";
}",java:S1161,
"public String getSignature(String baseString) throws OAuthException{
    String returnValue = super.getSignature(baseString);
    return returnValue;
}",java:S1161,
"public void onLoad(){
    this.acceptCond = acceptCond.stream().filter(p -> p.getType() != null).toList();
    this.finishCond = finishCond.stream().filter(p -> p.getType() != null).toList();
    this.failCond = failCond.stream().filter(p -> p.getType() != null).toList();
    this.beginExec = beginExec.stream().filter(p -> p.type != null).toList();
    this.finishExec = finishExec.stream().filter(p -> p.type != null).toList();
    this.failExec = failExec.stream().filter(p -> p.type != null).toList();
    if (this.acceptCondComb == null)
        this.acceptCondComb = LogicType.LOGIC_NONE;
    if (this.finishCondComb == null)
        this.finishCondComb = LogicType.LOGIC_NONE;
    if (this.failCondComb == null)
        this.failCondComb = LogicType.LOGIC_NONE;
    if (this.gainItems == null)
        this.gainItems = Collections.emptyList();
    addToCache();
}",java:S1161,
"public Builder mergeFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException{
    KieModuleCache.Signature parsedMessage = null;
    try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (KieModuleCache.Signature) e.getUnfinishedMessage();
        throw e;
    } finally {
        if (parsedMessage != null) {
            mergeFrom(parsedMessage);
        }
    }
    return this;
}",java:S1161,
"public Class<?> getColumnClass(int c){
    return Product.class;
}",java:S1161,
"public synchronized void mark(final int limit){
    try {
        in.mark(limit);
    } catch (IOException ioe) {
        throw new RuntimeException(ioe.getMessage());
    }
}",java:S1161,
"public void endElement(String uri, String localName, String qName) throws SAXException{
    depth--;
    if (0 == depth) {
        xmlReader.setContentHandler(contentHandler);
    }
}",java:S1161,
"public void setPlayer(Player player){
    this.player = player;
    this.ownerUid = player.getUid();
}",java:S1161,
"public HikariDataSource createDataSourcePool(BaseConnectionParam baseConnectionParam, DbType dbType){
    checkKerberosEnv();
    UserGroupInformationFactory.login(baseConnectionParam.getUser());
    return super.createDataSourcePool(baseConnectionParam, dbType);
}",java:S1161,
"public String toString(){
    return ""Array contains"";
}",java:S1161,
"public void mouseReleased(MouseEvent e){
    output.setText(null);
    tableModel.clear();
    System.out.println(""------ Reset ------"");
}",java:S1161,
"public void addObjectSink(final ObjectSink objectSink){
    final ObjectTypeNode node = (ObjectTypeNode) objectSink;
    this.objectTypeNodes.put(node.getObjectType(), node);
}",java:S1161,
"public boolean equals(final Object obj){
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof GlobalExtractor)) {
        return false;
    }
    final GlobalExtractor other = (GlobalExtractor) obj;
    return this.objectType.equals(other.objectType);
}",java:S1161,
"protected void removeGlobal(InternalKnowledgePackage pkg, String toBeRemoved){
    if (assetFilter != null && AssetFilter.Action.REMOVE.equals(assetFilter.accept(ResourceChange.Type.GLOBAL, pkg.getName(), toBeRemoved))) {
        pkg.removeGlobal(toBeRemoved);
        kBase.removeGlobal(toBeRemoved);
    }
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeObject(queryListener);
}",java:S1161,
"public void dispose(){
    for (KieRuntimeEventManager ksession : ksessions) {
        ksession.removeEventListener(ruleRuntimeStats);
    }
    super.dispose();
}",java:S1161,
"public void remove(){
    throw new UnsupportedOperationException(""remove"");
}",java:S1161,
"public ResourceConfiguration fromProperties(Properties prop){
    super.fromProperties(prop);
    systemId = prop.getProperty(""drools.jaxb.conf.systemId"", null);
    String classesStr = prop.getProperty(""drools.jaxb.conf.classes"", ""[]"");
    classesStr = classesStr.substring(1, classesStr.length() - 1).trim();
    classes = new ArrayList<>();
    if (classesStr != null && classesStr.length() > 1) {
        for (String clz : classesStr.split("","")) {
            classes.add(clz.trim());
        }
    }
    String optsClass = prop.getProperty(""drools.jaxb.conf.opts.class"", null);
    if (optsClass != null) {
        try {
            xjcOpts = (Options) Class.forName(optsClass).newInstance();
            String optsLang = prop.getProperty(""drools.jaxb.conf.opts.lang"", null);
            if (optsLang != null) {
                xjcOpts.setSchemaLanguage(Language.valueOf(optsLang));
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
    return this;
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeLong(startDev);
    out.writeLong(endDev);
    out.writeBoolean(unwrapLeft);
    out.writeBoolean(unwrapRight);
    out.writeObject(paramText);
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeObject(groupName);
    out.writeInt(size);
}",java:S1161,
"public String toString(){
    return super.toString() + "" "" + this.getText();
}",java:S1161,
"public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException{
    getSerializedSize();
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getKeyAliasBytes());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, signature_);
    }
    getUnknownFields().writeTo(output);
}",java:S1161,
" void update(ByteBuffer buffer){
    int pos = buffer.position();
    int limit = buffer.limit();
    int rem = limit - pos;
    if (rem <= 0) {
        return;
    }
    if (buffer.hasArray()) {
        update(buffer.array(), pos + buffer.arrayOffset(), rem);
    } else {
        byte[] b = new byte[Math.min(buffer.remaining(), 4096)];
        while (buffer.hasRemaining()) {
            int length = Math.min(buffer.remaining(), b.length);
            buffer.get(b, 0, length);
            update(b, 0, length);
        }
    }
    buffer.position(limit);
}",java:S1161,
"public void shutdown(){
    isShutdown = true;
}",java:S1161,
"public void printComment(final Optional<Comment> comment, final Void arg){
    comment.ifPresent(c -> c.accept(this, arg));
}",java:S1161,
"public JsonObject toJson(){
    JsonObject json = super.toJson();
    json.add(""wanConfigName"", wanConfigName);
    return json;
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    breaking = in.readBoolean();
}",java:S1161,
" void forEach(@Nonnull BiConsumer<? super K, ? super V> action){
    ConcurrentMap.super.forEach(action);
}",java:S1161,
"public void run(){
    CuratorFramework zk = null;
    List<String> nodes = null;
    isRunning = true;
    while (!stop) {
        try {
            try {
                zk = ZooKeeperStorage.zkOpen(appConf);
                nodes = getChildList(zk);
                for (String node : nodes) {
                    boolean deleted = checkAndDelete(node, zk);
                    if (!deleted) {
                        break;
                    }
                }
                zk.close();
            } catch (Exception e) {
                LOG.error(""Cleanup cycle failed: "" + e.getMessage());
            } finally {
                if (zk != null)
                    zk.close();
            }
            long sleepMillis = (long) (Math.random() * interval);
            LOG.info(""Next execution: "" + new Date(new Date().getTime() + sleepMillis));
            Thread.sleep(sleepMillis);
        } catch (Exception e) {
            isRunning = false;
            LOG.error(""Cleanup failed: "" + e.getMessage(), e);
        }
    }
    isRunning = false;
}",java:S1161,
"protected void processAccumulateFunctions(AccumulateDescr descr, PatternDescr basePattern, BaseDescr input, MethodCallExpr accumulateDSL){
    accumulateDSL.setName(GROUP_BY_CALL);
    GroupByDescr groupByDescr = (GroupByDescr) descr;
    Expression expr = parseExpression(groupByDescr.getGroupingFunction());
    TypedExpressionResult result = new ExpressionTyper(context).toTypedExpression(expr);
    Optional<TypedExpression> optResult = result.getTypedExpression();
    if (optResult.isEmpty()) {
        context.addCompilationError(new InvalidExpressionErrorResult(""Unable to parse grouping expression: "" + groupByDescr.getGroupingFunction()));
        return;
    }
    for (String used : result.getUsedDeclarations()) {
        accumulateDSL.addArgument(context.getVarExpr(used));
    }
    TypedExpression typedExpression = optResult.get();
    String groupingKey = groupByDescr.getGroupingKey() != null ? groupByDescr.getGroupingKey() : generateUUID();
    context.addDeclarationReplacing(new DeclarationSpec(groupingKey, typedExpression.getRawClass()));
    accumulateDSL.addArgument(toVar(groupingKey));
    accumulateDSL.addArgument(buildConstraintExpression(typedExpression.getExpression(), result.getUsedDeclarations()));
    super.processAccumulateFunctions(descr, basePattern, input, accumulateDSL);
}",java:S1161,
"public int hashCode(){
    return this.hashCode;
}",java:S1161,
"protected Path getInitialWorkingDirectory(){
    return this.makeQualified(new Path(System.getProperty(""user.dir"", """")));
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    left = in.readObject();
    right = in.readObject();
}",java:S1161,
"public void setValue(Object value){
    if (value == null) {
        return;
    } else if (value instanceof Thing) {
        setText(((Thing) value).getName());
    } else {
        setText(value.toString());
    }
}",java:S1161,
"public VariableResolver createVariable(String name, Object value){
    throw new RuntimeException(""variable is a read-only function pointer"");
}",java:S1161,
"public String toString(){
    return ""<==[ActivationCancelled("" + getActivation().getActivationNumber() + ""): rule="" + getActivation().getRule().getName() + ""; tuple="" + getActivation().getTuple() + ""]"";
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    processId = (String) in.readObject();
    processName = (String) in.readObject();
    processInstanceId = in.readObject();
}",java:S1161,
"public void newCell(final int row, final int column, final String value, final int mergedColStart){
    if (!isInRuleTable) {
        super.newCell(row, column, value, mergedColStart);
        return;
    }
    if (StringUtils.isEmpty(value)) {
        return;
    }
    if (row == (ruleTableRow) && column > ruleTableColumn) {
        _horizontalConditions.add(createCondition(value, _horizontalCondition));
    } else if (row > (ruleTableRow) && column == ruleTableColumn) {
        _currentVerticalCondition = createCondition(value, _verticalCondition);
    } else if (row > (ruleTableRow) && column > ruleTableColumn) {
        createRule(row, column, value);
    }
}",java:S1161,
"public void onLoad(){
    this.serverBuffType = this.serverBuffType != null ? this.serverBuffType : ServerBuffType.SERVER_BUFF_NONE;
}",java:S1161,
"public String getTableName(){
    return ""SC_Rss_Channels"";
}",java:S1161,
"public boolean remove(final String resourceName){
    invokerLookups.remove(resourceName);
    if (getStore().remove(convertClassToResourcePath(resourceName)) != null) {
        this.wireList.remove(resourceName);
        this.dirty = true;
        return true;
    }
    return false;
}",java:S1161,
"public String toString(){
    return ""Array not contains"";
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeChar(left);
    out.writeChar(right);
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeLong(factId);
    out.writeObject(objectToString);
}",java:S1161,
"public boolean retainAll(Collection<?> coll){
    throw new UnsupportedOperationException();
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeObject(enumLiterals);
}",java:S1161,
"public Object getMessageObject(){
    if (messageObject == null && messageData != null) {
        messageObject = serializationService.toObject(messageData);
    }
    return messageObject;
}",java:S1161,
"public synchronized void writeToDisk(){
    super.writeToDisk();
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    this.parameters = (Declaration[]) in.readObject();
}",java:S1161,
"public String toString(){
    return ""[EntryPointNode("" + this.id + "") "" + this.entryPoint + "" ]"";
}",java:S1161,
"public void _setFieldTMS(TraitFieldTMS __$$field_Tms$$){
    _getDynamicProperties().put(FIELDTMS_FIELD_NAME, __$$field_Tms$$);
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    startTS = in.readLong();
    endTS = in.readLong();
}",java:S1161,
"public String toString(){
    return ""FileResource[file="" + this.file.toString() + ""]"";
}",java:S1161,
"public DefaultEventHandle clone(){
    DefaultEventHandle clone = new DefaultEventHandle(getId(), getIdentityHashCode(), getObject(), getRecency(), getStartTimestamp(), getDuration(), getEntryPointId());
    clone.setActivationsCount(getActivationsCount());
    clone.setOtnCount(getOtnCount());
    clone.setExpired(isExpired());
    clone.setEqualityKey(getEqualityKey());
    clone.linkedTuples = this.linkedTuples.clone();
    clone.setObjectHashCode(getObjectHashCode());
    clone.wmEntryPoint = this.wmEntryPoint;
    return clone;
}",java:S1161,
"protected void startEvaluation(InternalAgendaGroup group){
    super.startEvaluation(group);
    parallelPreEvaluation(group);
}",java:S1161,
"public int getIndex(){
    return -1;
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeObject(this.file);
    out.writeObject(this.encoding);
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeLong(endDev);
    out.writeObject(paramText);
}",java:S1161,
"public String getCondition(String condition, int index){
    if (index == -1) {
        StringBuilder conditionString = new StringBuilder(""ArrayCell(row == r, column == $param"");
        if (!StringUtils.isEmpty(condition)) {
            conditionString.append("", value "").append(condition);
        }
        conditionString.append("")"");
        return conditionString.toString();
    } else {
        return type.getCondition(condition, index);
    }
}",java:S1161,
"public void visitInnerClass(final String name, final String outerName, final String innerName, final int access){
}",java:S1161,
"public String toString(){
    return ""[Query name='"" + getName() + ""']"";
}",java:S1161,
"public List<String> getIps(){
    if (m_report == null) {
        return new ArrayList<String>();
    } else {
        return SortHelper.sortIpAddress(m_report.getIps());
    }
}",java:S1161,
"public void addObjectSink(final ObjectSink objectSink){
    final EntryPointNode node = (EntryPointNode) objectSink;
    entryPoints.put(node.getEntryPoint(), node);
    kBase.registerAddedEntryNodeCache(node);
}",java:S1161,
"public boolean isSequential(){
    return delegate.isSequential();
}",java:S1161,
"public void registerEvaluationContext(RuleBuildContext buildContext){
    evaluationContext.addContext(buildContext);
}",java:S1161,
"public String getDomain(){
    return m_domain;
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeObject(this.sinks);
}",java:S1161,
"public String toString(){
    return "">==[AgendaGroupPushedEvent("" + getAgendaGroup().getName() + ""]"";
}",java:S1161,
"public boolean returnsResponse(){
    return true;
}",java:S1161,
"protected void preInitRuleTable(final int row, final int column, final String value){
    this.ruleTableColumn = column;
    this.ruleTableRow = row;
    this.isInRuleTable = true;
    this._currentAgendaGroup = getProperties().getSingleProperty(AGENDAGROUP_TAG);
    this._action = getProperties().getSingleProperty(ACTION_TAG);
    this._horizontalCondition = getProperties().getSingleProperty(HORIZONTALCONDITION_TAG);
    this._verticalCondition = getProperties().getSingleProperty(VERTICALCONDITION_TAG);
    String precondition = getProperties().getSingleProperty(PRECONDITION_TAG);
    if (precondition != null) {
        this._currentPrecondition = new Condition();
        this._currentPrecondition.setSnippet(precondition);
    }
}",java:S1161,
"public void resumeMinorGC(){
    gcThread.resumeMinorGC();
}",java:S1161,
"public boolean isGlobal(){
    return true;
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
}",java:S1161,
"public final boolean isInitialized(){
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized != -1)
        return isInitialized == 1;
    if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
    }
    memoizedIsInitialized = 1;
    return true;
}",java:S1161,
"public int getSerializedSize(){
    int size = memoizedSerializedSize;
    if (size != -1)
        return size;
    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream.computeBytesSize(1, getKeyAliasBytes());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream.computeBytesSize(2, signature_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeBoolean(mutabilityEnabled);
}",java:S1161,
"public Map getCore(){
    return __$$dynamic_properties_map$$;
}",java:S1161,
"public void mousePressed(MouseEvent e){
    gameView.getKsession().insert(new ClimbCommand());
    gameView.getKsession().fireAllRules();
}",java:S1161,
"public void mouseReleased(MouseEvent e){
    JTable jtable = (JTable) e.getSource();
    TableModel tableModel = (TableModel) jtable.getModel();
    tableModel.removeItem(jtable.getSelectedRow());
}",java:S1161,
"public String toString(){
    return ""coincides["" + startDev + "", "" + endDev + ""]"";
}",java:S1161,
"public boolean equals(Object object){
    if (object == null) {
        return false;
    }
    return (object == this || (object instanceof FileSystemResource && file.equals(((FileSystemResource) object).file)));
}",java:S1161,
"public void mousePressed(MouseEvent e){
    gameView.getKsession().insert(new MoveCommand(move));
    gameView.getKsession().fireAllRules();
}",java:S1161,
"public boolean isEmpty(){
    return delegate.isEmpty();
}",java:S1161,
"public boolean validateSettings(){
    CompositeValidator validator = new CompositeValidator();
    if (useCustomTerminalProperty.getValue()) {
        validator.addValidators(terminalCommandValidator);
    }
    if (useCustomFileBrowserProperty.getValue()) {
        validator.addValidators(fileBrowserCommandValidator);
    }
    ValidationStatus validationStatus = validator.getValidationStatus();
    if (!validationStatus.isValid()) {
        validationStatus.getHighestMessage().ifPresent(message -> dialogService.showErrorDialogAndWait(message.getMessage()));
        return false;
    }
    return true;
}",java:S1161,
"protected void readInternal(ObjectDataInput in) throws IOException{
    super.readInternal(in);
    name = in.readString();
}",java:S1161,
"public LeftTuple createLeftTuple(InternalFactHandle factHandle, boolean leftTupleMemoryEnabled){
    return new ReactiveFromNodeLeftTuple(factHandle, this, leftTupleMemoryEnabled);
}",java:S1161,
"public Permission getRequiredPermission(){
    return new MapPermission(parameters.name, ActionConstants.ACTION_AGGREGATE);
}",java:S1161,
"public boolean ignoreOptionalProblems(){
    return true;
}",java:S1161,
"public String toString(){
    return ""["" + this.row + "","" + this.col + ""]: "" + this.message;
}",java:S1161,
"protected void writeInternal(ObjectDataOutput out) throws IOException{
    super.writeInternal(out);
    out.writeString(name);
}",java:S1161,
"public void performBeforeUpdate(){
    setUpdateDate(new Date());
}",java:S1161,
" boolean isEvent(){
    return true;
}",java:S1161,
"public String getRootTableName(){
    return ""SC_Rss_Channels"";
}",java:S1161,
"public void _setTraitMap(Map map){
    _getDynamicProperties().put(TRAITSET_FIELD_NAME, map);
}",java:S1161,
"public Class<?> loadClass(String className) throws ClassNotFoundException{
    try {
        return super.loadClass(className);
    } catch (ClassNotFoundException cnfe) {
    }
    String fileName = className.replace('.', '/') + "".class"";
    byte[] bytes = mfs.getBytes(fileName);
    if (bytes == null) {
        throw new ClassNotFoundException(className);
    }
    return defineClass(className, bytes, 0, bytes.length);
}",java:S1161,
"public RightTuple getBlocker(){
    return this.blocker;
}",java:S1161,
"public Builder clone(){
    return create().mergeFrom(buildPartial());
}",java:S1161,
"public Builder mergeFrom(com.google.protobuf.Message other){
    if (other instanceof KieModuleCache.CompilationData) {
        return mergeFrom((KieModuleCache.CompilationData) other);
    } else {
        super.mergeFrom(other);
        return this;
    }
}",java:S1161,
"protected boolean doRemove(final RuleRemovalContext context, final ReteooBuilder builder){
    return false;
}",java:S1161,
"public String getText(){
    return text;
}",java:S1161,
"public String toString(){
    return ""==>[RuleFlowGroupActivated(name="" + getRuleFlowGroup().getName() + ""; size="" + getRuleFlowGroup().size() + "")]"";
}",java:S1161,
"public VariableResolver createIndexedVariable(int index, String name, Object value, Class<?> type){
    throw new RuntimeException(""variable is a read-only function pointer"");
}",java:S1161,
"public void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException{
    if (skipElement(uri, localName, qName, atts)) {
        xmlReader.setContentHandler(new IgnoringContentHandler(xmlReader, this));
    } else {
        super.startElement(uri, localName, qName, atts);
    }
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    nodeId = (String) in.readObject();
    nodeName = (String) in.readObject();
    nodeInstanceId = (String) in.readObject();
}",java:S1161,
"public AnnotationVisitor visitAnnotation(final String name, final String desc){
    return new DummyAnnotationVisitor();
}",java:S1161,
"public void visit(RuleJoinedPatterns jp, Void v){
    if (jp.getType() == RuleJoinedPatterns.Type.AND) {
        CEDescrBuilder<?, ?> lhs = lhsList.peek().and();
        lhsList.push(lhs);
        for (RuleItem item : jp.getItems()) {
            item.accept(this, v);
        }
        lhsList.pop();
        return;
    }
    if (jp.getType() == RuleJoinedPatterns.Type.OR) {
        CEDescrBuilder<?, ?> lhs = lhsList.peek().or();
        lhsList.push(lhs);
        for (RuleItem ruleItem : jp.getItems()) {
            ruleItem.accept(this, v);
        }
        lhsList.pop();
        return;
    }
}",java:S1161,
"public String toString(){
    return ""starts["" + ((paramText != null) ? paramText : """") + ""]"";
}",java:S1161,
"public Expression visitGreaterEqualExpression(GreaterEqualViewExpression greaterEqualExpression, Void context){
    Pair<Expression, Expression> pair = this.getExpressionsForBinaryExpression(greaterEqualExpression);
    return new GreaterEqualExpression(pair.left, pair.right);
}",java:S1161,
"public boolean isValid(String signature, String baseString) throws OAuthException{
    log.debug(String.format(""Signature for %s is %s"", baseString, this.getSignature(baseString)));
    return super.isValid(signature, baseString);
}",java:S1161,
"public HypervisorUpdateJobConfig setOwner(final Owner owner){
    if (owner == null) {
        throw new IllegalArgumentException(""owner is null"");
    }
    this.setContextOwner(owner).setJobArgument(OWNER_KEY, owner.getKey());
    return this;
}",java:S1161,
"public synchronized int read(byte[] b, int off, int len) throws IOException{
    if (in == null) {
        throw new IOException(""Stream Closed"");
    }
    while (slack == null) {
        char[] buf = new char[len];
        int n = in.read(buf);
        if (n == -1) {
            return -1;
        }
        if (n > 0) {
            slack = new String(buf, 0, n).getBytes(encoding);
            begin = 0;
        }
    }
    if (len > slack.length - begin) {
        len = slack.length - begin;
    }
    System.arraycopy(slack, begin, b, off, len);
    if ((begin += len) >= slack.length) {
        slack = null;
    }
    return len;
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    if (CompiledInvoker.isCompiledInvoker(this.expression)) {
        out.writeObject(null);
    } else {
        out.writeObject(this.expression);
    }
    out.writeObject(this.requiredDeclarations);
    out.writeObject(this.previousDeclarations);
    out.writeObject(this.localDeclarations);
    out.writeObject(this.cloned);
}",java:S1161,
"public String toString(){
    return ""ClassPathResource[path="" + this.path + ""]"";
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeObject(parameters);
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    this.sink = (LeftTupleSink) in.readObject();
    this.sinkArray = new LeftTupleSink[] { this.sink };
}",java:S1161,
"public void run(){
    try {
        InputStreamReader isr = new InputStreamReader(is);
        BufferedReader br = new BufferedReader(isr);
        while (true) {
            String line = br.readLine();
            if (line == null) {
                break;
            }
            console.printLine(line);
        }
    } catch (IOException ioe) {
        ioe.printStackTrace();
    }
}",java:S1161,
"public String toString(){
    return (text);
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
}",java:S1161,
"public boolean eval(Object arg){
    QueryableEntry entry = (QueryableEntry) arg;
    Data keyData = entry.getKeyData();
    return (key == null || key.equals(keyData)) && predicate.apply((Map.Entry) arg);
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeLong(finalRange);
    out.writeObject(paramText);
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    this.enumLiterals = (List<EnumLiteralDefinition>) in.readObject();
}",java:S1161,
"public Permission getRequiredPermission(){
    return new MapPermission(parameters, ActionConstants.ACTION_READ);
}",java:S1161,
"public boolean addDynamicSplitPruningEdge(org.apache.hadoop.hive.ql.metadata.Table table, ExprNodeDesc syntheticFilterPredicate){
    try {
        Collection<String> partitionColumns = ((HiveIcebergSerDe) table.getDeserializer()).partitionColumns();
        if (partitionColumns.size() > 0) {
            ExprNodeDesc clone = syntheticFilterPredicate.clone();
            String filterColumn = collectColumnAndReplaceDummyValues(clone, null);
            if (partitionColumns.contains(filterColumn)) {
                SearchArgument sarg = ConvertAstToSearchArg.create(conf, (ExprNodeGenericFuncDesc) clone);
                HiveIcebergFilterFactory.generateFilterExpression(sarg);
                LOG.debug(""Found Iceberg partition column to prune with predicate {}"", syntheticFilterPredicate);
                return true;
            }
        }
    } catch (UnsupportedOperationException uoe) {
        LOG.debug(""Unsupported predicate {}"", syntheticFilterPredicate, uoe);
    }
    LOG.debug(""Not found Iceberg partition columns to prune with predicate {}"", syntheticFilterPredicate);
    return false;
}",java:S1161,
"public int hashCode(){
    return toString().hashCode();
}",java:S1161,
"public void serviceStop() throws Exception{
    if (registry != null) {
        this.registry.stop();
    }
    super.serviceStop();
    ShuffleHandler.shutdown();
    shutdown();
    LlapOutputFormatService.get().stop();
    LOG.info(""LlapDaemon shutdown complete"");
}",java:S1161,
"public boolean isSelfReference(){
    return true;
}",java:S1161,
"public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException{
    getSerializedSize();
    com.google.protobuf.GeneratedMessage.ExtendableMessage<KieModuleCache.Header>.ExtensionWriter extensionWriter = newExtensionWriter();
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, version_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(4, signature_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(10, payload_);
    }
    extensionWriter.writeUntil(200, output);
    getUnknownFields().writeTo(output);
}",java:S1161,
"public synchronized boolean next(LongWritable key, Text value) throws IOException{
    boolean result = super.next(key, value);
    if (result) {
        System.out.println(""Read "" + value);
        rot13(value.getBytes(), 0, value.getLength());
        System.out.println(""Returned "" + value);
    }
    return result;
}",java:S1161,
"public int hashCode(){
    return this.path.hashCode();
}",java:S1161,
"public void compile(ReadAccessor reader){
    addCompileable((MVELCompileable) reader);
    ((MVELCompileable) reader).compile(this);
}",java:S1161,
"public void forEach(final BiConsumer<? super Long, ? super Long> action){
    longForEach(new UnboxingBiConsumer(action));
}",java:S1161,
"public String getMessage(){
    if (errorResponse != null) {
        return errorResponse.getRequestError().getServiceException().getText();
    } else {
        return super.getMessage();
    }
}",java:S1161,
"protected ReplicateTxBackupLogOperation createReplicateTxBackupLogOperation(){
    return new ReplicateAllowedDuringPassiveStateTxBackupLogOperation(getTransactionLog().getRecords(), getOwnerUuid(), getTxnId(), getTimeoutMillis(), getStartTime());
}",java:S1161,
"public ValueType getCoercedValueType(){
    return ValueType.OBJECT_TYPE;
}",java:S1161,
"public int getId(){
    return m_id;
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeObject(activationId);
    out.writeObject(rule);
    out.writeObject(declarations);
    out.writeObject(ruleFlowGroup);
    out.writeObject(factHandleIds);
}",java:S1161,
"public Map<String, Thing<Map>> _getTraitMap(){
    return (Map<String, Thing<Map>>) _getDynamicProperties().get(TRAITSET_FIELD_NAME);
}",java:S1161,
"public Set<String> getDomains(){
    return m_domains;
}",java:S1161,
"public boolean isGlobal(){
    return false;
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    groupName = (String) in.readObject();
    size = in.readInt();
}",java:S1161,
"public ReteEvaluator getReteEvaluator(){
    return wmEntryPoint.getReteEvaluator();
}",java:S1161,
"public String toString(){
    return ""&&"";
}",java:S1161,
"public void startOperation(InternalOperationType operationType){
    delegate.startOperation(operationType);
}",java:S1161,
" int fixedSize(){
    return FIXED_MESSAGE_SIZE;
}",java:S1161,
"public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException{
    getSerializedSize();
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, versionMajor_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, versionMinor_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, versionRevision_);
    }
    getUnknownFields().writeTo(output);
}",java:S1161,
"public String toString(){
    return ""[ConditionalBranchNode: cond="" + this.branchEvaluator + ""]"";
}",java:S1161,
"public String toString(){
    return ""[JavaDialectError message='"" + this.message + ""']"";
}",java:S1161,
"public void mousePressed(MouseEvent e){
    if (cavePanel.isVisible()) {
        cavePanel.setVisible(false);
        showCaveButton.setText(""SHOW"");
    } else {
        cavePanel.setVisible(true);
        showCaveButton.setText(""HIDE"");
    }
}",java:S1161,
"public String toString(){
    return ""overlappedby["" + ((paramText != null) ? paramText : """") + ""]"";
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeObject(this.sink);
}",java:S1161,
"public Builder clear(){
    super.clear();
    id_ = """";
    bitField0_ = (bitField0_ & ~0x00000001);
    data_ = com.google.protobuf.ByteString.EMPTY;
    bitField0_ = (bitField0_ & ~0x00000002);
    return this;
}",java:S1161,
"public void setNext(TupleList next){
}",java:S1161,
"public Vertex onNestedLoopJoin(JoinNestedLoopPhysicalRel rel){
    assert rel.getRight() instanceof HazelcastPhysicalScan : rel.getRight().getClass();
    Table rightTable = rel.getRight().getTable().unwrap(HazelcastTable.class).getTarget();
    collectObjectKeys(rightTable);
    dagBuildContext.setTable(rightTable);
    dagBuildContext.setRel(rel);
    VertexWithInputConfig vertexWithConfig = getJetSqlConnector(rightTable).nestedLoopReader(dagBuildContext, wrap(rel.rightFilter()), wrap(rel.rightProjection()), rel.joinInfo(dagBuildContext.getParameterMetadata()));
    Vertex vertex = vertexWithConfig.vertex();
    connectInput(rel.getLeft(), vertex, vertexWithConfig.configureEdgeFn());
    return vertex;
}",java:S1161,
"public boolean equals(Object object){
    if (!(object instanceof ClassPathResource)) {
        return false;
    }
    ClassPathResource other = (ClassPathResource) object;
    return this.path.equals(other.path) && this.clazz == other.clazz && this.classLoader == other.classLoader;
}",java:S1161,
" boolean isOOPath(){
    return getExpr() instanceof OOPathExpr;
}",java:S1161,
"public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException{
    getSerializedSize();
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getIdBytes());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, data_);
    }
    getUnknownFields().writeTo(output);
}",java:S1161,
"public Expression visitGreaterThanExpression(GreaterThanViewExpression greaterThanExpression, Void context){
    Pair<Expression, Expression> pair = this.getExpressionsForBinaryExpression(greaterThanExpression);
    return new GreaterThanExpression(pair.left, pair.right);
}",java:S1161,
"public IncrementalAppendScan newIncrementalAppendScan(){
    return lazyTable().newIncrementalAppendScan();
}",java:S1161,
"public void close() throws IOException{
}",java:S1161,
"public void addAll(Collection<? extends KnowledgeBuilderResult> results){
    this.results.addAll(results);
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    left = in.readLong();
    right = in.readLong();
}",java:S1161,
"public void renderDRL(final DRLOutput out){
    if (isCommented()) {
        out.writeLine(""//"" + getComment());
    }
    out.writeLine(""rule "" + this._name);
    if (this._description != null) {
        out.writeLine(""/* "" + this._description + "" */"");
    }
    for (String ms : this._metadata) {
        out.writeLine(""\t@"" + ms);
    }
    super.renderDRL(out);
    out.writeLine(""\twhen"");
    renderDRL(this._lhs, out);
    out.writeLine(""\tthen"");
    renderDRL(this._rhs, out);
    out.writeLine(""end\n"");
}",java:S1161,
"protected PasswordAuthentication getPasswordAuthentication(){
    return new PasswordAuthentication(username, password);
}",java:S1161,
"public synchronized int available() throws IOException{
    if (in == null) {
        throw new IOException(""Stream Closed"");
    }
    if (slack != null) {
        return slack.length - begin;
    }
    if (in.ready()) {
        return 1;
    } else {
        return 0;
    }
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    left = in.readDouble();
    right = in.readDouble();
}",java:S1161,
"public void setValue(Object object){
    Product item = (Product) object;
    setText(Double.toString(item.getPrice()));
}",java:S1161,
"public boolean isEmpty(){
    return multiResult.isEmpty();
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    this.accumulator = (Accumulator) in.readObject();
}",java:S1161,
"public synchronized void logEventCreated(final LogEvent logEvent){
    super.logEventCreated(logEvent);
}",java:S1161,
"public void performBeforePersist(){
    Date now = new Date();
    setCreationDate(now);
    setUpdateDate(now);
}",java:S1161,
"public String getMessage(){
    if (null == errorCode) {
        return super.getMessage();
    }
    return ""["" + errorCode + ""] "" + super.getMessage();
}",java:S1161,
"public String toString(){
    return ""[DialectError message='"" + this.message + ""']"";
}",java:S1161,
"public void clear(){
    Object2LongHashMap.this.clear();
}",java:S1161,
"public Object getValue(Object object){
    throw new RuntimeException(""Can't extract a value from global "" + identifier + "" without a working memory reference"");
}",java:S1161,
"public boolean equals(final Object object){
    if (object == null) {
        return false;
    }
    if (object instanceof EqualityKey) {
        return this == object;
    }
    return this.getFirst().getObject().equals(object);
}",java:S1161,
"public void init(Map core){
}",java:S1161,
"public Builder mergeFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException{
    KieModuleCache.CompilationData parsedMessage = null;
    try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (KieModuleCache.CompilationData) e.getUnfinishedMessage();
        throw e;
    } finally {
        if (parsedMessage != null) {
            mergeFrom(parsedMessage);
        }
    }
    return this;
}",java:S1161,
"protected void onDestroy(){
}",java:S1161,
"public String toString(){
    return ""Strings sound alike"";
}",java:S1161,
"public void finishSheet(){
}",java:S1161,
"public RecoverOperationResult visitCreateLogicalView(ICreateLogicalViewPlan createLogicalViewPlan, SchemaRegionMemoryImpl context){
    try {
        createLogicalView(createLogicalViewPlan);
        return RecoverOperationResult.SUCCESS;
    } catch (MetadataException e) {
        return new RecoverOperationResult(e);
    }
}",java:S1161,
"public MemberImpl getMember(){
    return (MemberImpl) super.getMember();
}",java:S1161,
"public AnnotationVisitor visitAnnotation(final String desc, final boolean visible){
    return new DummyAnnotationVisitor();
}",java:S1161,
"public void visitOuterClass(final String arg0, final String arg1, final String arg2){
}",java:S1161,
"public void clear(){
    delegate.clear();
}",java:S1161,
"public FieldVisitor visitField(final int arg0, final String arg1, final String arg2, final String arg3, final Object arg4){
    return null;
}",java:S1161,
"public void init(@Nonnull Context context) throws Exception{
    dataConnection = context.dataConnectionService().getAndRetainDataConnection(dataConnectionName, JdbcDataConnection.class);
    dataSource = new DataSourceFromConnectionSupplier(dataConnection::getConnection);
}",java:S1161,
"public String toString(){
    return ""SolrAnnotation [anno_uri:"" + getAnnoUri() + "", created:"" + getCreated() + "", bodyValue:"" + getBodyValue() + ""]"";
}",java:S1161,
"public void write(@Nonnull byte[] b, int off, int len){
    if ((off < 0) || (off > b.length) || (len < 0) || ((off + len) - b.length > 0)) {
        throw new IndexOutOfBoundsException(""off="" + off + "", len="" + len);
    }
    ensureCapacity(size + len);
    System.arraycopy(b, off, data, size, len);
    size += len;
}",java:S1161,
"protected ClientMessage encodeException(Throwable throwable){
    if (parameters == null) {
        return super.encodeException(throwable);
    }
    nodeEngine.getSqlService().closeOnError(parameters.queryId);
    if (throwable instanceof AccessControlException) {
        return super.encodeException(throwable);
    }
    if (!(throwable instanceof Exception)) {
        return super.encodeException(throwable);
    }
    if (logger.isFineEnabled()) {
        logger.fine(""Client SQL error: "" + throwable, throwable);
    }
    SqlError error = SqlClientUtils.exceptionToClientError((Exception) throwable, nodeEngine.getLocalMember().getUuid());
    return SqlExecuteCodec.encodeResponse(null, null, -1, error, false, -1);
}",java:S1161,
"protected Date getDate(ValueResolver valueResolver, Object object){
    LocalDate ld = ((LocalDate) getValue(valueResolver, object));
    return Date.from(ld.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant());
}",java:S1161,
"public synchronized int available() throws IOException{
    if (in == null) {
        throw new IOException(""Stream Closed"");
    }
    if (slack != null) {
        return slack.length - begin;
    }
    if (in.ready()) {
        return 1;
    }
    return 0;
}",java:S1161,
"public String toString(){
    return ""during["" + ((paramText != null) ? paramText : """") + ""]"";
}",java:S1161,
"public List<T> getResults(){
    return multiResult.getResults();
}",java:S1161,
"public int hashCode(){
    return this.file.hashCode();
}",java:S1161,
"public void printArguments(final NodeList<Expression> args, final Void arg){
    printer.print(""("");
    if (!isNullOrEmpty(args)) {
        boolean columnAlignParameters = (args.size() > 1) && configuration.get(new DefaultConfigurationOption(DefaultPrinterConfiguration.ConfigOption.COLUMN_ALIGN_PARAMETERS)).map(ConfigurationOption::asBoolean).orElse(false);
        if (columnAlignParameters) {
            printer.indentWithAlignTo(printer.getCursor().column);
        }
        for (final Iterator<Expression> i = args.iterator(); i.hasNext(); ) {
            final Expression e = i.next();
            e.accept(this, arg);
            if (i.hasNext()) {
                printer.print("","");
                if (columnAlignParameters) {
                    printer.println();
                } else {
                    printer.print("" "");
                }
            }
        }
        if (columnAlignParameters) {
            printer.unindent();
        }
    }
    printer.print("")"");
}",java:S1161,
" int fixedSize(){
    return UNKNOWN_MESSAGE_LENGTH;
}",java:S1161,
"public Memory createMemory(final RuleBaseConfiguration config, ReteEvaluator reteEvaluator){
    BetaMemory betaMemory = this.constraints.createBetaMemory(config, NodeTypeEnums.AccumulateNode);
    AccumulateMemory memory = this.accumulate.isMultiFunction() ? new MultiAccumulateMemory(betaMemory, this.accumulate.getAccumulators()) : new SingleAccumulateMemory(betaMemory, this.accumulate.getAccumulators()[0]);
    memory.workingMemoryContext = this.accumulate.createWorkingMemoryContext();
    memory.resultsContext = this.resultBinder.createContext();
    return memory;
}",java:S1161,
"public AnnotationVisitor visitArray(final String arg0){
    return new ClassFieldAnnotationVisitor();
}",java:S1161,
"public void mousePressed(MouseEvent e){
    Reset reset = new Reset();
    reset.setResetScore(true);
    gameView.getKsession().insert(reset);
    gameView.getKsession().getAgenda().getAgendaGroup(""Reset"").setFocus();
    gameView.getKsession().fireAllRules();
}",java:S1161,
"public String toString(){
    return super.toString() + "" processNodesTriggered="" + processNodesTriggered.get();
}",java:S1161,
"protected boolean shouldRunCreateScriptBeforeEveryTest(){
    return true;
}",java:S1161,
"public void setPubUid(long pubUid){
    this.pubUid = pubUid;
}",java:S1161,
"public synchronized void start(){
    log.info(""GlobalTaskDispatchQueueLooper starting"");
    super.start();
    log.info(""GlobalTaskDispatchQueueLooper started"");
}",java:S1161,
"public boolean isSequential(){
    return this.sequential;
}",java:S1161,
"public boolean isValid(){
    return super.isSemanticallyValid();
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeLong(left);
    out.writeLong(right);
}",java:S1161,
"public void remove(){
    throw new UnsupportedOperationException(""remove() method is not supported"");
}",java:S1161,
"public void doAttach(BuildContext context){
    this.source.addObjectSink(this);
}",java:S1161,
"public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions){
    final int mask = this.includeFinalMethods ? Opcodes.ACC_PUBLIC : Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL;
    if ((access & mask) == Opcodes.ACC_PUBLIC) {
        try {
            if (desc.startsWith(""()"") && (!name.equals(""<init>"")) && (!name.equals(""<clinit>""))) {
                final Method method = this.clazz.getMethod(name, (Class[]) null);
                if (method.getReturnType() != void.class) {
                    this.inspector.addToMapping(method, inspector.currentFieldIndex());
                }
            } else if (name.startsWith(""set"")) {
                Method[] methods = this.clazz.getMethods();
                for (Method method : methods) {
                    if (name.equals(method.getName()) && desc.equals(Type.getMethodDescriptor(method))) {
                        this.inspector.addToMapping(method, inspector.currentFieldIndex());
                        break;
                    }
                }
            }
        } catch (final Exception e) {
            throw new RuntimeException(""Error getting field access method: "" + name + "": "" + e.getMessage(), e);
        }
    }
    return null;
}",java:S1161,
"public void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException{
    depth++;
}",java:S1161,
"public void remove(){
    this.iterator.remove();
}",java:S1161,
"public void writeExternal(ObjectOutput out) throws IOException{
    super.writeExternal(out);
    out.writeObject(field);
    out.writeObject(declarations);
    out.writeObject(rightReadAccessor);
    out.writeObject(evaluator);
}",java:S1161,
"public SSLConfig setFactoryClassName(@Nonnull String factoryClassName){
    super.setFactoryClassName(factoryClassName);
    this.factoryImplementation = null;
    return this;
}",java:S1161,
"public boolean isMajorGcSuspended(){
    return gcThread.isMajorGcSuspend();
}",java:S1161,
"public int getId(){
    return subId;
}",java:S1161,
"public boolean isEvent(){
    return true;
}",java:S1161,
"public void visitEnum(final String arg0, final String arg1, final String arg2){
}",java:S1161,
" Object getGlobal(String identifier){
    return getGlobalResolver().resolveGlobal(identifier);
}",java:S1161,
"public RequestContext execute(Executable executable, RequestContext ctx){
    logger.info(""Executing --> "" + executable);
    executeNext(executable, ctx);
    logger.info(""Done executing --> "" + executable);
    return ctx;
}",java:S1161,
"public void setValuePattern(String value){
    if (value != null) {
        StringBuilder valuePatternBuffer = new StringBuilder();
        valuePatternBuffer.append(value);
        if (value.endsWith("" "")) {
            valuePatternBuffer.deleteCharAt(valuePatternBuffer.length() - 1);
        }
        String pat = valuePatternBuffer.toString().replaceAll(""\\\\(#|\\{|\\})"", ""$1"").replaceAll(""\\\\n"", ""\n"").replaceAll(""\\\\\\$"", ""\\$"");
        super.setValuePattern(pat);
    }
}",java:S1161,
"public void mouseMoved(MouseEvent e){
    JComponent c = (JComponent) e.getSource();
    LayoutManager lm = c.getParent().getLayout();
    if (lm instanceof MigLayout) {
        Object constr = ((MigLayout) lm).getComponentConstraints(c);
        if (constr instanceof String) {
            c.setToolTipText(""\"""" + constr + ""\"""");
        } else {
            c.setToolTipText(""null"");
        }
    }
}",java:S1161,
"public void run(){
    WorkflowEvent workflowEvent;
    while (RUNNING_FLAG.get()) {
        try {
            workflowEvent = workflowEventQueue.poolEvent();
        } catch (InterruptedException e) {
            log.warn(""WorkflowEventLooper thread is interrupted, will close this loop"");
            Thread.currentThread().interrupt();
            break;
        }
        try {
            LogUtils.setWorkflowInstanceIdMDC(workflowEvent.getWorkflowInstanceId());
            log.info(""Begin to handle WorkflowEvent: {}"", workflowEvent);
            WorkflowEventHandler workflowEventHandler = workflowEventHandlerMap.get(workflowEvent.getWorkflowEventType());
            workflowEventHandler.handleWorkflowEvent(workflowEvent);
            log.info(""Success handle WorkflowEvent: {}"", workflowEvent);
        } catch (WorkflowEventHandleException workflowEventHandleException) {
            log.error(""Handle workflow event failed, will retry again: {}"", workflowEvent, workflowEventHandleException);
            workflowEventQueue.addEvent(workflowEvent);
            ThreadUtils.sleep(Constants.SLEEP_TIME_MILLIS);
        } catch (WorkflowEventHandleError workflowEventHandleError) {
            log.error(""Handle workflow event error, will drop this event: {}"", workflowEvent, workflowEventHandleError);
        } catch (Exception unknownException) {
            log.error(""Handle workflow event failed, get a unknown exception, will retry again: {}"", workflowEvent, unknownException);
            workflowEventQueue.addEvent(workflowEvent);
            ThreadUtils.sleep(Constants.SLEEP_TIME_MILLIS);
        } finally {
            LogUtils.removeWorkflowInstanceIdMDC();
        }
    }
}",java:S1161,
"public Permission getRequiredPermission(){
    return new MapPermission(parameters.name, ActionConstants.ACTION_PROJECTION);
}",java:S1161,
"public String toString(){
    return this.connective;
}",java:S1161,
"public String toString(){
    return ""Node key="" + key;
}",java:S1161,
"public void mouseReleased(MouseEvent e){
    if (e.isPopupTrigger())
        react(e);
}",java:S1161,
"public Collection<KnowledgeBuilderResult> getAllResults(){
    return results;
}",java:S1161,
"public void run(){
    try {
        Thread.sleep(30 * 1000);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
    boolean neverFalse = true;
    while (neverFalse) {
        try {
            pruneFullBlockStore(500);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        try {
            Thread.sleep(180 * 1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}",java:S1161,
" boolean isOffloadStep(State state){
    if (state.getRecordStore().getMapDataStore().isNullImpl()) {
        return false;
    }
    if (isLoadStep()) {
        return true;
    }
    if (isStoreStep()) {
        return !isWriteBehind(state);
    }
    return false;
}",java:S1161,
"public void detach(KieRuntimeEventManager ksession){
    ksession.removeEventListener(ruleRuntimeStats);
    super.detach(ksession);
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    startMinDev = in.readLong();
    startMaxDev = in.readLong();
    endMinDev = in.readLong();
    endMaxDev = in.readLong();
    paramText = (String) in.readObject();
}",java:S1161,
"public void keyPressed(KeyEvent e){
    if (e.getKeyCode() == KeyEvent.VK_ENTER) {
        okButt.doClick();
        return;
    }
    javax.swing.Timer timer = new Timer(50, new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            String constr = tf.getText();
            try {
                if (tf == layoutConstrTF) {
                    ConstraintParser.parseLayoutConstraint(constr);
                } else if (tf == rowsConstrTF) {
                    ConstraintParser.parseRowConstraints(constr);
                } else if (tf == colsConstrTF) {
                    ConstraintParser.parseColumnConstraints(constr);
                } else if (tf == componentConstrTF) {
                    ConstraintParser.parseComponentConstraint(constr);
                }
                tf.setBackground(Color.WHITE);
                okButt.setEnabled(true);
            } catch (Exception ex) {
                tf.setBackground(ERROR_COLOR);
                okButt.setEnabled(false);
            }
        }
    });
    timer.setRepeats(false);
    timer.start();
}",java:S1161,
"public synchronized int read(byte[] b, int off, int len) throws IOException{
    if (in == null) {
        throw new IOException(""Stream Closed"");
    }
    if (len == 0) {
        return 0;
    }
    while (slack == null) {
        char[] buf = new char[len];
        int n = in.read(buf);
        if (n == -1) {
            return -1;
        }
        if (n > 0) {
            slack = new String(buf, 0, n).getBytes(encoding);
            begin = 0;
        }
    }
    if (len > slack.length - begin) {
        len = slack.length - begin;
    }
    System.arraycopy(slack, begin, b, off, len);
    if ((begin += len) >= slack.length) {
        slack = null;
    }
    return len;
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    left = in.readChar();
    right = in.readChar();
}",java:S1161,
"public synchronized void close() throws IOException{
    if (in != null) {
        in.close();
        slack = null;
        in = null;
    }
}",java:S1161,
"public AnnotationVisitor visitAnnotation(final String arg0, final String arg1){
    return new ClassFieldAnnotationVisitor();
}",java:S1161,
"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{
    super.readExternal(in);
    this.path = (String) in.readObject();
    this.encoding = (String) in.readObject();
}",java:S1161,
"public Builder mergeFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException{
    KieModuleCache.CompDataEntry parsedMessage = null;
    try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (KieModuleCache.CompDataEntry) e.getUnfinishedMessage();
        throw e;
    } finally {
        if (parsedMessage != null) {
            mergeFrom(parsedMessage);
        }
    }
    return this;
}",java:S1161,
"public void resetFactHandle(){
    this.right = null;
    this.object = null;
}",java:S1161,
"public int getSerializedSize(){
    int size = memoizedSerializedSize;
    if (size != -1)
        return size;
    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream.computeBytesSize(1, getDialectBytes());
    }
    for (int i = 0; i < entry_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, entry_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
}",java:S1161,
"public String toString(){
    final StringBuilder buf = new StringBuilder();
    buf.append(this.message);
    buf.append("" : "");
    buf.append(""\n"");
    if (this.object instanceof CompilationProblem[]) {
        final CompilationProblem[] problem = (CompilationProblem[]) this.object;
        for (CompilationProblem aProblem : problem) {
            buf.append(""\t"");
            buf.append(aProblem);
            buf.append(""\n"");
        }
    } else if (this.object != null) {
        buf.append(this.object);
    }
    return buf.toString();
}",java:S1161,
"public Expression visitFunctionExpression(FunctionViewExpression functionViewExpression, Void context){
    List<ViewExpression> viewExpressionList = functionViewExpression.getExpressions();
    List<Expression> expressionList = new ArrayList<>();
    for (ViewExpression viewExpression : viewExpressionList) {
        expressionList.add(this.process(viewExpression, null));
    }
    return new org.apache.iotdb.db.queryengine.plan.expression.multi.FunctionExpression(functionViewExpression.getFunctionName(), functionViewExpression.getFunctionAttributes(), expressionList);
}",java:S1161,
"public Expression visitArithmeticBinaryExpression(ArithmeticBinaryViewExpression arithmeticBinaryExpression, Void context){
    throw new RuntimeException(new NotSupportedException(""Can not construct abstract class.""));
}",java:S1161,
"public void setBlocker(RightTuple blocker){
    this.blocker = blocker;
}",java:S1161,
"protected Date getDate(ValueResolver valueResolver, Object object){
    ZonedDateTime zdt = ((ZonedDateTime) getValue(valueResolver, object));
    return Date.from(zdt.toInstant());
}",java:S1161,
"public List<Interceptor<? extends Message>> getInFaultInterceptors(){
    return interceptorHolder.getInFaultInterceptors();
}",java:S1452,
" AbstractCharSequenceAssert<?, ? extends CharSequence> assumeThat(final StringBuilder actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
"public static AbstractIteratorAssert<?, T> then(Iterator<? extends T> actual){
    return assertThat(actual);
}",java:S1452,
"public static AbstractThrowableAssert<?, T> assertThat(T actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
"public static AbstractDoubleAssert<?> assertThat(Double actual){
    return new DoubleAssert(actual);
}",java:S1452,
" AbstractFutureAssert<?, ? extends Future<? extends RESULT>, RESULT> assumeThat(Future<RESULT> actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
"public static AbstractUniversalComparableAssert<?, T> assertThatComparable(Comparable<T> actual){
    return new UniversalComparableAssert<>(actual);
}",java:S1452,
"public Map<String, ? extends SubscriptionInfo> getSubscriptions(){
    return this.poolMapper.getImportedEntities();
}",java:S1452,
"public ScheduledFuture<?> scheduleAtFixedRateOrdered(Object orderingKey, Runnable command, long initialDelay, long period, TimeUnit unit){
    return chooseThread(orderingKey).scheduleAtFixedRate(command, initialDelay, period, unit);
}",java:S1452,
"public Supplier<?> getAccFuncSupplier(){
    return accFuncSupplier;
}",java:S1452,
"protected Any<?> getAny(final Provision provision, final String anyKey){
    AnyDAO<Any<?>> dao = anyUtilsFactory.getInstance(provision.getAnyType().getKind()).dao();
    Any<?> any = SyncopeConstants.UUID_PATTERN.matcher(anyKey).matches() ? dao.authFind(anyKey) : dao.authFind(dao.findKey(anyKey));
    if (any == null) {
        throw new NotFoundException(provision.getAnyType().getKey() + "" '"" + anyKey + ""'"");
    }
    return any;
}",java:S1452,
"public static AbstractPeriodAssert<?> assumeThat(Period actual){
    return asAssumption(PeriodAssert.class, Period.class, actual);
}",java:S1452,
" AbstractDoubleAssert<?> assumeThat(final Double actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
"public Stream<Entry<String, Comparator<?>>> comparatorByFields(){
    return super.entryByField();
}",java:S1452,
"public static AbstractObjectAssert<?, T> thenObject(T actual){
    return then(actual);
}",java:S1452,
"public static AbstractComparableAssert<?, T> assertThat(T actual){
    return AssertionsForInterfaceTypes.assertThat(actual);
}",java:S1452,
" Request<?, ProposalsResponse> cliqueProposals(){
    return new Request<>(""clique_proposals"", emptyList(), web3jService, ProposalsResponse.class);
}",java:S1452,
"public CompletableFuture<?> stop(){
    if (httpServer == null) {
        return CompletableFuture.completedFuture(null);
    }
    final CompletableFuture<?> resultFuture = new CompletableFuture<>();
    httpServer.close(res -> {
        if (res.failed()) {
            resultFuture.completeExceptionally(res.cause());
        } else {
            httpServer = null;
            resultFuture.complete(null);
        }
    });
    return resultFuture;
}",java:S1452,
"@MemberSupport
public List<? extends AuditTrailEntry> act(@Nullable final LocalDate from, @Nullable final LocalDate to){
    return auditTrailEntryRepository.findByFromAndTo(from, to);
}",java:S1452,
"public static AbstractPeriodAssert<?> assertThat(Period actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
"@MemberSupport
public Collection<? extends ApplicationUser> choices0Act(){
    return applicationUserRepository.findByTenancy(target);
}",java:S1452,
"public List<?> getServiceBeans(){
    return serviceBeans;
}",java:S1452,
"public static Builder<?> builder(){
    return new Builder();
}",java:S1452,
" MapSizeAssert<?, ?> createMapSizeAssertProxy(MapSizeAssert<?, ?> mapSizeAssert){
    Class<?> proxyClass = createSoftAssertionProxyClass(MapSizeAssert.class);
    try {
        Constructor<?> constructor = proxyClass.getConstructor(AbstractMapAssert.class, Integer.class);
        MapSizeAssert<?, ?> proxiedAssert = (MapSizeAssert<?, ?>) constructor.newInstance(mapSizeAssert.returnToMap(), mapSizeAssert.actual);
        ((AssertJProxySetup) proxiedAssert).assertj$setup(new ProxifyMethodChangingTheObjectUnderTest(this), collector);
        return proxiedAssert;
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}",java:S1452,
"public Request<?, PrivDistributeTransactionResponse> privDistributeTransaction(final String signedPrivateTransaction){
    return new Request<>(""priv_distributeRawTransaction"", singletonList(signedPrivateTransaction), web3jService, PrivDistributeTransactionResponse.class);
}",java:S1452,
"public CompletableFuture<?> start(){
    LOG.info(""Starting Websocket service on {}:{}"", configuration.getHost(), configuration.getPort());
    final CompletableFuture<?> resultFuture = new CompletableFuture<>();
    httpServer = vertx.createHttpServer(new HttpServerOptions().setHost(configuration.getHost()).setPort(configuration.getPort()).setHandle100ContinueAutomatically(true).setCompressionSupported(true).addWebSocketSubProtocol(""undefined"").setMaxWebSocketFrameSize(configuration.getMaxFrameSize()).setMaxWebSocketMessageSize(configuration.getMaxFrameSize() * 4)).webSocketHandler(websocketHandler()).connectionHandler(connectionHandler()).requestHandler(httpHandler()).listen(startHandler(resultFuture));
    return resultFuture;
}",java:S1452,
" AbstractShortArrayAssert<?> assertThat(final short[] actual){
    return Assertions.assertThat(actual);
}",java:S1452,
"public static AbstractFloatAssert<?> then(Float actual){
    return assertThat(actual);
}",java:S1452,
"protected Cache<?, ?> getOrCreateCache(String name, CaffeineConfiguration configuration){
    return caches.computeIfAbsent(name, key -> {
        Caffeine<?, ?> builder = Caffeine.newBuilder();
        defineBuilder(builder, configuration);
        return builder.build();
    });
}",java:S1452,
"public static AbstractObjectAssert<?, T> assertThat(T actual){
    return new ObjectAssert<>(actual);
}",java:S1452,
"public static AbstractOffsetTimeAssert<?> assertThat(OffsetTime actual){
    return new OffsetTimeAssert(actual);
}",java:S1452,
" AbstractCharSequenceAssert<?, ? extends CharSequence> assertThat(final CharSequence actual){
    return Assertions.assertThat(actual);
}",java:S1452,
"public static AbstractOffsetTimeAssert<?> assertThat(OffsetTime actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
" static DescribedPredicate<? super JavaClass> areSubtypeEntities(){
    return new DescribedPredicate<>(""are subtype entities "") {

        @Override
        public boolean test(final JavaClass input) {
            val superclassIfAny = input.getSuperclass();
            if (!superclassIfAny.isPresent()) {
                return false;
            }
            val superType = superclassIfAny.get();
            val superClass = superType.toErasure();
            val persistenceCapableIfAny = superClass.tryGetAnnotationOfType(PersistenceCapable.class);
            return persistenceCapableIfAny.isPresent();
        }
    };
}",java:S1452,
" Request<?, GetAccountsWhitelistResponse> getAccountsWhitelist(){
    return new Request<>(""perm_getAccountsAllowlist"", null, web3jService, GetAccountsWhitelistResponse.class);
}",java:S1452,
" AbstractIntegerAssert<?> assertThat(final int actual){
    return Assertions.assertThat(actual);
}",java:S1452,
" AbstractBigDecimalAssert<?> assumeThat(final BigDecimal actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
" ClassBasedNavigableListAssert<?, ACTUAL, ELEMENT, ELEMENT_ASSERT> assertThat(List<? extends ELEMENT> actual, Class<ELEMENT_ASSERT> assertClass){
    return Assertions.assertThat(actual, assertClass);
}",java:S1452,
"public Request<?, EthLog> privGetFilterLogs(final String privacyGroupId, final String filterId){
    return new Request<>(""priv_getFilterLogs"", Arrays.asList(privacyGroupId, filterId), web3jService, EthLog.class);
}",java:S1452,
"public static AbstractShortAssert<?> assumeThat(Short actual){
    return asAssumption(ShortAssert.class, Short.class, actual);
}",java:S1452,
"public static AbstractUrlAssert<?> assumeThat(URL actual){
    return asAssumption(UrlAssert.class, URL.class, actual);
}",java:S1452,
"public static Query<?> buildQuery(InfinispanQueryBuilder queryBuilder, Cache<Object, Object> cache){
    return queryBuilder != null ? queryBuilder.build(Search.getQueryFactory(cache)) : null;
}",java:S1452,
"public List<? extends BaseDescr> getDescrs(){
    return this.constraint.getDescrs();
}",java:S1452,
"public ScheduledFuture<?> scheduleTask(Callable<?> command){
    if (scheduledTask != null) {
        cancel();
    }
    try {
        scheduledTask = executor.schedule(command, delay, TimeUnit.MILLISECONDS);
    } catch (RejectedExecutionException e) {
        LOGGER.debug(""Rejecting while another process is already running."");
    }
    return scheduledTask;
}",java:S1452,
" AbstractCharSequenceAssert<?, ? extends CharSequence> assertThat(final StringBuilder actual){
    return Assertions.assertThat(actual);
}",java:S1452,
"public static Token<? extends AbstractDelegationTokenIdentifier> extractThriftToken(String tokenStrForm, String tokenSignature) throws MetaException, TException, IOException{
    Token<? extends AbstractDelegationTokenIdentifier> t = new Token<DelegationTokenIdentifier>();
    t.decodeFromUrlString(tokenStrForm);
    t.setService(new Text(tokenSignature));
    return t;
}",java:S1452,
"public static AbstractLongAssert<?> assertThat(long actual){
    return new LongAssert(actual);
}",java:S1452,
"public final SdkMetric<?> metric(){
    return this.metric;
}",java:S1452,
" AbstractLocalTimeAssert<?> assumeThat(final LocalTime localTime){
    return Assumptions.assumeThat(localTime);
}",java:S1452,
"public static List<?> asList(final Object array){
    return new AbstractList() {

        @Override
        public Object get(int index) {
            return Array.get(array, index);
        }

        @Override
        public int size() {
            return Array.getLength(array);
        }
    };
}",java:S1452,
"public static AbstractShortArrayAssert<?> assertThat(short[] actual){
    return new ShortArrayAssert(actual);
}",java:S1452,
"public static WorkerDelayTaskExecuteRunnableFactory<?> createWorkerDelayTaskExecuteRunnableFactory(@NonNull TaskExecutionContext taskExecutionContext, @NonNull WorkerConfig workerConfig, @NonNull WorkerMessageSender workerMessageSender, @NonNull TaskPluginManager taskPluginManager, @Nullable StorageOperate storageOperate, @NonNull WorkerRegistryClient workerRegistryClient){
    return new DefaultWorkerDelayTaskExecuteRunnableFactory(taskExecutionContext, workerConfig, workerMessageSender, taskPluginManager, storageOperate, workerRegistryClient);
}",java:S1452,
"public static AbstractCollectionAssert<?, Collection<? extends T>, T, ObjectAssert<T>> then(Collection<? extends T> actual){
    return assertThat(actual);
}",java:S1452,
"public static TransferManagerJsonUnmarshaller<?> getUnmarshaller(MarshallingType<?> marshallingType){
    TransferManagerJsonUnmarshaller<?> unmarshaller = UNMARSHALLERS.get(marshallingType);
    if (unmarshaller == null) {
        throw new IllegalStateException(String.format(""Cannot find an unmarshaller for marshalling type %s"", marshallingType));
    }
    return unmarshaller;
}",java:S1452,
"public static AbstractClassAssert<?> then(Class<?> actual){
    return assertThat(actual);
}",java:S1452,
"@MemberSupport
public List<? extends AuditTrailEntry> act(final String propertyName){
    val target = bookmarkService.bookmarkForElseFail(domainObject);
    return auditTrailEntryRepository.findRecentByTargetAndPropertyId(target, propertyName);
}",java:S1452,
"public static AbstractInstantAssert<?> then(Instant actual){
    return assertThat(actual);
}",java:S1452,
" static DescribedPredicate<JavaAnnotation<?>> DomainObject_nature(final Nature expectedNature){
    return new DescribedPredicate<>(String.format(""@DomainObject(nature=%s)"", expectedNature.name())) {

        @Override
        public boolean test(final JavaAnnotation<?> javaAnnotation) {
            if (!javaAnnotation.getRawType().isAssignableTo(DomainObject.class)) {
                return false;
            }
            val properties = javaAnnotation.getProperties();
            val nature = properties.get(""nature"");
            return nature instanceof JavaEnumConstant && Objects.equals(((JavaEnumConstant) nature).name(), expectedNature.name());
        }
    };
}",java:S1452,
" AbstractCharacterAssert<?> assertThat(final Character actual){
    return Assertions.assertThat(actual);
}",java:S1452,
"public static Optional<? extends MappingItem> getConnObjectKeyItem(final Provision provision){
    Mapping mapping = null;
    if (provision != null) {
        mapping = provision.getMapping();
    }
    return mapping == null ? Optional.empty() : mapping.getConnObjectKeyItem();
}",java:S1452,
"public static AbstractIntegerAssert<?> assertThat(Integer actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
" AbstractFloatAssert<?> assumeThat(final float actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
" AbstractIntArrayAssert<?> assumeThat(final int[] actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
"public Consumer<?, ?> getConsumer(){
    return consumer;
}",java:S1452,
"public static AbstractOffsetDateTimeAssert<?> given(OffsetDateTime actual){
    return assumeThat(actual);
}",java:S1452,
"public CompletableFuture<?> stop(){
    if (!started.compareAndSet(true, false)) {
        return CompletableFuture.completedFuture(null);
    }
    tableRefreshTimerId.ifPresent(timerUtil::cancelTimer);
    tableRefreshTimerId = OptionalLong.empty();
    cleanTableTimerId.ifPresent(timerUtil::cancelTimer);
    cleanTableTimerId = OptionalLong.empty();
    inflightInteractions.values().forEach(l -> {
        l.values().forEach(s -> s.cancelTimers());
        l.clear();
    });
    inflightInteractions.clear();
    return CompletableFuture.completedFuture(null);
}",java:S1452,
"public AbstractBooleanAssert<?> asBoolean(){
    return InstanceOfAssertFactories.BOOLEAN.createAssert(Boolean.parseBoolean(actual)).withAssertionState(myself);
}",java:S1452,
" AbstractListAssert<?, List<? extends Double>, Double, ObjectAssert<Double>> assumeThat(DoubleStream doubleStream){
    return Assumptions.assumeThat(doubleStream);
}",java:S1452,
" AbstractFloatArrayAssert<?> assumeThat(final float[] actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
"public Request<?, GetPrivacyPrecompileAddressResponse> privGetPrivacyPrecompileAddress(){
    return new Request<>(""priv_getPrivacyPrecompileAddress"", Collections.emptyList(), web3jService, GetPrivacyPrecompileAddressResponse.class);
}",java:S1452,
"public static AbstractCharSequenceAssert<?, ? extends CharSequence> assertThat(StringBuffer actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
" static InstanceOfAssertFactory<T, AbstractComparableAssert<?, T>> comparable(Class<T> comparableType){
    return new InstanceOfAssertFactory<>(comparableType, Assertions::assertThat);
}",java:S1452,
"public List<? extends Schema<?>> readClass(OpenAPI oasDocument, Class<?> clazz){
    if (clazz.equals(java.io.File.class)) {
        return null;
    } else {
        return readClassOpenApi3(clazz);
    }
}",java:S1452,
"public static Matcher<? super T> isEquivalentTo(final T expected){
    return new TypeSafeMatcher<T>() {

        @Override
        protected boolean matchesSafely(final T item) {
            final String expectedXml = JaxbUtil2.toXml(expected);
            final String itemXml = JaxbUtil2.toXml(item);
            return Objects.equals(expectedXml, itemXml);
        }

        @Override
        public void describeTo(final org.hamcrest.Description description) {
            final String expectedXml = JaxbUtil2.toXml(expected);
            description.appendText(""is equivalent to "").appendValue(expectedXml);
        }
    };
}",java:S1452,
" AbstractByteAssert<?> assertThat(final Byte actual){
    return Assertions.assertThat(actual);
}",java:S1452,
"public static AbstractLocalDateTimeAssert<?> given(LocalDateTime actual){
    return assumeThat(actual);
}",java:S1452,
"public static Class<? extends AbstractPlainAttr<?>> getEntityReference(final Class<T> reference){
    return GPlainAttr.class.isAssignableFrom(reference) ? JPAGPlainAttr.class : APlainAttr.class.isAssignableFrom(reference) ? JPAAPlainAttr.class : UPlainAttr.class.isAssignableFrom(reference) ? JPAUPlainAttr.class : null;
}",java:S1452,
"public Request<?, EthCall> privCall(final String privacyGroupId, final Contract contract, final String encoded, final String blockNumberLatestPending){
    final org.web3j.protocol.core.methods.request.Transaction transaction = org.web3j.protocol.core.methods.request.Transaction.createEthCallTransaction(null, contract.getContractAddress(), encoded);
    return new Request<>(""priv_call"", Arrays.asList(privacyGroupId, transaction, blockNumberLatestPending), web3jService, EthCall.class);
}",java:S1452,
"public static AbstractByteAssert<?> assertThat(Byte actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
"public static AbstractDurationAssert<?> assertThat(Duration actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
"public Collection<? extends NodeInfo> getNodeInfos(){
    return this.nodesInfo.values();
}",java:S1452,
" AbstractShortAssert<?> assumeThat(final Short actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
"public List<?> getList(String fieldName, HCatSchema recordSchema) throws HCatException{
    return (List<?>) get(fieldName, recordSchema, List.class);
}",java:S1452,
"public List<?> getProviders(){
    return providers;
}",java:S1452,
"public static AbstractLongAssert<?> given(Long actual){
    return assumeThat(actual);
}",java:S1452,
" AbstractIntArrayAssert<?> assertThat(final int[] actual){
    return Assertions.assertThat(actual);
}",java:S1452,
"public List<AbstractSequence<? extends AbstractCompound>> getBioSequences(){
    return getBioSequences(false);
}",java:S1452,
"public static AbstractByteAssert<?> assumeThat(Byte actual){
    return asAssumption(ByteAssert.class, Byte.class, actual);
}",java:S1452,
"public MasterDelayTaskExecuteRunnableFactory<? extends MasterDelayTaskExecuteRunnable> createWorkerDelayTaskExecuteRunnableFactory(String taskType){
    if (ASYNC_TASK_TYPE.contains(taskType)) {
        return asyncMasterDelayTaskExecuteRunnableFactory;
    }
    return syncMasterDelayTaskExecuteRunnableFactory;
}",java:S1452,
"public ChannelFactory<? extends Channel> channelFactory(){
    return channelFactory;
}",java:S1452,
"public AlphaIndex<T, ?> getIndex(){
    return index;
}",java:S1452,
"public static AbstractCharArrayAssert<?> assumeThat(char[] actual){
    return asAssumption(CharArrayAssert.class, char[].class, actual);
}",java:S1452,
"public static AbstractDoubleAssert<?> assertThat(double actual){
    return new DoubleAssert(actual);
}",java:S1452,
"public static AbstractThrowableAssert<?, ? extends Throwable> assertUnauthorized(ThrowableAssert.ThrowingCallable callable){
    ApiException exception = catchApiException(callable);
    return assertReturnCode(401, exception);
}",java:S1452,
"public ChannelFactory<? extends DatagramChannel> datagramChannelFactory(){
    return datagramChannelFactory;
}",java:S1452,
"public static AbstractThrowableAssert<?, ? extends Throwable> assertConflict(ThrowableAssert.ThrowingCallable callable){
    ApiException exception = catchApiException(callable);
    return assertReturnCode(409, exception);
}",java:S1452,
" AbstractByteAssert<?> assertThat(final byte actual){
    return Assertions.assertThat(actual);
}",java:S1452,
" AbstractUrlAssert<?> then(URL actual){
    return proxy(UrlAssert.class, URL.class, actual);
}",java:S1452,
" AbstractThrowableAssert<?, ? extends Throwable> assertThatCode(ThrowingCallable shouldRaiseOrNotThrowable){
    return assertThat(catchThrowable(shouldRaiseOrNotThrowable));
}",java:S1452,
"public static BiConsumer<SuccessT, ? super Throwable> promiseNotifyingBiConsumer(Function<SuccessT, PromiseT> successFunction, Promise<PromiseT> promise){
    return (success, fail) -> {
        if (fail != null) {
            promise.setFailure(fail);
        } else {
            try {
                promise.setSuccess(successFunction.apply(success));
            } catch (Throwable e) {
                promise.setFailure(e);
            }
        }
    };
}",java:S1452,
"public static AbstractShortAssert<?> assumeThat(short actual){
    return asAssumption(ShortAssert.class, Short.class, actual);
}",java:S1452,
"public static AbstractDateAssert<?> given(Date actual){
    return assumeThat(actual);
}",java:S1452,
" AbstractCharSequenceAssert<?, ? extends CharSequence> assumeThat(final CharSequence actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
"public List<Future<?>> getFutures(){
    return tasks.stream().map(ExecutorTask::getFuture).collect(Collectors.toList());
}",java:S1452,
" AbstractDateAssert<?> assumeThat(final Date actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
"public List<?> queryForList(ResultSet rs) throws SQLException{
    ColumnMapRowMapper rowMapper = new ColumnMapRowMapper();
    RowMapperResultSetExtractor<Map<String, Object>> mapper = new RowMapperResultSetExtractor<>(rowMapper);
    return mapper.extractData(rs);
}",java:S1452,
"public static AbstractBooleanArrayAssert<?> given(boolean[] actual){
    return assumeThat(actual);
}",java:S1452,
" AbstractIntegerAssert<?> assumeThat(final Integer actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
"public static AbstractCharacterAssert<?> then(char actual){
    return assertThat(actual);
}",java:S1452,
"public AbstractThrowableAssert<?, ? extends Throwable> thenCode(ThrowingCallable shouldRaiseOrNotThrowable){
    return then(catchThrowable(shouldRaiseOrNotThrowable));
}",java:S1452,
"public static AbstractFileAssert<?> assumeThat(File actual){
    return asAssumption(FileAssert.class, File.class, actual);
}",java:S1452,
"public static Query<?> buildQuery(InfinispanQueryBuilder queryBuilder, RemoteCache<Object, Object> cache){
    return queryBuilder != null ? queryBuilder.build(Search.getQueryFactory(cache)) : null;
}",java:S1452,
"public List<Interceptor<? extends Message>> getOutFaultInterceptors(){
    return outFault;
}",java:S1452,
" AbstractOffsetDateTimeAssert<?> assumeThat(final OffsetDateTime offsetDateTime){
    return Assumptions.assumeThat(offsetDateTime);
}",java:S1452,
"public Request<?, GetCodeResponse> privGetCode(final String privacyGroupId, final String contractAddress, final String blockParameter){
    return new Request<>(""priv_getCode"", List.of(privacyGroupId, contractAddress, blockParameter), web3jService, GetCodeResponse.class);
}",java:S1452,
"public Request<?, DeletePrivacyGroupResponse> privDeletePrivacyGroup(final String groupId){
    return new Request<>(""priv_deletePrivacyGroup"", singletonList(groupId), web3jService, DeletePrivacyGroupResponse.class);
}",java:S1452,
"public static AbstractFloatAssert<?> assertThat(Float actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
"public static AbstractCharSequenceAssert<?, ? extends CharSequence> assertThat(StringBuilder actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
"public static AbstractLocalDateAssert<?> assertThat(LocalDate localDate){
    return new LocalDateAssert(localDate);
}",java:S1452,
"public ScheduledFuture<?> getScheduledFuture(){
    return scheduledFuture;
}",java:S1452,
"public synchronized LlapBaseRecordReader<?> getRecordReader(){
    return recordReader;
}",java:S1452,
"public static AbstractLongArrayAssert<?> assertThat(long[] actual){
    return new LongArrayAssert(actual);
}",java:S1452,
"public AbstractSequence<?> getParentSequence(){
    return parentSequence;
}",java:S1452,
"protected List<GridSystemService<? extends Grid>> gridSystemServices(){
    if (filteredGridSystemServices == null) {
        val gridImplementations = _Sets.<Class<?>>newHashSet();
        filteredGridSystemServices = getGridSystemServices().stream().filter(gridService -> gridImplementations.add(gridService.gridImplementation())).collect(Collectors.toList());
    }
    return filteredGridSystemServices;
}",java:S1452,
"public Request<?, DebugGetStateRoot> privDebugGetStateRoot(final String privacyGroupId, final String blockParam){
    return new Request<>(""priv_debugGetStateRoot"", Arrays.asList(privacyGroupId, blockParam), web3jService, DebugGetStateRoot.class);
}",java:S1452,
"public Request<?, GetTransactionReceiptResponse> privGetTransactionReceipt(final Hash transactionHash){
    return new Request<>(""priv_getTransactionReceipt"", singletonList(transactionHash.toHexString()), web3jService, GetTransactionReceiptResponse.class);
}",java:S1452,
"public Map<String, ? extends JsonRpcMethod> getPluginMethods(final Collection<String> namespaces){
    return rpcMethods.entrySet().stream().filter(entry -> namespaces.stream().anyMatch(namespace -> entry.getKey().toUpperCase().startsWith(namespace.toUpperCase()))).map(entry -> new PluginJsonRpcMethod(entry.getKey(), entry.getValue())).collect(Collectors.toMap(PluginJsonRpcMethod::getName, e -> e));
}",java:S1452,
"public static AbstractDoubleAssert<?> assumeThat(double actual){
    return asAssumption(DoubleAssert.class, Double.class, actual);
}",java:S1452,
"public static AbstractOffsetDateTimeAssert<?> assumeThat(OffsetDateTime actual){
    return asAssumption(OffsetDateTimeAssert.class, OffsetDateTime.class, actual);
}",java:S1452,
"protected Set<? extends ExternalResource> getPassthroughResources(final User user){
    Set<? extends ExternalResource> result = null;
    for (ExternalResource resource : userDAO.findAllResources(user)) {
        if (resource.getAccountPolicy() != null && !resource.getAccountPolicy().getResources().isEmpty()) {
            if (result == null) {
                result = resource.getAccountPolicy().getResources();
            } else {
                result.retainAll(resource.getAccountPolicy().getResources());
            }
        }
    }
    for (Realm realm : realmDAO.findAncestors(user.getRealm())) {
        if (realm.getAccountPolicy() != null && !realm.getAccountPolicy().getResources().isEmpty()) {
            if (result == null) {
                result = realm.getAccountPolicy().getResources();
            } else {
                result.retainAll(realm.getAccountPolicy().getResources());
            }
        }
    }
    return result == null ? Set.of() : result;
}",java:S1452,
"public Request<?, CreatePrivacyGroupResponse> privCreatePrivacyGroup(final CreatePrivacyGroupParameter params){
    return new Request<>(""priv_createPrivacyGroup"", singletonList(params), web3jService, CreatePrivacyGroupResponse.class);
}",java:S1452,
"public Comparator<?> getComparatorForField(String fieldName){
    return fieldComparators.getComparatorForField(fieldName);
}",java:S1452,
"public static AbstractLongAssert<?> assumeThat(long actual){
    return asAssumption(LongAssert.class, Long.class, actual);
}",java:S1452,
" static DescribedPredicate<JavaAnnotation<?>> DomainService_logicalTypeName(){
    return DomainXxx_logicalTypeName(DomainService.class);
}",java:S1452,
"public static AbstractThrowableAssert<?, ? extends Throwable> assertUnavailable(ThrowableAssert.ThrowingCallable callable){
    ApiException exception = catchApiException(callable);
    return assertReturnCode(503, exception);
}",java:S1452,
"public static AbstractInstantAssert<?> assertThat(Instant actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
" AbstractCollectionAssert<?, Collection<? extends E>, E, ObjectAssert<E>> assertThat(final Collection<? extends E> actual){
    return Assertions.assertThat(actual);
}",java:S1452,
"public static AbstractCharSequenceAssert<?, ? extends CharSequence> assertThat(CharSequence actual){
    return CharSequenceAssert.assertThatCharSequence(actual);
}",java:S1452,
" AbstractDoubleAssert<?> assertThat(final double actual){
    return Assertions.assertThat(actual);
}",java:S1452,
"public Stream<EntityNode<?, ?>> getLeafNodeStream(){
    return this.getNodeStream().filter(EntityNode::isLeafNode);
}",java:S1452,
"@MemberSupport
public List<? extends ExecutionLogEntry> act(@Nullable final LocalDate from, @Nullable final LocalDate to){
    return executionLogEntryRepository.findByFromAndTo(from, to);
}",java:S1452,
"public Stream<Entry<List<Pattern>, Comparator<?>>> comparatorByRegexFields(){
    return comparatorByPatterns.stream().map(comparatorForPatterns -> entry(comparatorForPatterns.fieldPatterns, comparatorForPatterns.comparator));
}",java:S1452,
"public AbstractObjectAssert<?, T> extractingValue(){
    isPresent();
    T assertion = actual.get();
    return assertThat(assertion);
}",java:S1452,
"public static AbstractFileAssert<?> assertThat(File actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
"public static AbstractListAssert<?, List<? extends ELEMENT>, ELEMENT, ObjectAssert<ELEMENT>> givenStream(Stream<? extends ELEMENT> actual){
    return given(actual);
}",java:S1452,
"public static AbstractLocalTimeAssert<?> assertThat(LocalTime actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
" AbstractStringAssert<?> assertThat(final String actual){
    return Assertions.assertThat(actual);
}",java:S1452,
"public Stream<Entry<Class<?>, Comparator<?>>> comparatorByTypes(){
    return super.entityByTypes();
}",java:S1452,
"public Map<String, ?> getJpaPropertyMap(){
    return jpaPropertyMap;
}",java:S1452,
"public static AbstractDoubleAssert<?> then(double actual){
    return assertThat(actual);
}",java:S1452,
" AbstractFloatAssert<?> assumeThat(final Float actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
"public static AbstractShortAssert<?> given(Short actual){
    return assumeThat(actual);
}",java:S1452,
"public List<Interceptor<? extends Message>> getOutInterceptors(){
    return interceptorHolder.getOutInterceptors();
}",java:S1452,
"public Collection<? extends ContentFile> allFiles(){
    return Stream.concat(dataFiles.stream(), deleteFiles.stream()).collect(Collectors.toList());
}",java:S1452,
"public static AbstractCollectionAssert<?, Collection<? extends T>, T, ObjectAssert<T>> assertThat(Collection<? extends T> actual){
    return new CollectionAssert<>(actual);
}",java:S1452,
"public static AbstractObjectAssert<?, T> then(T actual){
    return assertThat(actual);
}",java:S1452,
" AbstractLongAssert<?> assertThat(final Long actual){
    return Assertions.assertThat(actual);
}",java:S1452,
"public static UnitData<?> unitData(String name){
    return new UnitDataImpl(name);
}",java:S1452,
"public AbstractByteAssert<?> asByte(){
    try {
        return InstanceOfAssertFactories.BYTE.createAssert(Byte.parseByte(actual)).withAssertionState(myself);
    } catch (NumberFormatException e) {
        throw failures.failure(info, shouldBeNumeric(actual, BYTE));
    }
}",java:S1452,
"public static AbstractByteArrayAssert<?> assertThat(byte[] actual){
    return new ByteArrayAssert(actual);
}",java:S1452,
"public static AbstractBooleanAssert<?> then(Boolean actual){
    return assertThat(actual);
}",java:S1452,
"public static AbstractFloatAssert<?> assumeThat(Float actual){
    return asAssumption(FloatAssert.class, Float.class, actual);
}",java:S1452,
" AbstractDateAssert<?> assertThat(final Date actual){
    return Assertions.assertThat(actual);
}",java:S1452,
"public static SdkField<?> putObjectSdkField(String key){
    SdkField<?> sdkField = PUT_OBJECT_SDK_FIELDS.get(key);
    if (sdkField != null) {
        return sdkField;
    }
    throw new IllegalStateException(""Could not match a field in PutObjectRequest"");
}",java:S1452,
" AbstractListAssert<?, List<? extends ELEMENT>, ELEMENT, ObjectAssert<ELEMENT>> assertThatStream(Stream<? extends ELEMENT> actual){
    return assertThat(actual);
}",java:S1452,
"public static final Exporter<?> build(String path, String clazz) throws ClassNotFoundException, IOException{
    if (!factories.containsKey(clazz)) {
        Class.forName(clazz);
        if (!factories.containsKey(clazz))
            throw new ClassNotFoundException(clazz);
    }
    return ((ExporterFactory) factories.get(clazz)).create(path);
}",java:S1452,
"public static AbstractCollectionAssert<?, Collection<? extends E>, E, ObjectAssert<E>> thenCollection(Collection<? extends E> actual){
    return then(actual);
}",java:S1452,
"public static AbstractCharacterAssert<?> assertThat(Character actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
"public AbstractByteArrayAssert<?> binaryContent(){
    paths.assertIsReadable(info, actual);
    return new ByteArrayAssert(readPath()).withAssertionState(myself);
}",java:S1452,
"public Any<?> getAny(){
    return any;
}",java:S1452,
"@MemberSupport
public List<? extends ApplicationUser> autoCompleteApplicationUser(@MinLength(1) final String search){
    final Collection<? extends ApplicationUser> matchingSearch = applicationUserRepository.find(search);
    final List<? extends ApplicationUser> list = _Lists.newArrayList(matchingSearch);
    list.removeAll(applicationUserRepository.findByTenancy(target));
    return list;
}",java:S1452,
"public Collection<? extends KnowledgeBuilderResult> getResults(){
    return buildResultCollector.getAllResults();
}",java:S1452,
"public static AbstractCharSequenceAssert<?, ? extends CharSequence> assertThat(StringBuffer actual){
    return new CharSequenceAssert(actual);
}",java:S1452,
"public static AbstractIntArrayAssert<?> assertThat(int[] actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
"public static AbstractPathAssert<?> assumeThat(Path actual){
    return asAssumption(PathAssert.class, Path.class, actual);
}",java:S1452,
"protected CompletableFuture<?> publishSuspectedLedgersAsync(Collection<String> missingBookies, Set<Long> ledgers){
    if (null == ledgers || ledgers.size() == 0) {
        LOG.info(""There is no ledgers for the failed bookie: {}"", missingBookies);
        return FutureUtils.Void();
    }
    LOG.info(""Following ledgers: {} of bookie: {} are identified as underreplicated"", ledgers, missingBookies);
    auditorStats.getNumUnderReplicatedLedger().registerSuccessfulValue(ledgers.size());
    LongAdder underReplicatedSize = new LongAdder();
    FutureUtils.processList(Lists.newArrayList(ledgers), ledgerId -> ledgerManager.readLedgerMetadata(ledgerId).whenComplete((metadata, exception) -> {
        if (exception == null) {
            underReplicatedSize.add(metadata.getValue().getLength());
        }
    }), null).whenComplete((res, e) -> {
        auditorStats.getUnderReplicatedLedgerTotalSize().registerSuccessfulValue(underReplicatedSize.longValue());
    });
    return FutureUtils.processList(Lists.newArrayList(ledgers), ledgerId -> ledgerUnderreplicationManager.markLedgerUnderreplicatedAsync(ledgerId, missingBookies), null);
}",java:S1452,
"public static AbstractZonedDateTimeAssert<?> assertThat(ZonedDateTime actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
"public ScheduledFuture<?> scheduleWithFixedDelayOrdered(Object orderingKey, SafeRunnable command, long initialDelay, long delay, TimeUnit unit){
    return chooseThread(orderingKey).scheduleWithFixedDelay(command, initialDelay, delay, unit);
}",java:S1452,
"public static AbstractCharacterAssert<?> given(Character actual){
    return assumeThat(actual);
}",java:S1452,
" AbstractLocalTimeAssert<?> assertThat(final LocalTime localTime){
    return Assertions.assertThat(localTime);
}",java:S1452,
"@MemberSupport
public List<? extends CommandLogEntry> act(){
    return commandLogEntryRepository.findMostRecent();
}",java:S1452,
" AbstractDoubleArrayAssert<?> assumeThat(final double[] actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
"public SuggestionProvider<?> getForField(Field field){
    if (isEmpty || !autoCompletePreferences.getCompleteFields().contains(field)) {
        return new EmptySuggestionProvider();
    }
    Set<FieldProperty> fieldProperties = field.getProperties();
    if (fieldProperties.contains(FieldProperty.PERSON_NAMES)) {
        return new PersonNameSuggestionProvider(field, database);
    } else if (fieldProperties.contains(FieldProperty.SINGLE_ENTRY_LINK) || fieldProperties.contains(FieldProperty.MULTIPLE_ENTRY_LINK)) {
        return new BibEntrySuggestionProvider(database);
    } else if (fieldProperties.contains(FieldProperty.JOURNAL_NAME) || StandardField.PUBLISHER == field) {
        return new JournalsSuggestionProvider(field, database, abbreviationRepository);
    } else {
        return new WordSuggestionProvider(field, database);
    }
}",java:S1452,
"public Map<String, ? extends ContentInfo> getContent(){
    return this.contentMapper.getImportedEntities();
}",java:S1452,
"public static AbstractLocalDateAssert<?> assumeThat(LocalDate actual){
    return asAssumption(LocalDateAssert.class, LocalDate.class, actual);
}",java:S1452,
"public static FactoryBasedNavigableListAssert<ListAssert<ELEMENT>, List<? extends ELEMENT>, ELEMENT, ObjectAssert<ELEMENT>> given(List<? extends ELEMENT> actual){
    return assumeThat(actual);
}",java:S1452,
"public synchronized ScheduledFuture<?> scheduleTask(final Runnable command, final long delay, final TimeUnit unit){
    assertRunning();
    return timerExecutor.schedule(command, delay, unit);
}",java:S1452,
"public static AbstractCharacterAssert<?> assertThat(Character actual){
    return new CharacterAssert(actual);
}",java:S1452,
"public static AbstractIntegerAssert<?> given(Integer actual){
    return assumeThat(actual);
}",java:S1452,
"public static AbstractFutureAssert<?, ? extends Future<? extends RESULT>, RESULT> assertThat(Future<RESULT> actual){
    return new FutureAssert<>(actual);
}",java:S1452,
"public static AbstractIntArrayAssert<?> assertThat(int[] actual){
    return new IntArrayAssert(actual);
}",java:S1452,
" IterableSizeAssert<?> createIterableSizeAssertProxy(IterableSizeAssert<?> iterableSizeAssert){
    Class<?> proxyClass = createSoftAssertionProxyClass(IterableSizeAssert.class);
    try {
        Constructor<?> constructor = proxyClass.getConstructor(AbstractIterableAssert.class, Integer.class);
        IterableSizeAssert<?> proxiedAssert = (IterableSizeAssert<?>) constructor.newInstance(iterableSizeAssert.returnToIterable(), iterableSizeAssert.actual);
        ((AssertJProxySetup) proxiedAssert).assertj$setup(new ProxifyMethodChangingTheObjectUnderTest(this), collector);
        return proxiedAssert;
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}",java:S1452,
"public ScheduledFuture<?> scheduleWithFixedDelay(SafeRunnable command, long initialDelay, long delay, TimeUnit unit){
    return chooseThread().scheduleWithFixedDelay(command, initialDelay, delay, unit);
}",java:S1452,
"public static Optional<IdFetcher<? extends Identifier>> getIdFetcherForField(Field field){
    if (field == StandardField.DOI) {
        return Optional.of(new CrossRef());
    }
    return Optional.empty();
}",java:S1452,
"public static Query<?> buildQuery(InfinispanConfiguration configuration, RemoteCache<Object, Object> cache){
    return buildQuery(configuration.getQueryBuilder(), cache);
}",java:S1452,
"public static AbstractLocalDateTimeAssert<?> assertThat(LocalDateTime actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
" AbstractBigIntegerAssert<?> assertThat(BigInteger actual){
    return Assertions.assertThat(actual);
}",java:S1452,
"@MemberSupport
public List<? extends CommandLogEntry> coll(){
    return commandLogEntryRepository.findByParent(commandLogEntry);
}",java:S1452,
"public ScheduledFuture<?> schedule(SafeRunnable command, long delay, TimeUnit unit){
    return chooseThread().schedule(command, delay, unit);
}",java:S1452,
"public synchronized Future<?> submit(Runnable task){
    return pool.submit(task);
}",java:S1452,
"public Token<? extends TokenIdentifier> getHadoopToken(AuthenticationToken token) throws IOException{
    if (!(token instanceof DelegationTokenImpl)) {
        throw new IOException(""Expected a DelegationTokenImpl but found "" + (token != null ? token.getClass() : ""null""));
    }
    DelegationTokenImpl dt = (DelegationTokenImpl) token;
    try {
        AuthenticationTokenIdentifier identifier = dt.getIdentifier();
        return new Token<AuthenticationTokenIdentifier>(identifier.getBytes(), dt.getPassword(), identifier.getKind(), dt.getServiceName());
    } catch (Exception e) {
        throw new IOException(""Failed to create Hadoop token from Accumulo DelegationToken"", e);
    }
}",java:S1452,
"@MemberSupport
public List<? extends CommandLogEntry> act(){
    return commandLogEntryRepository.findCurrent();
}",java:S1452,
"@MemberSupport
public List<? extends CommandLogEntry> act(@Nullable final LocalDate from, @Nullable final LocalDate to){
    return commandLogEntryRepository.findByFromAndTo(from, to);
}",java:S1452,
"public Chart<?> getChart(){
    return model.getObject();
}",java:S1452,
" static Schema<?> refToLinkModel(){
    return _OpenApi.refSchema(""LinkRepr"");
}",java:S1452,
"@MemberSupport
public List<? extends CommandLogEntry> coll(){
    val parentLogEntry = commandLogEntry.getParent();
    if (parentLogEntry == null) {
        return Collections.emptyList();
    }
    val siblingCommands = new ArrayList<>(commandLogEntryRepository.findByParent(parentLogEntry));
    siblingCommands.remove(commandLogEntry);
    return siblingCommands;
}",java:S1452,
"public Optional<WaiterAcceptor<? super T>> firstWaiterAcceptorIfMatched(Either<T, Throwable> responseOrException){
    return responseOrException.map(this::responseMatches, this::exceptionMatches);
}",java:S1452,
"public static AbstractCharSequenceAssert<?, ? extends CharSequence> givenCharSequence(CharSequence actual){
    return given(actual);
}",java:S1452,
"public static AbstractCharSequenceAssert<?, ? extends CharSequence> assertThatCharSequence(CharSequence actual){
    return assertThat(actual);
}",java:S1452,
"public static AbstractUrlAssert<?> then(URL actual){
    return assertThat(actual);
}",java:S1452,
"public List<?> getList(String colName){
    return (List<?>) getValue(colName);
}",java:S1452,
"public static AbstractBooleanAssert<?> given(boolean actual){
    return assumeThat(actual);
}",java:S1452,
"public static AbstractByteAssert<?> assertThat(byte actual){
    return new ByteAssert(actual);
}",java:S1452,
"@NonNull
public Can<? extends ManagedParameter> getParamModels(){
    return paramModels;
}",java:S1452,
" Collection<GridSystemService<? extends Grid>> getGridSystemServices(){
    return gridSystemServices != null ? gridSystemServices : gridSystemServicesForTest;
}",java:S1452,
"public static Query<?> buildQuery(InfinispanConfiguration configuration, RemoteCache<Object, Object> cache, Message message){
    InfinispanQueryBuilder builder = message.getHeader(InfinispanConstants.QUERY_BUILDER, InfinispanQueryBuilder.class);
    if (builder == null) {
        builder = configuration.getQueryBuilder();
    }
    return buildQuery(builder, cache);
}",java:S1452,
" AbstractShortArrayAssert<?> assumeThat(final short[] actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
"public static AbstractIntegerAssert<?> assumeThat(Integer actual){
    return asAssumption(IntegerAssert.class, Integer.class, actual);
}",java:S1452,
" AbstractDoubleAssert<?> assumeThat(final double actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
" Request<?, ProposeResponse> propose(final String address, final Boolean auth){
    return new Request<>(bftType.getName() + ""_proposeValidatorVote"", Arrays.asList(address, auth.toString()), web3jService, ProposeResponse.class);
}",java:S1452,
" AbstractDurationAssert<?> assertThat(final Duration actual){
    return Assertions.assertThat(actual);
}",java:S1452,
"protected RecursiveComparisonAssert<?> usingRecursiveComparison(){
    return usingRecursiveComparison(new RecursiveComparisonConfiguration());
}",java:S1452,
"public static AbstractStringAssert<?> then(String actual){
    return assertThat(actual);
}",java:S1452,
"public static AbstractCharArrayAssert<?> given(char[] actual){
    return assumeThat(actual);
}",java:S1452,
"public static AbstractThrowableAssert<?, ? extends Throwable> assertNotModified(ThrowableAssert.ThrowingCallable callable){
    ApiException exception = catchApiException(callable);
    return assertReturnCode(304, exception);
}",java:S1452,
" AbstractPeriodAssert<?> assertThat(final Period actual){
    return Assertions.assertThat(actual);
}",java:S1452,
"public Request<?, GetPrivateTransactionResponse> privGetPrivateTransaction(final Hash transactionHash){
    return new Request<>(""priv_getPrivateTransaction"", singletonList(transactionHash.toHexString()), web3jService, GetPrivateTransactionResponse.class);
}",java:S1452,
"public static AbstractIntegerAssert<?> then(int actual){
    return assertThat(actual);
}",java:S1452,
"public Can<Constructor<?>> getDeclaredConstructors(final Class<?> cls){
    return Can.ofArray(cls.getDeclaredConstructors());
}",java:S1452,
"public static AbstractIteratorAssert<?, T> assertThat(Iterator<? extends T> actual){
    return new IteratorAssert<>(actual);
}",java:S1452,
"protected List<? extends XMLObject> getObjects(XmlSignatureProperties.Input input, XmlSignatureProperties.Output properties){
    if (SignatureType.enveloped == input.getSignatureType() || SignatureType.detached == input.getSignatureType()) {
        if (properties == null || properties.getObjects() == null) {
            return Collections.emptyList();
        }
        return properties.getObjects();
    }
    final String objectId = getConfiguration().getContentObjectId();
    LOG.debug(""Object Content Id {}"", objectId);
    XMLObject obj = createXMLObject(input.getSignatureFactory(), input.getMessageBodyNode(), objectId);
    if (properties == null || properties.getObjects() == null || properties.getObjects().isEmpty()) {
        return Collections.singletonList(obj);
    }
    List<XMLObject> result = new ArrayList<>(properties.getObjects().size() + 1);
    result.add(obj);
    result.addAll(properties.getObjects());
    return result;
}",java:S1452,
"public static AbstractCollectionAssert<?, Collection<? extends E>, E, ObjectAssert<E>> given(Collection<? extends E> actual){
    return assumeThat(actual);
}",java:S1452,
" BigDecimalScaleAssert<?> createBigDecimalScaleAssertProxy(BigDecimalScaleAssert<?> bigDecimalScaleAssert){
    Class<?> proxyClass = createSoftAssertionProxyClass(BigDecimalScaleAssert.class);
    try {
        Constructor<?> constructor = proxyClass.getConstructor(AbstractBigDecimalAssert.class);
        BigDecimalScaleAssert<?> proxiedAssert = (BigDecimalScaleAssert<?>) constructor.newInstance(bigDecimalScaleAssert.returnToBigDecimal());
        ((AssertJProxySetup) proxiedAssert).assertj$setup(new ProxifyMethodChangingTheObjectUnderTest(this), collector);
        return proxiedAssert;
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}",java:S1452,
"public AbstractShortAssert<?> asShort(){
    try {
        return InstanceOfAssertFactories.SHORT.createAssert(Short.parseShort(actual)).withAssertionState(myself);
    } catch (NumberFormatException e) {
        throw failures.failure(info, shouldBeNumeric(actual, SHORT));
    }
}",java:S1452,
"public static AbstractLongAssert<?> assertThat(Long actual){
    return new LongAssert(actual);
}",java:S1452,
"public static Int2ObjectMap<?> getMapByResourceDef(Class<?> resourceDefinition){
    Int2ObjectMap<?> map = null;
    try {
        Field field = GameData.class.getDeclaredField(Utils.lowerCaseFirstChar(resourceDefinition.getSimpleName()) + ""Map"");
        field.setAccessible(true);
        map = (Int2ObjectMap<?>) field.get(null);
        field.setAccessible(false);
    } catch (Exception e) {
        Grasscutter.getLogger().error(""Error fetching resource map for "" + resourceDefinition.getSimpleName(), e);
    }
    return map;
}",java:S1452,
"public static AbstractFileAssert<?> given(File actual){
    return assumeThat(actual);
}",java:S1452,
"public ThrowableAssertAlternative<?> withThrowableOfType(Class<? extends Throwable> type){
    return withThrowableThat().isInstanceOf(type);
}",java:S1452,
"public static AbstractCharSequenceAssert<?, ? extends CharSequence> assertThat(CharSequence actual){
    return new CharSequenceAssert(actual);
}",java:S1452,
"public WizardModalPanel<?> getModalPanel(){
    return modalPanel;
}",java:S1452,
"public static AbstractIntegerAssert<?> given(int actual){
    return assumeThat(actual);
}",java:S1452,
"public static AbstractInstantAssert<?> assertThat(Instant instant){
    return new InstantAssert(instant);
}",java:S1452,
"public static AbstractByteAssert<?> then(byte actual){
    return assertThat(actual);
}",java:S1452,
"public Collection<?> complete(AutoCompletionBinding.ISuggestionRequest request){
    return suggestionProvider.provideSuggestions(request);
}",java:S1452,
"public AbstractCharSequenceAssert<?, ? extends CharSequence> extractingCharSequence(){
    isPresent();
    assertThat(actual.get()).isInstanceOf(CharSequence.class);
    return assertThat((CharSequence) actual.get());
}",java:S1452,
"public ScheduledFuture<?> scheduleAtFixedRateOrdered(Object orderingKey, SafeRunnable command, long initialDelay, long period, TimeUnit unit){
    return chooseThread(orderingKey).scheduleAtFixedRate(command, initialDelay, period, unit);
}",java:S1452,
" AbstractBooleanArrayAssert<?> assertThat(final boolean[] actual){
    return Assertions.assertThat(actual);
}",java:S1452,
"public final Collection<Condition<? super T>> conditions(){
    return unmodifiableCollection(conditions);
}",java:S1452,
"public Request<?, NetServicesResponse> netServices(){
    return new Request<>(""net_services"", Collections.emptyList(), web3jService, NetServicesResponse.class);
}",java:S1452,
" static InstanceOfAssertFactory<T, AbstractThrowableAssert<?, T>> throwable(Class<T> type){
    return new InstanceOfAssertFactory<>(type, Assertions::assertThat);
}",java:S1452,
"public static AbstractStringAssert<?> given(String actual){
    return assumeThat(actual);
}",java:S1452,
"public static AbstractInstantAssert<?> assumeThat(Instant actual){
    return asAssumption(InstantAssert.class, Instant.class, actual);
}",java:S1452,
"protected Any<?> getAny(final Provision provision, final AnyTypeKind anyTypeKind, final String anyKey){
    AnyDAO<?> dao = anyUtilsFactory.getInstance(anyTypeKind).dao();
    String actualKey = anyKey;
    if (!SyncopeConstants.UUID_PATTERN.matcher(anyKey).matches()) {
        actualKey = dao instanceof UserDAO ? ((UserDAO) dao).findKey(anyKey) : dao instanceof GroupDAO ? ((GroupDAO) dao).findKey(anyKey) : ((AnyObjectDAO) dao).findKey(provision.getAnyType(), anyKey);
    }
    Any<?> any = dao.authFind(actualKey);
    if (any == null) {
        throw new NotFoundException(provision.getAnyType() + "" '"" + anyKey + ""'"");
    }
    return any;
}",java:S1452,
"public Map<String, ? extends ProductInfo> getProducts(){
    return this.productMapper.getImportedEntities();
}",java:S1452,
"public List<Interceptor<? extends Message>> getOutInterceptors(){
    return out;
}",java:S1452,
" AbstractOffsetTimeAssert<?> assertThat(final OffsetTime offsetTime){
    return Assertions.assertThat(offsetTime);
}",java:S1452,
"public static Predicate<? super Method> withEntityParameter(){
    return (Method m) -> {
        final Class<?> parameterType = m.getParameterTypes()[0];
        return parameterType.isAnnotationPresent(PersistenceCapable.class);
    };
}",java:S1452,
"public static AbstractOffsetDateTimeAssert<?> assertThat(OffsetDateTime actual){
    return new OffsetDateTimeAssert(actual);
}",java:S1452,
" Request<?, DiscardResponse> cliqueDiscard(final String address){
    return new Request<>(""clique_discard"", singletonList(address), web3jService, DiscardResponse.class);
}",java:S1452,
" AbstractCharArrayAssert<?> assertThat(final char[] actual){
    return Assertions.assertThat(actual);
}",java:S1452,
"public static AbstractFloatAssert<?> given(float actual){
    return assumeThat(actual);
}",java:S1452,
"public ScheduledFuture<?> getSpeculativeTask(){
    return speculativeTask;
}",java:S1452,
"public static AbstractIntegerAssert<?> assertThat(int actual){
    return new IntegerAssert(actual);
}",java:S1452,
"public Comparator<?> getComparatorForField(String fieldLocation){
    Comparator<?> exactFieldLocationComparator = super.get(fieldLocation);
    if (exactFieldLocationComparator != null)
        return exactFieldLocationComparator;
    return comparatorByPatterns.stream().map(comparatorForPatterns -> comparatorForPatterns.getComparatorForField(fieldLocation)).filter(comparator -> comparator != null).findFirst().orElse(null);
}",java:S1452,
"public static AbstractUriAssert<?> assertThat(URI actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
" AbstractComparableAssert<?, T> assumeThat(final T actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
" synchronized Future<?> submitLostBookieRecoveryDelayChangedEvent(){
    if (executor.isShutdown()) {
        SettableFuture<Void> f = SettableFuture.<Void>create();
        f.setException(new BKAuditException(""Auditor shutting down""));
        return f;
    }
    return executor.submit(() -> {
        int lostBookieRecoveryDelay = -1;
        try {
            waitIfLedgerReplicationDisabled();
            lostBookieRecoveryDelay = Auditor.this.ledgerUnderreplicationManager.getLostBookieRecoveryDelay();
            if (auditTask != null) {
                LOG.info(""lostBookieRecoveryDelay period has been changed so canceling the pending AuditTask"");
                auditTask.cancel(false);
                auditorStats.getNumDelayedBookieAuditsCancelled().inc();
            }
            if ((lostBookieRecoveryDelay == 0) || (lostBookieRecoveryDelay == lostBookieRecoveryDelayBeforeChange)) {
                LOG.info(""lostBookieRecoveryDelay has been set to 0 or reset to its previous value, "" + ""so starting AuditTask. Current lostBookieRecoveryDelay: {}, "" + ""previous lostBookieRecoveryDelay: {}"", lostBookieRecoveryDelay, lostBookieRecoveryDelayBeforeChange);
                auditorBookieCheckTask.startAudit(false);
                auditTask = null;
                bookiesToBeAudited.clear();
            } else if (auditTask != null) {
                LOG.info(""lostBookieRecoveryDelay has been set to {}, so rescheduling AuditTask accordingly"", lostBookieRecoveryDelay);
                auditTask = executor.schedule(() -> {
                    auditorBookieCheckTask.startAudit(false);
                    auditTask = null;
                    bookiesToBeAudited.clear();
                }, lostBookieRecoveryDelay, TimeUnit.SECONDS);
                auditorStats.getNumBookieAuditsDelayed().inc();
            }
        } catch (InterruptedException ie) {
            Thread.currentThread().interrupt();
            LOG.error(""Interrupted while for LedgersReplication to be enabled "", ie);
        } catch (ReplicationException.NonRecoverableReplicationException nre) {
            LOG.error(""Non Recoverable Exception while reading from ZK"", nre);
            submitShutdownTask();
        } catch (UnavailableException ue) {
            LOG.error(""Exception while reading from ZK"", ue);
        } finally {
            if (lostBookieRecoveryDelay != -1) {
                lostBookieRecoveryDelayBeforeChange = lostBookieRecoveryDelay;
            }
        }
    });
}",java:S1452,
" AbstractLocalDateAssert<?> assertThat(final LocalDate localDate){
    return Assertions.assertThat(localDate);
}",java:S1452,
"public static AbstractDoubleAssert<?> assumeThat(Double actual){
    return asAssumption(DoubleAssert.class, Double.class, actual);
}",java:S1452,
"public static AbstractBigDecimalAssert<?> assertThat(BigDecimal actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
" AbstractListAssert<?, List<? extends Integer>, Integer, ObjectAssert<Integer>> assumeThat(IntStream intStream){
    return Assumptions.assumeThat(intStream);
}",java:S1452,
"public Request<?, GetTransactionCountResponse> privGetTransactionCount(final Object[] params){
    return new Request<>(""priv_getTransactionCount"", List.of(params), web3jService, GetTransactionCountResponse.class);
}",java:S1452,
"public CompletableFuture<?> stop(){
    if (httpServer == null) {
        return CompletableFuture.completedFuture(null);
    }
    final CompletableFuture<?> resultFuture = new CompletableFuture<>();
    httpServer.close(res -> {
        if (res.succeeded()) {
            httpServer = null;
            resultFuture.complete(null);
        } else {
            resultFuture.completeExceptionally(res.cause());
        }
    });
    return resultFuture;
}",java:S1452,
"public static AbstractPathAssert<?> assertThatPath(Path actual){
    return assertThat(actual);
}",java:S1452,
"public Map<?, ?> getMap(int idx){
    return (Map<?, ?>) getValue(idx);
}",java:S1452,
"public static AbstractByteAssert<?> given(Byte actual){
    return assumeThat(actual);
}",java:S1452,
"public List<AbstractSequence<? extends AbstractCompound>> getBioSequences(boolean ignoreCase){
    return getBioSequences(ignoreCase, null);
}",java:S1452,
"public ResultSet<? extends AnnotationView> searchAll() throws AnnotationServiceException{
    ResultSet<? extends AnnotationView> res = null;
    res = search(SolrSyntaxConstants.ALL_SOLR_ENTRIES);
    return res;
}",java:S1452,
"public static AbstractDoubleAssert<?> assertThat(double actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
" static DescribedPredicate<JavaAnnotation<?>> DomainObject_logicalTypeName(){
    return DomainXxx_logicalTypeName(DomainObject.class);
}",java:S1452,
"public static AbstractOffsetTimeAssert<?> given(OffsetTime actual){
    return assumeThat(actual);
}",java:S1452,
"public static AbstractCharSequenceAssert<?, ? extends CharSequence> given(StringBuilder actual){
    return assumeThat(actual);
}",java:S1452,
"@MemberSupport
public List<? extends CommandLogEntry> coll(){
    val username = hasUsername.getUsername();
    return username != null ? commandLogEntryRepository.findRecentByUsername(username) : Collections.emptyList();
}",java:S1452,
"protected Iterator<?> createIterator(InputStream in, String charset) throws XMLStreamException, UnsupportedEncodingException{
    return createIterator(new InputStreamReader(in, charset));
}",java:S1452,
"public static AbstractFileAssert<?> assertThat(File actual){
    return new FileAssert(actual);
}",java:S1452,
"public static AbstractListAssert<?, List<? extends Integer>, Integer, ObjectAssert<Integer>> given(IntStream actual){
    return assumeThat(actual);
}",java:S1452,
"protected AbstractAnyLogic<?, ?, ?> anyLogic(final Resource type){
    switch(type) {
        case User:
            return userLogic;
        case Group:
            return groupLogic;
        default:
            throw new UnsupportedOperationException();
    }
}",java:S1452,
"public static AbstractBooleanAssert<?> assertThat(boolean actual){
    return new BooleanAssert(actual);
}",java:S1452,
"protected Iterator<?> createIterator(Reader in) throws XMLStreamException{
    return new XMLTokenIterator(path, nsmap, mode, group, in);
}",java:S1452,
"@MemberSupport
public List<? extends SessionLogEntry> act(@Nullable final String user, @Nullable final LocalDate from, @Nullable final LocalDate to){
    if (user == null) {
        return sessionLogEntryRepository.findByFromAndTo(from, to);
    } else {
        return sessionLogEntryRepository.findByUsernameAndFromAndTo(user, from, to);
    }
}",java:S1452,
"@MemberSupport
public List<? extends CommandLogEntry> coll(){
    return bookmarkService.bookmarkFor(domainObject).map(bookmark -> queryResultsCache.execute(() -> commandLogEntryRepository.findRecentBackgroundByTarget(bookmark), T_recentBackgroundCommands.class, ""T_recentBackgroundCommands"", bookmark)).orElse(Collections.emptyList());
}",java:S1452,
"public static AbstractShortAssert<?> assertThat(short actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
"public static AbstractBooleanArrayAssert<?> assertThat(boolean[] actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
" Future<?> triggerGC(){
    final boolean force = forceGarbageCollection.get();
    final boolean suspendMajor = suspendMajorCompaction.get();
    final boolean suspendMinor = suspendMinorCompaction.get();
    return gcExecutor.submit(() -> {
        runWithFlags(force, suspendMajor, suspendMinor);
    });
}",java:S1452,
" AbstractCharSequenceAssert<?, ? extends CharSequence> assumeThat(final StringBuffer actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
"public static Query<?> buildQuery(InfinispanConfiguration configuration, Cache<Object, Object> cache, Message message){
    InfinispanQueryBuilder builder = message.getHeader(InfinispanConstants.QUERY_BUILDER, InfinispanQueryBuilder.class);
    if (builder == null) {
        builder = configuration.getQueryBuilder();
    }
    return buildQuery(builder, cache);
}",java:S1452,
"public static AbstractDoubleAssert<?> then(Double actual){
    return assertThat(actual);
}",java:S1452,
"public static AbstractIterableAssert<?, Iterable<? extends T>, T, ObjectAssert<T>> assertThat(Iterable<? extends T> actual){
    return new IterableAssert<>(actual);
}",java:S1452,
"public static AbstractInstantAssert<?> given(Instant actual){
    return assumeThat(actual);
}",java:S1452,
"@MemberSupport
public Collection<? extends ApplicationRole> choices0Act(){
    return applicationRoleRepository.allRoles();
}",java:S1452,
"public static AbstractBigIntegerAssert<?> then(BigInteger actual){
    return assertThat(actual);
}",java:S1452,
"@MemberSupport
public Collection<? extends ApplicationRole> choices0Act(){
    val allRoles = applicationRoleRepository.allRoles();
    val applicationRoles = _Sets.newTreeSet(allRoles);
    applicationRoles.removeAll(target.getRoles());
    return applicationRoles;
}",java:S1452,
"public static AbstractByteAssert<?> assertThat(Byte actual){
    return new ByteAssert(actual);
}",java:S1452,
"public static AbstractPeriodAssert<?> assertThat(Period period){
    return new PeriodAssert(period);
}",java:S1452,
"public static Optional<FastSyncDownloader<?>> create(final PivotBlockSelector pivotBlockSelector, final SynchronizerConfiguration syncConfig, final Path dataDirectory, final ProtocolSchedule protocolSchedule, final ProtocolContext protocolContext, final MetricsSystem metricsSystem, final EthContext ethContext, final WorldStateStorage worldStateStorage, final SyncState syncState, final Clock clock){
    final Path fastSyncDataDirectory = dataDirectory.resolve(FAST_SYNC_FOLDER);
    final FastSyncStateStorage fastSyncStateStorage = new FastSyncStateStorage(fastSyncDataDirectory);
    if (SyncMode.isFullSync(syncConfig.getSyncMode())) {
        if (fastSyncStateStorage.isFastSyncInProgress()) {
            throw new IllegalStateException(""Unable to change the sync mode when fast sync is incomplete, please restart with fast sync mode"");
        } else {
            return Optional.empty();
        }
    }
    ensureDirectoryExists(fastSyncDataDirectory.toFile());
    final FastSyncState fastSyncState = fastSyncStateStorage.loadState(ScheduleBasedBlockHeaderFunctions.create(protocolSchedule));
    if (!syncState.isResyncNeeded() && fastSyncState.getPivotBlockHeader().isEmpty() && protocolContext.getBlockchain().getChainHeadBlockNumber() != BlockHeader.GENESIS_BLOCK_NUMBER) {
        LOG.info(""Fast sync was requested, but cannot be enabled because the local blockchain is not empty."");
        return Optional.empty();
    }
    if (worldStateStorage instanceof BonsaiWorldStateKeyValueStorage) {
        worldStateStorage.clearFlatDatabase();
    } else {
        final Path queueDataDir = fastSyncDataDirectory.resolve(""statequeue"");
        if (queueDataDir.toFile().exists()) {
            LOG.warn(""Fast sync is picking up after old fast sync version. Pruning the world state and starting from scratch."");
            clearOldFastSyncWorldStateData(worldStateStorage, queueDataDir);
        }
    }
    final InMemoryTasksPriorityQueues<NodeDataRequest> taskCollection = createWorldStateDownloaderTaskCollection(metricsSystem, syncConfig.getWorldStateTaskCacheSize());
    final WorldStateDownloader worldStateDownloader = new FastWorldStateDownloader(ethContext, worldStateStorage, taskCollection, syncConfig.getWorldStateHashCountPerRequest(), syncConfig.getWorldStateRequestParallelism(), syncConfig.getWorldStateMaxRequestsWithoutProgress(), syncConfig.getWorldStateMinMillisBeforeStalling(), clock, metricsSystem);
    final FastSyncDownloader<NodeDataRequest> fastSyncDownloader = new FastSyncDownloader<>(new FastSyncActions(syncConfig, worldStateStorage, protocolSchedule, protocolContext, ethContext, syncState, pivotBlockSelector, metricsSystem), worldStateStorage, worldStateDownloader, fastSyncStateStorage, taskCollection, fastSyncDataDirectory, fastSyncState);
    syncState.setWorldStateDownloadStatus(worldStateDownloader);
    return Optional.of(fastSyncDownloader);
}",java:S1452,
"public static AbstractThrowableAssert<?, ? extends Throwable> assertBadRequest(ThrowableAssert.ThrowingCallable callable){
    ApiException exception = catchApiException(callable);
    return assertReturnCode(400, exception);
}",java:S1452,
" Request<?, DiscardResponse> discard(final String address){
    return new Request<>(bftType.getName() + ""_discardValidatorVote"", singletonList(address), web3jService, DiscardResponse.class);
}",java:S1452,
"public static AbstractCollectionAssert<?, Collection<? extends E>, E, ObjectAssert<E>> assertThat(Collection<? extends E> actual){
    return AssertionsForInterfaceTypes.assertThat(actual);
}",java:S1452,
" AbstractInputStreamAssert<?, ? extends InputStream> assumeThat(final InputStream actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
"public static AbstractLocalDateTimeAssert<?> then(LocalDateTime actual){
    return assertThat(actual);
}",java:S1452,
"public CompletableFuture<?> getFuture(){
    return future;
}",java:S1452,
" AbstractIntegerAssert<?> assumeThat(final int actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
"public AbstractListAssert<?, List<? extends V>, V, ObjectAssert<V>> map(Function<? super ELEMENT, V> mapper){
    return internalExtracting(mapper);
}",java:S1452,
"public static AbstractCollectionAssert<?, Collection<? extends E>, E, ObjectAssert<E>> then(Collection<? extends E> actual){
    return assertThat(actual);
}",java:S1452,
"public static AbstractOffsetDateTimeAssert<?> assertThat(OffsetDateTime actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
" AbstractDoubleArrayAssert<?> assertThat(final double[] actual){
    return Assertions.assertThat(actual);
}",java:S1452,
"@MemberSupport
public List<? extends ExecutionLogEntry> act(){
    return executionLogEntryRepository.findMostRecent();
}",java:S1452,
" AbstractPathAssert<?> assumeThat(final Path actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
"public static AbstractBooleanAssert<?> assertThat(boolean actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
"public static AbstractBooleanAssert<?> then(boolean actual){
    return assertThat(actual);
}",java:S1452,
"public ScheduledFuture<?> scheduleAtFixedRate(SafeRunnable command, long initialDelay, long period, TimeUnit unit){
    return chooseThread().scheduleAtFixedRate(command, initialDelay, period, unit);
}",java:S1452,
"public static ProvisioningResult<? extends AnyTO> remedy(final String key, final String anyKey){
    Response response = getService(RemediationService.class).remedy(key, anyKey);
    return response.readEntity(new GenericType<>() {
    });
}",java:S1452,
"public List<?> getStruct(String colName){
    return (List<?>) getValue(colName);
}",java:S1452,
" AbstractUrlAssert<?> assumeThat(final URL url){
    return Assumptions.assumeThat(url);
}",java:S1452,
"public AbstractLongAssert<?> asLong(){
    try {
        return InstanceOfAssertFactories.LONG.createAssert(Long.parseLong(actual)).withAssertionState(myself);
    } catch (NumberFormatException e) {
        throw failures.failure(info, shouldBeNumeric(actual, LONG));
    }
}",java:S1452,
"public AbstractThrowableAssert<?, ?> cause(){
    throwables.assertHasCause(info, actual);
    return new ThrowableAssert<>(actual.getCause()).withAssertionState(myself);
}",java:S1452,
"public Request<?, PrivxFindPrivacyGroupResponse> privxFindFlexiblePrivacyGroup(final List<Base64String> nodes){
    return new Request<>(""privx_findFlexiblePrivacyGroup"", singletonList(nodes), web3jService, PrivxFindPrivacyGroupResponse.class);
}",java:S1452,
"public static AbstractLongArrayAssert<?> assumeThat(long[] actual){
    return asAssumption(LongArrayAssert.class, long[].class, actual);
}",java:S1452,
"public static AbstractCharacterAssert<?> then(Character actual){
    return assertThat(actual);
}",java:S1452,
"public Request<?, EthLog> privGetLogs(final String privacyGroupId, final LogFilterJsonParameter filterParameter){
    return new Request<>(""priv_getLogs"", Arrays.asList(privacyGroupId, filterParameter), web3jService, EthLog.class);
}",java:S1452,
"public static AbstractLocalDateAssert<?> then(LocalDate actual){
    return assertThat(actual);
}",java:S1452,
"public Comparator<?> getComparator(){
    return comparator;
}",java:S1452,
"public ThrowableAssertAlternative<?> havingRootCause(){
    AbstractThrowableAssert<?, ?> rootCauseAssert = getDelegate().rootCause();
    return new ThrowableAssertAlternative<>(rootCauseAssert.actual);
}",java:S1452,
" Request<?, ProposeResponse> cliquePropose(final String address, final Boolean auth){
    return new Request<>(""clique_propose"", Arrays.asList(address, auth.toString()), web3jService, ProposeResponse.class);
}",java:S1452,
"public static AbstractThrowableAssert<?, ? extends Throwable> givenCode(ThrowingCallable lambda){
    return assumeThatCode(lambda);
}",java:S1452,
"public static Predicate<? super ManagedObject> filterOn(final InteractionInitiatedBy interactionInitiatedBy){
    return $ -> MmVisibilityUtils.isVisible($, interactionInitiatedBy);
}",java:S1452,
"public static AbstractZonedDateTimeAssert<?> then(ZonedDateTime actual){
    return assertThat(actual);
}",java:S1452,
"public static AbstractCharSequenceAssert<?, ? extends CharSequence> thenCharSequence(CharSequence actual){
    return then(actual);
}",java:S1452,
"public static Collector<T, ?, ? extends Collection<T>> toUnmodifiableOfType(@NonNull final Class<?> typeOfCollection){
    if (SortedSet.class.equals(typeOfCollection)) {
        return toUnmodifiableSortedSet();
    }
    if (Set.class.equals(typeOfCollection)) {
        return toUnmodifiableSet();
    }
    if (List.class.equals(typeOfCollection)) {
        return toUnmodifiableList();
    }
    if (Collection.class.equals(typeOfCollection)) {
        return toUnmodifiableCollection();
    }
    throw new IllegalArgumentException(String.format(""Can not collect into %s. Only List, Set, SortedSet and Collection are supported."", typeOfCollection.getClass().getName()));
}",java:S1452,
"public static Query<?> buildQuery(InfinispanConfiguration configuration, Cache<Object, Object> cache){
    return buildQuery(configuration.getQueryBuilder(), cache);
}",java:S1452,
" BaseModel<?> model(Kind kind, String name){
    switch(kind) {
        case component:
            return componentModel(name);
        case dataformat:
            return dataFormatModel(name);
        case language:
            return languageModel(name);
        case other:
            return otherModel(name);
        case eip:
            return eipModel(name);
        default:
            throw new IllegalArgumentException(""Unexpected kind "" + kind);
    }
}",java:S1452,
"public static AbstractIntArrayAssert<?> then(int[] actual){
    return assertThat(actual);
}",java:S1452,
"public static AbstractBigDecimalAssert<?> assertThat(BigDecimal actual){
    return new BigDecimalAssert(actual);
}",java:S1452,
" AbstractLocalDateTimeAssert<?> assumeThat(final LocalDateTime localDateTime){
    return Assumptions.assumeThat(localDateTime);
}",java:S1452,
"public static AbstractLocalTimeAssert<?> then(LocalTime actual){
    return assertThat(actual);
}",java:S1452,
"public static AbstractPathAssert<?> assertThat(Path actual){
    return AssertionsForInterfaceTypes.assertThat(actual);
}",java:S1452,
"public static Matcher<? super ResultSet> returnsUnordered(String... lines){
    final List<String> expectedList = Lists.newArrayList(lines);
    Collections.sort(expectedList);
    return new CustomTypeSafeMatcher<ResultSet>(Arrays.toString(lines)) {

        @Override
        protected void describeMismatchSafely(ResultSet item, Description description) {
            final Object value = THREAD_ACTUAL.get();
            THREAD_ACTUAL.remove();
            description.appendText(""was "").appendValue(value);
        }

        @Override
        protected boolean matchesSafely(ResultSet resultSet) {
            final List<String> actualList = new ArrayList<>();
            try {
                CalciteAssert.toStringList(resultSet, actualList);
                resultSet.close();
            } catch (SQLException e) {
                throw TestUtil.rethrow(e);
            }
            Collections.sort(actualList);
            THREAD_ACTUAL.set(actualList);
            final boolean equals = actualList.equals(expectedList);
            if (!equals) {
                THREAD_ACTUAL.set(actualList);
            }
            return equals;
        }
    };
}",java:S1452,
"public RedisSerializer<?> getSerializer(){
    return serializer != null ? serializer : createDefaultSerializer();
}",java:S1452,
"public Entry<Long, ? extends List<BookieId>> getSegmentEnsemble(){
    return segmentEnsemble;
}",java:S1452,
" AbstractDoubleAssert<?> assertThat(final Double actual){
    return Assertions.assertThat(actual);
}",java:S1452,
"public static AbstractBooleanAssert<?> assertThat(Boolean actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
"public static AbstractShortAssert<?> then(Short actual){
    return assertThat(actual);
}",java:S1452,
"public static StrLookup<?> noneLookup(){
    return NONE_LOOKUP;
}",java:S1452,
"public static AbstractUrlAssert<?> given(URL actual){
    return assumeThat(actual);
}",java:S1452,
"public AbstractDoubleAssert<?> asDouble(){
    try {
        return InstanceOfAssertFactories.DOUBLE.createAssert(Double.parseDouble(actual)).withAssertionState(myself);
    } catch (NumberFormatException | NullPointerException e) {
        throw failures.failure(info, shouldBeNumeric(actual, DOUBLE));
    }
}",java:S1452,
"public static AbstractByteArrayAssert<?> assertThat(byte[] actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
" static DescribedPredicate<JavaAnnotation<?>> DomainObject_nature_VIEW_MODEL(){
    return DomainObject_nature(Nature.VIEW_MODEL);
}",java:S1452,
"protected Iterator<?> createIterator(InputStream in) throws XMLStreamException, IOException{
    return createIterator(new XmlStreamReader(in));
}",java:S1452,
"public static AbstractShortArrayAssert<?> then(short[] actual){
    return assertThat(actual);
}",java:S1452,
"public CsvRecordConverter<?> getRecordConverter(){
    return recordConverter;
}",java:S1452,
" Execution<?, ?> getPriorExecutionOrThrowIfAnyException(@NonNull final ActionInvocation actionInvocation){
    val priorExecution = getPriorExecution();
    val executionExceptionIfAny = getPriorExecution().getThrew();
    actionInvocation.setThrew(executionExceptionIfAny);
    if (executionExceptionIfAny != null) {
        throw executionExceptionIfAny instanceof RuntimeException ? ((RuntimeException) executionExceptionIfAny) : new RuntimeException(executionExceptionIfAny);
    }
    return priorExecution;
}",java:S1452,
"public static AbstractLongArrayAssert<?> then(long[] actual){
    return assertThat(actual);
}",java:S1452,
"protected List<? extends Annotation> filterAnnotationListByTarget(String target, boolean multiple){
    Query<PersistentAnnotation> query = getAnnotationDao().createQuery();
    if (StringUtils.isNotEmpty(target)) {
        if (multiple)
            query.disableValidation().field(PersistentAnnotation.FIELD_TARGET + '.' + PersistentAnnotation.FIELD_VALUES).equal(target);
        else
            query.disableValidation().filter(PersistentAnnotation.FIELD_TARGET + '.' + PersistentAnnotation.FIELD_VALUE, target);
    }
    query.filter(PersistentAnnotation.FIELD_DISABLED, null);
    QueryResults<? extends PersistentAnnotation> results = getAnnotationDao().find(query);
    return results.asList();
}",java:S1452,
"public static AbstractLocalDateTimeAssert<?> assumeThat(LocalDateTime actual){
    return asAssumption(LocalDateTimeAssert.class, LocalDateTime.class, actual);
}",java:S1452,
"public static AbstractDurationAssert<?> assumeThat(Duration actual){
    return asAssumption(DurationAssert.class, Duration.class, actual);
}",java:S1452,
"public static AbstractLocalTimeAssert<?> assertThat(LocalTime actual){
    return new LocalTimeAssert(actual);
}",java:S1452,
"public static AbstractLongArrayAssert<?> assertThat(long[] actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
"public static AbstractPathAssert<?> then(Path actual){
    return assertThat(actual);
}",java:S1452,
"@MemberSupport
public Collection<? extends ApplicationTenancy> choicesChild(){
    return applicationTenancyRepository.getChildren(target);
}",java:S1452,
" AbstractBooleanAssert<?> assumeThat(final boolean actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
" AbstractCharacterAssert<?> assumeThat(final Character actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
"public Future<?> executeWith(TaskExecutor taskExecutor){
    return taskExecutor.execute(this);
}",java:S1452,
" FactoryBasedNavigableIterableAssert<?, ACTUAL, ELEMENT, ELEMENT_ASSERT> assertThat(Iterable<? extends ELEMENT> actual, AssertFactory<ELEMENT, ELEMENT_ASSERT> assertFactory){
    return Assertions.assertThat(actual, assertFactory);
}",java:S1452,
" AbstractCollectionAssert<?, Collection<? extends E>, E, ObjectAssert<E>> assertThatCollection(final Collection<? extends E> actual){
    return assertThat(actual);
}",java:S1452,
"public static AbstractPathAssert<?> thenPath(Path actual){
    return then(actual);
}",java:S1452,
" AbstractThrowableAssert<?, ? extends Throwable> thenCode(ThrowingCallable shouldRaiseOrNotThrowable){
    return then(catchThrowable(shouldRaiseOrNotThrowable));
}",java:S1452,
"public static AbstractDoubleAssert<?> given(Double actual){
    return assumeThat(actual);
}",java:S1452,
" static DescribedPredicate<JavaAnnotation<?>> XmlJavaTypeAdapter_value_PersistentEntityAdapter(){
    return new DescribedPredicate<JavaAnnotation<?>>(""@XmlJavaTypeAdapter(PersistentEntityAdapter.class)"") {

        @Override
        public boolean test(final JavaAnnotation<?> javaAnnotation) {
            if (!javaAnnotation.getRawType().isAssignableTo(XmlJavaTypeAdapter.class)) {
                return false;
            }
            val properties = javaAnnotation.getProperties();
            val value = properties.get(""value"");
            return value instanceof JavaClass && ((JavaClass) value).isAssignableFrom(PersistentEntityAdapter.class);
        }
    };
}",java:S1452,
" Request<?, SignersBlockResponse> cliqueGetSigners(final String blockNumber){
    return new Request<>(""clique_getSigners"", singletonList(blockNumber), web3jService, SignersBlockResponse.class);
}",java:S1452,
"public static AbstractUrlAssert<?> assertThat(URL actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
"public static Procedure<?> newInstance(ByteBuffer byteBuffer){
    Class<?> procedureClass = deserializeTypeInfo(byteBuffer);
    Procedure<?> procedure;
    try {
        procedure = (Procedure<?>) procedureClass.newInstance();
    } catch (InstantiationException | IllegalAccessException e) {
        throw new RuntimeException(""Instantiation failed"", e);
    }
    return procedure;
}",java:S1452,
" AbstractCollectionAssert<?, Collection<? extends E>, E, ObjectAssert<E>> thenCollection(Collection<? extends E> actual){
    return then(actual);
}",java:S1452,
"public List<?> evaluateAsList(Exchange exchange) throws Exception{
    LOG.debug(""evaluateAsList: {} for exchange: {}"", expression, exchange);
    return getExpression().evaluate(createDynamicContext(exchange));
}",java:S1452,
"public static AbstractZonedDateTimeAssert<?> assumeThat(ZonedDateTime actual){
    return asAssumption(ZonedDateTimeAssert.class, ZonedDateTime.class, actual);
}",java:S1452,
"public static AbstractIntegerAssert<?> assumeThat(int actual){
    return asAssumption(IntegerAssert.class, Integer.class, actual);
}",java:S1452,
"public Iterable<? extends Tile> computeTiles(){
    if (!algorithm) {
        return tiles;
    }
    return new TileSuggester(this).tiles();
}",java:S1452,
" AbstractCharArrayAssert<?> assumeThat(final char[] actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
" Request<?, org.web3j.protocol.core.methods.response.VoidResponse> minerStart(){
    return new Request<>(""miner_start"", null, web3jService, org.web3j.protocol.core.methods.response.VoidResponse.class);
}",java:S1452,
"public static SortedMap<Long, ? extends List<BookieId>> bookiesForLedger(final LedgerHandle lh){
    return lh.getLedgerMetadata().getAllEnsembles();
}",java:S1452,
" Request<?, SignersBlockResponse> signersAtHash(final Hash hash){
    return new Request<>(bftType.getName() + ""_getValidatorsByBlockHash"", singletonList(hash.toString()), web3jService, SignersBlockResponse.class);
}",java:S1452,
"public static AbstractIntegerAssert<?> assertThat(int actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
" AbstractShortAssert<?> assertThat(final short actual){
    return Assertions.assertThat(actual);
}",java:S1452,
" AbstractUriAssert<?> assertThat(final URI actual){
    return Assertions.assertThat(actual);
}",java:S1452,
"@MemberSupport
public List<? extends SessionLogEntry> act(){
    if (hasUsername == null || hasUsername.getUsername() == null) {
        return Collections.emptyList();
    }
    return sessionLogEntryRepository.findRecentByUsername(hasUsername.getUsername());
}",java:S1452,
"public static AbstractByteAssert<?> assumeThat(byte actual){
    return asAssumption(ByteAssert.class, Byte.class, actual);
}",java:S1452,
"public static AbstractThrowableAssert<?, ? extends Throwable> assertThatCode(ThrowingCallable shouldRaiseOrNotThrowable){
    return AssertionsForClassTypes.assertThatCode(shouldRaiseOrNotThrowable);
}",java:S1452,
" AbstractBooleanArrayAssert<?> assumeThat(final boolean[] actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
" synchronized Future<?> submitLostBookieRecoveryDelayChangedEvent(){
    if (executor.isShutdown()) {
        SettableFuture<Void> f = SettableFuture.<Void>create();
        f.setException(new BKAuditException(""Auditor shutting down""));
        return f;
    }
    return executor.submit(safeRun(new Runnable() {

        int lostBookieRecoveryDelay = -1;

        @Override
        public void run() {
            try {
                waitIfLedgerReplicationDisabled();
                lostBookieRecoveryDelay = Auditor.this.ledgerUnderreplicationManager.getLostBookieRecoveryDelay();
                if (auditTask != null) {
                    LOG.info(""lostBookieRecoveryDelay period has been changed so canceling the pending AuditTask"");
                    auditTask.cancel(false);
                    numDelayedBookieAuditsCancelled.inc();
                }
                if ((lostBookieRecoveryDelay == 0) || (lostBookieRecoveryDelay == lostBookieRecoveryDelayBeforeChange)) {
                    LOG.info(""lostBookieRecoveryDelay has been set to 0 or reset to its previous value, "" + ""so starting AuditTask. Current lostBookieRecoveryDelay: {}, "" + ""previous lostBookieRecoveryDelay: {}"", lostBookieRecoveryDelay, lostBookieRecoveryDelayBeforeChange);
                    startAudit(false);
                    auditTask = null;
                    bookiesToBeAudited.clear();
                } else if (auditTask != null) {
                    LOG.info(""lostBookieRecoveryDelay has been set to {}, so rescheduling AuditTask accordingly"", lostBookieRecoveryDelay);
                    auditTask = executor.schedule(safeRun(new Runnable() {

                        @Override
                        public void run() {
                            startAudit(false);
                            auditTask = null;
                            bookiesToBeAudited.clear();
                        }
                    }), lostBookieRecoveryDelay, TimeUnit.SECONDS);
                    numBookieAuditsDelayed.inc();
                }
            } catch (InterruptedException ie) {
                Thread.currentThread().interrupt();
                LOG.error(""Interrupted while for LedgersReplication to be enabled "", ie);
            } catch (UnavailableException ue) {
                LOG.error(""Exception while reading from ZK"", ue);
            } finally {
                if (lostBookieRecoveryDelay != -1) {
                    lostBookieRecoveryDelayBeforeChange = lostBookieRecoveryDelay;
                }
            }
        }
    }));
}",java:S1452,
"public static Map<TypeVariable<?>, Type> getTypeArguments(final ParameterizedType type){
    return getTypeArguments(type, getRawType(type), null);
}",java:S1452,
"public static AbstractPathAssert<?> assertThat(Path actual){
    return PathAssert.assertThatPath(actual);
}",java:S1452,
" Request<?, AddAccountsToWhitelistResponse> addAccountsToWhitelist(final List<String> accounts){
    return new Request<>(""perm_addAccountsToAllowlist"", Collections.singletonList(accounts), web3jService, AddAccountsToWhitelistResponse.class);
}",java:S1452,
" Collection<? extends KnowledgeBuilderResult> getAllResults(){
    return getResults(ResultSeverity.values());
}",java:S1452,
"public static AbstractPeriodAssert<?> then(Period actual){
    return assertThat(actual);
}",java:S1452,
"public static AbstractInputStreamAssert<?, ? extends InputStream> assertThat(InputStream actual){
    return new InputStreamAssert(actual);
}",java:S1452,
" Request<?, SignersBlockResponse> cliqueGetSignersAtHash(final Hash hash){
    return new Request<>(""clique_getSignersAtHash"", singletonList(hash.toString()), web3jService, SignersBlockResponse.class);
}",java:S1452,
"public static AbstractThrowableAssert<?, T> assertThat(T actual){
    return new ThrowableAssert<>(actual);
}",java:S1452,
"public static AbstractFloatAssert<?> assertThat(Float actual){
    return new FloatAssert(actual);
}",java:S1452,
"public static AbstractStringAssert<?> assumeThat(String actual){
    return asAssumption(StringAssert.class, String.class, actual);
}",java:S1452,
"public static AbstractUriAssert<?> assertThat(URI actual){
    return new UriAssert(actual);
}",java:S1452,
"public Request<?, AdminAddPeerResponse> adminAddPeer(final URI enodeAddress){
    return new Request<>(""admin_addPeer"", Collections.singletonList(enodeAddress.toASCIIString()), web3jService, AdminAddPeerResponse.class);
}",java:S1452,
"public List<Interceptor<? extends Message>> getInInterceptors(){
    return in;
}",java:S1452,
"public Request<?, GetTransactionCountResponse> privGetEeaTransactionCount(final Object[] params){
    return new Request<>(""priv_getEeaTransactionCount"", List.of(params), web3jService, GetTransactionCountResponse.class);
}",java:S1452,
"public List<? extends AssertionError> getErrors(){
    return errors;
}",java:S1452,
" static DescribedPredicate<JavaAnnotation<?>> PersistenceCapable_schema(){
    return new DescribedPredicate<>(""@PersistenceCapable(schema=...)"") {

        @Override
        public boolean test(final JavaAnnotation<?> javaAnnotation) {
            if (!javaAnnotation.getRawType().isAssignableTo(PersistenceCapable.class)) {
                return false;
            }
            val properties = javaAnnotation.getProperties();
            val schema = properties.get(""schema"");
            return schema instanceof String && ((String) schema).length() > 0;
        }
    };
}",java:S1452,
" Request<?, AddNodeResponse> addNodesToWhitelist(final List<URI> enodeList){
    return new Request<>(""perm_addNodesToAllowlist"", Collections.singletonList(enodeList), web3jService, AddNodeResponse.class);
}",java:S1452,
"public static AbstractLongAssert<?> assertThat(Long actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
"public ScheduledFuture<?> scheduleFutureTaskWithFixedDelay(final Runnable command, final Duration initialDelay, final Duration duration){
    return scheduler.scheduleWithFixedDelay(command, initialDelay.toMillis(), duration.toMillis(), TimeUnit.MILLISECONDS);
}",java:S1452,
"protected List<? extends Reference> getReferences(XmlSignatureProperties.Input input, XmlSignatureProperties.Output properties, String keyInfoId) throws Exception{
    String referenceId = properties == null ? null : properties.getContentReferenceId();
    Reference ref = createReference(input.getSignatureFactory(), input.getContentReferenceUri(), getContentReferenceType(input.getMessage()), input.getSignatureType(), referenceId, input.getMessage());
    Reference keyInfoRef = createKeyInfoReference(input.getSignatureFactory(), keyInfoId, input.getContentDigestAlgorithm());
    int propsRefsSize = properties == null || properties.getReferences() == null || properties.getReferences().isEmpty() ? 0 : properties.getReferences().size();
    int size = keyInfoRef == null ? propsRefsSize + 1 : propsRefsSize + 2;
    List<Reference> referenceList = new ArrayList<>(size);
    referenceList.add(ref);
    if (keyInfoRef != null) {
        referenceList.add(keyInfoRef);
    }
    if (properties != null && properties.getReferences() != null && !properties.getReferences().isEmpty()) {
        referenceList.addAll(properties.getReferences());
    }
    return referenceList;
}",java:S1452,
"public AbstractStringAssert<?> content(Charset charset){
    return internalContent(charset);
}",java:S1452,
"public static AbstractListAssert<?, List<? extends ELEMENT>, ELEMENT, ObjectAssert<ELEMENT>> assumeThatStream(Stream<? extends ELEMENT> actual){
    return assumeThat(actual);
}",java:S1452,
"public AbstractIntegerAssert<?> asInt(){
    try {
        return InstanceOfAssertFactories.INTEGER.createAssert(Integer.parseInt(actual)).withAssertionState(myself);
    } catch (NumberFormatException e) {
        throw failures.failure(info, shouldBeNumeric(actual, INTEGER));
    }
}",java:S1452,
"public static SdkField<?> getObjectSdkField(String key){
    SdkField<?> sdkField = GET_OBJECT_SDK_FIELDS.get(key);
    if (sdkField != null) {
        return sdkField;
    }
    throw new IllegalStateException(""Could not match a field in GetObjectRequest"");
}",java:S1452,
"public static AbstractShortAssert<?> assertThat(Short actual){
    return new ShortAssert(actual);
}",java:S1452,
" Request<?, SignersBlockResponse> validatorsAtBlock(final String blockNumber){
    return new Request<>(bftType.getName() + ""_getValidatorsByBlockNumber"", singletonList(blockNumber), web3jService, SignersBlockResponse.class);
}",java:S1452,
"public static AbstractCharacterAssert<?> given(char actual){
    return assumeThat(actual);
}",java:S1452,
"@MemberSupport
public Collection<? extends ApplicationTenancy> act(@Parameter(optionality = Optionality.OPTIONAL) @ParameterLayout(named = ""Partial Name Or Path"", describedAs = ""String to search for, wildcard (*) can be used"") @MinLength(1) final String partialNameOrPath){
    return applicationTenancyRepository.findByNameOrPathMatchingCached(partialNameOrPath);
}",java:S1452,
"public Optional<? extends Identifier> parse(Field field){
    String fieldValue = entry.getField(field).orElse("""");
    if (StringUtil.isBlank(fieldValue)) {
        return Optional.empty();
    }
    if (StandardField.DOI == field) {
        return DOI.parse(fieldValue);
    } else if (StandardField.ISBN == field) {
        return ISBN.parse(fieldValue);
    } else if (StandardField.EPRINT == field) {
        return parseEprint(fieldValue);
    } else if (StandardField.MR_NUMBER == field) {
        return MathSciNetId.parse(fieldValue);
    }
    return Optional.empty();
}",java:S1452,
"protected RecursiveComparisonAssert<?> usingRecursiveComparison(RecursiveComparisonConfiguration recursiveComparisonConfiguration){
    return new RecursiveComparisonAssert<>(actual, recursiveComparisonConfiguration).withAssertionState(myself);
}",java:S1452,
"public static AbstractZonedDateTimeAssert<?> given(ZonedDateTime actual){
    return assumeThat(actual);
}",java:S1452,
" Stream<Entry<Class<?>, Comparator<?>>> comparatorByTypes(){
    return typeComparators.comparatorByTypes();
}",java:S1452,
" AbstractLocalDateTimeAssert<?> assertThat(final LocalDateTime localDateTime){
    return Assertions.assertThat(localDateTime);
}",java:S1452,
" AbstractOffsetTimeAssert<?> assumeThat(final OffsetTime offsetTime){
    return Assumptions.assumeThat(offsetTime);
}",java:S1452,
"public static AbstractBooleanArrayAssert<?> assumeThat(boolean[] actual){
    return asAssumption(BooleanArrayAssert.class, boolean[].class, actual);
}",java:S1452,
"public List<? extends XMLObject> getObjects(){
    return objects;
}",java:S1452,
" AbstractInstantAssert<?> assumeThat(final Instant instant){
    return Assumptions.assumeThat(instant);
}",java:S1452,
"public Comparator<?> getComparatorForType(Class<?> fieldType){
    return typeComparators.getComparatorForType(fieldType);
}",java:S1452,
"public List<? extends WhitelistEntry> getWhitelistEntries(){
    return whitelistEntries;
}",java:S1452,
"public AbstractFloatAssert<?> asFloat(){
    try {
        return InstanceOfAssertFactories.FLOAT.createAssert(Float.parseFloat(actual)).withAssertionState(myself);
    } catch (NumberFormatException | NullPointerException e) {
        throw failures.failure(info, shouldBeNumeric(actual, FLOAT));
    }
}",java:S1452,
"public static AbstractDateAssert<?> assertThat(Date actual){
    return new DateAssert(actual);
}",java:S1452,
"protected LoadingCache<?, ?> getOrCreateCache(String name, CaffeineConfiguration configuration){
    return caches.computeIfAbsent(name, key -> {
        Caffeine<?, ?> builder = Caffeine.newBuilder();
        defineBuilder(builder, configuration);
        return builder.build(configuration.getCacheLoader());
    });
}",java:S1452,
"public static AbstractCharacterAssert<?> assertThat(char actual){
    return new CharacterAssert(actual);
}",java:S1452,
"@MemberSupport
public List<? extends AuditTrailEntry> act(){
    return auditTrailEntryRepository.findAll();
}",java:S1452,
"public static AbstractThrowableAssert<?, ? extends Throwable> assertNotFound(ThrowableAssert.ThrowingCallable callable){
    ApiException exception = catchApiException(callable);
    return assertReturnCode(404, exception);
}",java:S1452,
"public Stream<Entry<String, Comparator<?>>> comparatorByFields(){
    return fieldComparators.comparatorByFields();
}",java:S1452,
"public AbstractAsyncRPCHandler<?> createAsyncRPCHandler(int requestId, TDataNodeLocation targetDataNode){
    switch(requestType) {
        case CONSTRUCT_SCHEMA_BLACK_LIST:
        case ROLLBACK_SCHEMA_BLACK_LIST:
        case DELETE_DATA_FOR_DELETE_SCHEMA:
        case DELETE_TIMESERIES:
        case CONSTRUCT_SCHEMA_BLACK_LIST_WITH_TEMPLATE:
        case ROLLBACK_SCHEMA_BLACK_LIST_WITH_TEMPLATE:
        case DEACTIVATE_TEMPLATE:
        case CONSTRUCT_VIEW_SCHEMA_BLACK_LIST:
        case ROLLBACK_VIEW_SCHEMA_BLACK_LIST:
        case DELETE_VIEW:
        case ALTER_VIEW:
            return new SchemaUpdateRPCHandler(requestType, requestId, targetDataNode, dataNodeLocationMap, (Map<Integer, TSStatus>) responseMap, countDownLatch);
        case FETCH_SCHEMA_BLACK_LIST:
            return new FetchSchemaBlackListRPCHandler(requestType, requestId, targetDataNode, dataNodeLocationMap, (Map<Integer, TFetchSchemaBlackListResp>) responseMap, countDownLatch);
        case COUNT_PATHS_USING_TEMPLATE:
            return new CountPathsUsingTemplateRPCHandler(requestType, requestId, targetDataNode, dataNodeLocationMap, (Map<Integer, TCountPathsUsingTemplateResp>) responseMap, countDownLatch);
        case CHECK_TIMESERIES_EXISTENCE:
            return new CheckTimeSeriesExistenceRPCHandler(requestType, requestId, targetDataNode, dataNodeLocationMap, (Map<Integer, TCheckTimeSeriesExistenceResp>) responseMap, countDownLatch);
        case PIPE_HEARTBEAT:
            return new PipeHeartbeatRPCHandler(requestType, requestId, targetDataNode, dataNodeLocationMap, (Map<Integer, TPipeHeartbeatResp>) responseMap, countDownLatch);
        case PIPE_PUSH_ALL_META:
        case PIPE_PUSH_SINGLE_META:
            return new PipePushMetaRPCHandler(requestType, requestId, targetDataNode, dataNodeLocationMap, (Map<Integer, TPushPipeMetaResp>) responseMap, countDownLatch);
        case SET_TTL:
        case CREATE_DATA_REGION:
        case CREATE_SCHEMA_REGION:
        case CREATE_FUNCTION:
        case DROP_FUNCTION:
        case CREATE_TRIGGER_INSTANCE:
        case DROP_TRIGGER_INSTANCE:
        case ACTIVE_TRIGGER_INSTANCE:
        case INACTIVE_TRIGGER_INSTANCE:
        case UPDATE_TRIGGER_LOCATION:
        case MERGE:
        case FULL_MERGE:
        case FLUSH:
        case CLEAR_CACHE:
        case LOAD_CONFIGURATION:
        case SET_SYSTEM_STATUS:
        case UPDATE_REGION_ROUTE_MAP:
        case BROADCAST_LATEST_CONFIG_NODE_GROUP:
        case INVALIDATE_MATCHED_SCHEMA_CACHE:
        case UPDATE_TEMPLATE:
        case CHANGE_REGION_LEADER:
        case KILL_QUERY_INSTANCE:
        default:
            return new AsyncTSStatusRPCHandler(requestType, requestId, targetDataNode, dataNodeLocationMap, (Map<Integer, TSStatus>) responseMap, countDownLatch);
    }
}",java:S1452,
"public Map<?, ?> getMap(String colName){
    return (Map<?, ?>) getValue(colName);
}",java:S1452,
"protected FormComponent<?> checkboxToggle(final Attr attr, final AbstractFieldPanel<?> panel, final boolean isMultivalue){
    return null;
}",java:S1452,
"public List<? extends List<String>> getPath(){
    if (path != null) {
        return path;
    }
    return ImmutableList.of(path(null));
}",java:S1452,
"public Future<?> start(){
    running.set(true);
    return submitElectionTask();
}",java:S1452,
"public static AbstractPathAssert<?> givenPath(Path actual){
    return given(actual);
}",java:S1452,
"public static AbstractIntArrayAssert<?> assumeThat(int[] actual){
    return asAssumption(IntArrayAssert.class, int[].class, actual);
}",java:S1452,
" AbstractFloatArrayAssert<?> assertThat(final float[] actual){
    return Assertions.assertThat(actual);
}",java:S1452,
"public static AbstractByteArrayAssert<?> assumeThat(byte[] actual){
    return asAssumption(ByteArrayAssert.class, byte[].class, actual);
}",java:S1452,
" AbstractShortAssert<?> assumeThat(final short actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
"public static AbstractBooleanAssert<?> given(Boolean actual){
    return assumeThat(actual);
}",java:S1452,
" AbstractLocalDateAssert<?> assumeThat(final LocalDate localDate){
    return Assumptions.assumeThat(localDate);
}",java:S1452,
"public static Map<TypeVariable<?>, Type> determineTypeArguments(final Class<?> cls, final ParameterizedType superParameterizedType){
    Objects.requireNonNull(cls, ""cls"");
    Objects.requireNonNull(superParameterizedType, ""superParameterizedType"");
    final Class<?> superClass = getRawType(superParameterizedType);
    if (!isAssignable(cls, superClass)) {
        return null;
    }
    if (cls.equals(superClass)) {
        return getTypeArguments(superParameterizedType, superClass, null);
    }
    final Type midType = getClosestParentType(cls, superClass);
    if (midType instanceof Class<?>) {
        return determineTypeArguments((Class<?>) midType, superParameterizedType);
    }
    final ParameterizedType midParameterizedType = (ParameterizedType) midType;
    final Class<?> midClass = getRawType(midParameterizedType);
    final Map<TypeVariable<?>, Type> typeVarAssigns = determineTypeArguments(midClass, superParameterizedType);
    mapTypeVariablesToArguments(cls, midParameterizedType, typeVarAssigns);
    return typeVarAssigns;
}",java:S1452,
"public RedisTemplate<?, ?> getRedisTemplate(){
    return redisTemplate != null ? redisTemplate : createDefaultTemplate();
}",java:S1452,
" AbstractCharSequenceAssert<?, ? extends CharSequence> assertThat(final StringBuffer actual){
    return Assertions.assertThat(actual);
}",java:S1452,
"public static AbstractLocalDateAssert<?> assertThat(LocalDate actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
"public CacheConfiguration<?, ?> getConfiguration(){
    return configuration;
}",java:S1452,
"public static AbstractUriAssert<?> assumeThat(URI actual){
    return asAssumption(UriAssert.class, URI.class, actual);
}",java:S1452,
" AbstractIntegerAssert<?> assertThat(final Integer actual){
    return Assertions.assertThat(actual);
}",java:S1452,
"public static AbstractThrowableAssert<?, ? extends Throwable> assertForbidden(ThrowableAssert.ThrowingCallable callable){
    ApiException exception = catchApiException(callable);
    return assertReturnCode(403, exception);
}",java:S1452,
"public List<? extends AuditTrailEntry> findAll(){
    if (causewaySystemEnvironment.getDeploymentType().isProduction()) {
        throw new IllegalStateException(""Cannot call 'findAll' in production systems"");
    }
    return repositoryService.allMatches(Query.named(auditTrailEntryClass, AuditTrailEntry.Nq.FIND));
}",java:S1452,
" ClassBasedNavigableIterableAssert<?, ACTUAL, ELEMENT, ELEMENT_ASSERT> assertThat(ACTUAL actual, Class<ELEMENT_ASSERT> assertClass){
    return Assertions.assertThat(actual, assertClass);
}",java:S1452,
"public static AbstractFutureAssert<?, ? extends Future<? extends RESULT>, RESULT> given(Future<RESULT> future){
    return assumeThat(future);
}",java:S1452,
"public static Map<String, ?> unmarshallMap(XmlUnmarshallerContext context, List<XmlElement> content, SdkField<Map<String, ?>> field){
    Map<String, Object> map = new HashMap<>();
    MapTrait mapTrait = field.getTrait(MapTrait.class);
    SdkField mapValueSdkField = mapTrait.valueFieldInfo();
    getEntries(content, mapTrait).forEach(entry -> {
        XmlElement key = entry.getElementByName(mapTrait.keyLocationName());
        XmlElement value = entry.getElementByName(mapTrait.valueLocationName());
        XmlUnmarshaller unmarshaller = context.getUnmarshaller(mapValueSdkField.location(), mapValueSdkField.marshallingType());
        map.put(key.textContent(), unmarshaller.unmarshall(context, singletonList(value), mapValueSdkField));
    });
    return map;
}",java:S1452,
"public Comparator<?> getComparatorForType(Class<?> clazz){
    return super.get(clazz);
}",java:S1452,
"public Format<?> getFormat(FormattingOptions formattingOptions) throws Exception{
    if (formattingOptions.getBindyConverter() != null) {
        return formattingOptions.getBindyConverter().value().newInstance();
    }
    return doGetFormat(formattingOptions);
}",java:S1452,
"public AbstractThrowableAssert<?, ?> rootCause(){
    throwables.assertHasRootCause(info, actual);
    return new ThrowableAssert<>(org.assertj.core.util.Throwables.getRootCause(actual)).withAssertionState(myself);
}",java:S1452,
"public Supplier<CompletableFuture<?>> operationRunnable(){
    return operationRunnable;
}",java:S1452,
" AbstractPathAssert<?> thenPath(Path actual){
    return then(actual);
}",java:S1452,
"public static AbstractBigDecimalAssert<?> then(BigDecimal actual){
    return assertThat(actual);
}",java:S1452,
"public static AbstractDoubleAssert<?> given(double actual){
    return assumeThat(actual);
}",java:S1452,
"public Map<String, Pair<AbstractFiqlSearchConditionBuilder<?, ?, ?>, List<SearchClause>>> getSCondWrapper(){
    return scondWrapper;
}",java:S1452,
"public static Stream<?> streamAutodetect(@Nullable final Object pojo){
    if (pojo == null) {
        return Stream.empty();
    }
    if (pojo instanceof Collection) {
        return ((Collection<?>) pojo).stream();
    }
    if (pojo instanceof ImmutableCollection) {
        return ((ImmutableCollection<?>) pojo).stream();
    }
    if (pojo.getClass().isArray()) {
        if (Array.getLength(pojo) == 0)
            return Stream.empty();
        if (pojo instanceof Object[])
            return Stream.of((Object[]) pojo);
        if (pojo instanceof boolean[])
            return primitiveStream((boolean[]) pojo);
        if (pojo instanceof byte[])
            return primitiveStream((byte[]) pojo);
        if (pojo instanceof char[])
            return primitiveStream((char[]) pojo);
        if (pojo instanceof double[])
            return primitiveStream((double[]) pojo);
        if (pojo instanceof float[])
            return primitiveStream((float[]) pojo);
        if (pojo instanceof int[])
            return primitiveStream((int[]) pojo);
        if (pojo instanceof long[])
            return primitiveStream((long[]) pojo);
        if (pojo instanceof short[])
            return primitiveStream((short[]) pojo);
    }
    if (pojo instanceof Iterable) {
        return stream((Iterable<?>) pojo);
    }
    if (pojo instanceof Enumeration) {
        return stream((Enumeration<?>) pojo);
    }
    return Stream.of(pojo);
}",java:S1452,
" AbstractInstantAssert<?> assertThat(final Instant actual){
    return Assertions.assertThat(actual);
}",java:S1452,
" Comparator<?> getComparatorForField(String fieldLocation){
    return hasComparatorForField(fieldLocation) ? comparator : null;
}",java:S1452,
"public static AbstractThrowableAssert<?, ? extends Throwable> assertGone(ThrowableAssert.ThrowingCallable callable){
    ApiException exception = catchApiException(callable);
    return assertReturnCode(410, exception);
}",java:S1452,
" CompletableFuture<? extends DistributedLock> lockHandler(){
    if (null != lockFuture) {
        return lockFuture;
    }
    lockFuture = lock.asyncAcquire();
    return lockFuture;
}",java:S1452,
" AbstractLongAssert<?> assumeThat(final Long actual){
    return Assumptions.assumeThat(actual);
}",java:S1452,
"public static AbstractShortArrayAssert<?> assertThat(short[] actual){
    return AssertionsForClassTypes.assertThat(actual);
}",java:S1452,
"public static AbstractByteAssert<?> given(byte actual){
    return assumeThat(actual);
}",java:S1452,
" AbstractDurationAssert<?> assumeThat(final Duration duration){
    return Assumptions.assumeThat(duration);
}",java:S1452,
"public static AbstractPathAssert<?> assertThatPath(Path actual){
    return new PathAssert(actual);
}",java:S1452,
" AbstractLongAssert<?> assertThat(final long actual){
    return Assertions.assertThat(actual);
}",java:S1452,
" Future<?> getAuditTask(){
    return auditTask;
}",java:S1452,
"public CompletableFuture<?> start(){
    LOG.info(""Starting GraphQL HTTP service on {}:{}"", config.getHost(), config.getPort());
    httpServer = vertx.createHttpServer(new HttpServerOptions().setHost(config.getHost()).setPort(config.getPort()).setHandle100ContinueAutomatically(true).setCompressionSupported(true));
    final Router router = Router.router(vertx);
    router.route().handler(checkWhitelistHostHeader());
    router.route().handler(CorsHandler.create(buildCorsRegexFromConfig()).allowedHeader(""*"").allowedHeader(""content-type""));
    router.route().handler(BodyHandler.create().setUploadsDirectory(dataDir.resolve(""uploads"").toString()).setDeleteUploadedFilesOnEnd(true).setPreallocateBodyBuffer(true));
    router.route(""/"").method(GET).method(POST).handler(this::handleEmptyRequestAndRedirect);
    router.route(GRAPH_QL_ROUTE).method(GET).method(POST).produces(APPLICATION_JSON).handler(TimeoutHandler.create(TimeUnit.SECONDS.toMillis(config.getHttpTimeoutSec()), TimeoutOptions.DEFAULT_ERROR_CODE)).handler(this::handleGraphQLRequest);
    final CompletableFuture<?> resultFuture = new CompletableFuture<>();
    httpServer.requestHandler(router).listen(res -> {
        if (!res.failed()) {
            resultFuture.complete(null);
            LOG.info(""GraphQL HTTP service started and listening on {}:{}"", config.getHost(), httpServer.actualPort());
            return;
        }
        httpServer = null;
        final Throwable cause = res.cause();
        if (cause instanceof SocketException) {
            resultFuture.completeExceptionally(new GraphQLServiceException(String.format(""Failed to bind Ethereum GraphQL HTTP listener to %s:%s: %s"", config.getHost(), config.getPort(), cause.getMessage())));
            return;
        }
        resultFuture.completeExceptionally(cause);
    });
    return resultFuture;
}",java:S1452,
"public static AbstractFloatArrayAssert<?> given(float[] actual){
    return assumeThat(actual);
}",java:S1452,
"public List<?> getStruct(int idx){
    return (List<?>) getValue(idx);
}",java:S1452,
" AbstractSpliteratorAssert<?, ELEMENT> assumeThat(final Spliterator<ELEMENT> spliterator){
    return Assumptions.assumeThat(spliterator);
}",java:S1452,
"public static AbstractShortArrayAssert<?> assumeThat(short[] actual){
    return asAssumption(ShortArrayAssert.class, short[].class, actual);
}",java:S1452,
" AbstractUniversalComparableAssert<?, T> assertThatComparable(Comparable<T> actual){
    return Assertions.assertThatComparable(actual);
}",java:S1452,
" RecursiveComparisonAssert<?> createRecursiveComparisonAssertProxy(RecursiveComparisonAssert<?> recursiveComparisonAssert){
    Class<?> proxyClass = createSoftAssertionProxyClass(RecursiveComparisonAssert.class);
    try {
        Constructor<?> constructor = proxyClass.getConstructor(Object.class, RecursiveComparisonConfiguration.class);
        RecursiveComparisonAssert<?> proxiedAssert = (RecursiveComparisonAssert<?>) constructor.newInstance(recursiveComparisonAssert.actual, recursiveComparisonAssert.getRecursiveComparisonConfiguration());
        ((AssertJProxySetup) proxiedAssert).assertj$setup(new ProxifyMethodChangingTheObjectUnderTest(this), collector);
        return proxiedAssert;
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}",java:S1452,
"public static AbstractShortAssert<?> given(short actual){
    return assumeThat(actual);
}",java:S1452,
"public static AbstractFloatAssert<?> given(Float actual){
    return assumeThat(actual);
}",java:S1452,
" AbstractThrowableAssert<?, T> assertThat(final T actual){
    return Assertions.assertThat(actual);
}",java:S1452,
" Optional<Schema<?>> schemaForValue(@Nullable final ObjectSpecification objectSpecification){
    return Optional.ofNullable(objectSpecification).map(ObjectSpecification::getCorrespondingClass).flatMap(this::schemaForValue);
}",java:S1452,
"public static AbstractDoubleArrayAssert<?> assumeThat(double[] actual){
    return asAssumption(DoubleArrayAssert.class, double[].class, actual);
}",java:S1452,
"@Override
public Queryable<TResult> groupByK(FunctionExpression<Function1<T, TKey>> keySelector, FunctionExpression<Function2<TKey, Enumerable<T>, TResult>> resultSelector){
    return EnumerableDefaults.groupBy(getThis(), keySelector.getFunction(), resultSelector.getFunction()).asQueryable();
}",java:S119,
"public static Enumerable<TSource> orderBy(Enumerable<TSource> source, Function1<TSource, TKey> keySelector){
    return orderBy(source, keySelector, null);
}",java:S119,
"@Override
public Enumerable<TResult> selectMany(Function1<T, Enumerable<TResult>> selector){
    return EnumerableDefaults.selectMany(getThis(), selector);
}",java:S119,
"public static Queryable<TResult> selectN(Queryable<T> source, FunctionExpression<Function2<T, Integer, TResult>> selector){
    throw Extensions.todo();
}",java:S119,
"@Override
public Queryable<TResult> groupByK(FunctionExpression<Function1<T, TKey>> keySelector, FunctionExpression<Function2<TKey, Enumerable<T>, TResult>> resultSelector){
    return factory.groupByK(getThis(), keySelector, resultSelector);
}",java:S119,
"@Override
public OrderedQueryable<T> orderByDescending(Queryable<T> source, FunctionExpression<Function1<T, TKey>> keySelector, Comparator<TKey> comparator){
    throw new UnsupportedOperationException();
}",java:S119,
"@Override
public OrderedEnumerable<T> thenByDescending(Function1<T, TKey> keySelector){
    return EnumerableDefaults.thenByDescending(getThisOrdered(), keySelector);
}",java:S119,
"@Override
public Queryable<TResult> selectManyN(Queryable<T> source, FunctionExpression<Function1<T, Enumerable<TCollection>>> collectionSelector, FunctionExpression<Function2<T, TCollection, TResult>> resultSelector){
    throw new UnsupportedOperationException();
}",java:S119,
"public static float max(Enumerable<TSource> source, FloatFunction1<TSource> selector){
    return requireNonNull(aggregate(source.select(adapt(selector)), Extensions.FLOAT_MAX));
}",java:S119,
"@Override
public Queryable<TResult> groupBy(FunctionExpression<Function1<T, TKey>> keySelector, FunctionExpression<Function1<T, TElement>> elementSelector, FunctionExpression<Function2<TKey, Enumerable<TElement>, TResult>> resultSelector, EqualityComparer<TKey> comparer){
    return EnumerableDefaults.groupBy(getThis(), keySelector.getFunction(), elementSelector.getFunction(), resultSelector.getFunction(), comparer).asQueryable();
}",java:S119,
"public static Map<TKey, TElement> toMap(Enumerable<TSource> source, Function1<TSource, TKey> keySelector, Function1<TSource, TElement> elementSelector){
    final Map<TKey, TElement> map = new LinkedHashMap<>();
    try (Enumerator<TSource> os = source.enumerator()) {
        while (os.moveNext()) {
            TSource o = os.current();
            map.put(keySelector.apply(o), elementSelector.apply(o));
        }
    }
    return map;
}",java:S119,
"public static ConsequenceBuilder._17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> on(Variable<T1> arg1, Variable<T2> arg2, Variable<T3> arg3, Variable<T4> arg4, Variable<T5> arg5, Variable<T6> arg6, Variable<T7> arg7, Variable<T8> arg8, Variable<T9> arg9, Variable<T10> arg10, Variable<T11> arg11, Variable<T12> arg12, Variable<T13> arg13, Variable<T14> arg14, Variable<T15> arg15, Variable<T16> arg16, Variable<T17> arg17){
    return new ConsequenceBuilder._17(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17);
}",java:S119,
"public static long max(Enumerable<TSource> source, LongFunction1<TSource> selector){
    return requireNonNull(aggregate(source.select(adapt(selector)), Extensions.LONG_MAX));
}",java:S119,
"public static ResponseBytes<ResponseT> fromByteArrayUnsafe(ResponseT response, byte[] bytes){
    return new ResponseBytes<>(response, bytes);
}",java:S119,
"@Override
public OrderedQueryable<T> orderByDescending(FunctionExpression<Function1<T, TKey>> keySelector){
    return EnumerableDefaults.asOrderedQueryable(EnumerableDefaults.orderByDescending(getThis(), keySelector.getFunction()));
}",java:S119,
"public static Enumerable<TResult> ofType(Enumerable<TSource> enumerable, Class<TResult> clazz){
    return (Enumerable) where(enumerable, Functions.ofTypePredicate(clazz));
}",java:S119,
"public static Lookup<TKey, TElement> toLookup(Enumerable<TSource> source, Function1<TSource, TKey> keySelector, Function1<TSource, TElement> elementSelector, EqualityComparer<TKey> comparer){
    return toLookup_(new WrapMap<>(() -> new HashMap<Wrapped<TKey>, List<TElement>>(), comparer), source, keySelector, elementSelector);
}",java:S119,
"public static Queryable<TResult> groupBy(Queryable<T> queryable, FunctionExpression<Function1<T, TKey>> keySelector, FunctionExpression<Function1<T, TElement>> elementSelector, FunctionExpression<Function2<TKey, Enumerable<TElement>, TResult>> resultSelector){
    throw Extensions.todo();
}",java:S119,
"public static TSource elementAt(Enumerable<TSource> enumerable, int index){
    final ListEnumerable<TSource> list = enumerable instanceof ListEnumerable ? ((ListEnumerable<TSource>) enumerable) : null;
    if (list != null) {
        return list.toList().get(index);
    }
    if (index < 0) {
        throw new IndexOutOfBoundsException();
    }
    try (Enumerator<TSource> os = enumerable.enumerator()) {
        while (true) {
            if (!os.moveNext()) {
                throw new IndexOutOfBoundsException();
            }
            if (index == 0) {
                return os.current();
            }
            index--;
        }
    }
}",java:S119,
"public static TResult aggregate(Queryable<T> queryable, TAccumulate seed, FunctionExpression<Function2<TAccumulate, T, TAccumulate>> func, FunctionExpression<Function1<TAccumulate, TResult>> selector){
    throw Extensions.todo();
}",java:S119,
"@Override
public Map<TKey, TElement> toMap(Function1<T, TKey> keySelector, Function1<T, TElement> elementSelector){
    return EnumerableDefaults.toMap(getThis(), keySelector, elementSelector);
}",java:S119,
"@Override
public OrderedQueryable<T> thenBy(final OrderedQueryable<T> source, final FunctionExpression<Function1<T, TKey>> keySelector, final Comparator<TKey> comparator){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.thenBy(source, keySelector, comparator);
        }
    };
}",java:S119,
"public static Pair<LeftT, RightT> of(LeftT left, RightT right){
    return new Pair<>(left, right);
}",java:S119,
"@Override
public Queryable<TResult> selectMany(Queryable<T> source, FunctionExpression<Function2<T, Integer, Enumerable<TCollection>>> collectionSelector, FunctionExpression<Function2<T, TCollection, TResult>> resultSelector){
    throw new UnsupportedOperationException();
}",java:S119,
"private static void execute(CompletableFuture<ReturnT> finalResult, Iterator<Long> backoffIter, Predicate<Throwable> retryPredicate, Supplier<CompletableFuture<ReturnT>> task, OrderedScheduler scheduler, Object key){
    FutureUtils.whenCompleteAsync(task.get(), (result, cause) -> {
        if (null == cause) {
            finalResult.complete(result);
            return;
        }
        if (retryPredicate.test(cause)) {
            if (!backoffIter.hasNext()) {
                finalResult.completeExceptionally(cause);
                return;
            }
            long nextRetryDelayMs = backoffIter.next();
            scheduler.scheduleOrdered(key, () -> execute(finalResult, backoffIter, retryPredicate, task, scheduler, key), nextRetryDelayMs, TimeUnit.MILLISECONDS);
        } else {
            finalResult.completeExceptionally(cause);
        }
    }, scheduler, key);
}",java:S119,
"@Override
public Enumerable<TResult> groupBy(Function1<T, TKey> keySelector, Function2<TKey, Enumerable<T>, TResult> resultSelector){
    return EnumerableDefaults.groupBy(getThis(), keySelector, resultSelector);
}",java:S119,
"@Override
public TResult aggregate(TAccumulate seed, FunctionExpression<Function2<TAccumulate, T, TAccumulate>> func, FunctionExpression<Function1<TAccumulate, TResult>> selector){
    return EnumerableDefaults.aggregate(getThis(), seed, func.getFunction(), selector.getFunction());
}",java:S119,
"public static Integer max(Enumerable<TSource> source, NullableIntegerFunction1<TSource> selector){
    return aggregate(source.select(selector), Extensions.INTEGER_MAX);
}",java:S119,
"public static OrderedEnumerable<TSource> thenBy(OrderedEnumerable<TSource> source, Function1<TSource, TKey> keySelector, Comparator<TKey> comparator){
    return createOrderedEnumerable(source, keySelector, comparator, false);
}",java:S119,
"public static void processRpc(ServiceT service, CompletableFuture<T> result, CreateRequestFunc<ReqT> createRequestFunc, ProcessRequestFunc<ReqT, RespT, ServiceT> processRequestFunc, ProcessResponseFunc<RespT, T> processResponseFunc){
    ReqT request = createRequestFunc.apply();
    ListenableFuture<RespT> resultFuture = processRequestFunc.process(service, request);
    Futures.addCallback(resultFuture, new FutureCallback<RespT>() {

        @Override
        public void onSuccess(RespT resp) {
            processResponseFunc.process(resp, result);
        }

        @Override
        public void onFailure(Throwable throwable) {
            GrpcUtils.processRpcException(throwable, result);
        }
    }, directExecutor());
}",java:S119,
"@Override
public OrderedQueryable<T> thenBy(FunctionExpression<Function1<T, TKey>> keySelector){
    return QueryableDefaults.thenBy(asOrderedQueryable(), keySelector);
}",java:S119,
"public static Queryable<Grouping<TKey, TElement>> groupBy(Queryable<T> queryable, FunctionExpression<Function1<T, TKey>> keySelector, FunctionExpression<Function1<T, TElement>> elementSelector){
    throw Extensions.todo();
}",java:S119,
"@Override
public Queryable<TResult> groupJoin(Queryable<T> source, Enumerable<TInner> inner, FunctionExpression<Function1<T, TKey>> outerKeySelector, FunctionExpression<Function1<TInner, TKey>> innerKeySelector, FunctionExpression<Function2<T, Enumerable<TInner>, TResult>> resultSelector, EqualityComparer<TKey> comparer){
    throw new UnsupportedOperationException();
}",java:S119,
"public static Double average(Enumerable<TSource> source, NullableDoubleFunction1<TSource> selector){
    return sum(source, selector) / longCount(source);
}",java:S119,
"@Override
public Queryable<TResult> selectMany(FunctionExpression<Function2<T, Integer, Enumerable<TCollection>>> collectionSelector, FunctionExpression<Function2<T, TCollection, TResult>> resultSelector){
    return EnumerableDefaults.selectMany(getThis(), collectionSelector.getFunction(), resultSelector.getFunction()).asQueryable();
}",java:S119,
"public AsyncResponseTransformer<GetObjectResponse, ResultT> wrapResponseTransformer(AsyncResponseTransformer<GetObjectResponse, ResultT> responseTransformer){
    return AsyncResponseTransformerListener.wrap(responseTransformer, new AsyncResponseTransformerListener<GetObjectResponse>() {

        @Override
        public void transformerOnResponse(GetObjectResponse response) {
            if (response.contentLength() != null) {
                progress.updateAndGet(b -> b.totalBytes(response.contentLength()).sdkResponse(response));
            }
        }

        @Override
        public void transformerExceptionOccurred(Throwable t) {
            transferFailed(t);
        }

        @Override
        public void publisherSubscribe(Subscriber<? super ByteBuffer> subscriber) {
            resetBytesTransferred();
        }

        @Override
        public void subscriberOnNext(ByteBuffer byteBuffer) {
            incrementBytesTransferred(byteBuffer.limit());
        }

        @Override
        public void subscriberOnError(Throwable t) {
            transferFailed(t);
        }

        @Override
        public void subscriberOnComplete() {
            endOfStreamFuture.complete(null);
        }
    });
}",java:S119,
"@Override
public Enumerable<Grouping<TKey, T>> groupBy(Function1<T, TKey> keySelector, EqualityComparer<TKey> comparer){
    return EnumerableDefaults.groupBy(getThis(), keySelector, comparer);
}",java:S119,
"@Override
public OrderedQueryable<T> thenByDescending(FunctionExpression<Function1<T, TKey>> keySelector){
    return factory.thenByDescending(getThisOrderedQueryable(), keySelector);
}",java:S119,
"@Override
public Destination<Row> destination(ExecutionContext<Row> ctx, AffinityService affSrvc, ColocationGroup m, ImmutableIntList k){
    assert m != null && !F.isEmpty(m.assignments()) && !k.isEmpty();
    List<List<UUID>> assignments = m.assignments();
    if (U.assertionsEnabled()) {
        for (List<UUID> assignment : assignments) assert F.isEmpty(assignment) || assignment.size() == 1;
    }
    AffinityAdapter<Row> affinity = new AffinityAdapter<>(affSrvc.affinity(CU.UNDEFINED_CACHE_ID), k.toIntArray(), ctx.rowHandler());
    return new Partitioned<>(assignments, affinity);
}",java:S119,
"@Override
public Queryable<TResult> selectManyN(FunctionExpression<Function1<T, Enumerable<TCollection>>> collectionSelector, FunctionExpression<Function2<T, TCollection, TResult>> resultSelector){
    return factory.selectManyN(getThis(), collectionSelector, resultSelector);
}",java:S119,
"public static SimpleDataset<EmptyContext> createSimpleDataset(DatasetBuilder<K, V> datasetBuilder, LearningEnvironmentBuilder envBuilder, Preprocessor<K, V> featureExtractor){
    return createSimpleDataset(datasetBuilder, envBuilder, new EmptyContextBuilder<>(), featureExtractor);
}",java:S119,
"public static int count(Enumerable<TSource> enumerable){
    return (int) longCount(enumerable, Functions.truePredicate1());
}",java:S119,
"public static Queryable<TResult> selectManyN(Queryable<T> source, FunctionExpression<Function2<T, Integer, Enumerable<TResult>>> selector){
    throw Extensions.todo();
}",java:S119,
"public static Enumerable<TSource> mergeUnion(List<Enumerable<TSource>> sources, Function1<TSource, TKey> sortKeySelector, Comparator<TKey> sortComparator, boolean all, EqualityComparer<TSource> equalityComparer){
    return new AbstractEnumerable<TSource>() {

        @Override
        public Enumerator<TSource> enumerator() {
            return new MergeUnionEnumerator<>(sources, sortKeySelector, sortComparator, all, equalityComparer);
        }
    };
}",java:S119,
" Download<ResultT> download(DownloadRequest<ResultT> downloadRequest){
    throw new UnsupportedOperationException();
}",java:S119,
"public static ConsequenceBuilder._15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> on(Variable<T1> arg1, Variable<T2> arg2, Variable<T3> arg3, Variable<T4> arg4, Variable<T5> arg5, Variable<T6> arg6, Variable<T7> arg7, Variable<T8> arg8, Variable<T9> arg9, Variable<T10> arg10, Variable<T11> arg11, Variable<T12> arg12, Variable<T13> arg13, Variable<T14> arg14, Variable<T15> arg15){
    return new ConsequenceBuilder._15(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
}",java:S119,
"public static ResponseBytes<ResponseT> fromByteArray(ResponseT response, byte[] bytes){
    return new ResponseBytes<>(response, Arrays.copyOf(bytes, bytes.length));
}",java:S119,
"public static Queryable<TResult> select(Queryable<T> source, FunctionExpression<Function1<T, TResult>> selector){
    return source.getProvider().createQuery(Expressions.call(requireNonNull(source.getExpression()), ""select"", selector), functionResultType(selector));
}",java:S119,
"@Override
public Lookup<TKey, TElement> toLookup(Function1<T, TKey> keySelector, Function1<T, TElement> elementSelector){
    return EnumerableDefaults.toLookup(getThis(), keySelector, elementSelector);
}",java:S119,
"@Override
public Queryable<TResult> select(FunctionExpression<Function1<T, TResult>> selector){
    return factory.select(getThis(), selector);
}",java:S119,
"public static AP newAnyPanel(final String panelClass, final String id, final AnyTypeTO anyTypeTO, final RealmTO realmTO, final AnyLayout anyLayout, final boolean enableSearch, final PageReference pageRef){
    try {
        @SuppressWarnings(""unchecked"")
        Class<AP> clazz = (Class<AP>) ClassUtils.forName(panelClass, ClassUtils.getDefaultClassLoader());
        return clazz.getConstructor(String.class, AnyTypeTO.class, RealmTO.class, AnyLayout.class, boolean.class, PageReference.class).newInstance(id, anyTypeTO, realmTO, anyLayout, enableSearch, pageRef);
    } catch (Exception e) {
        throw new IllegalArgumentException(""Could not instantiate "" + panelClass, e);
    }
}",java:S119,
"public static Enumerable<TResult> selectMany(final Enumerable<TSource> source, final Function1<TSource, Enumerable<TResult>> selector){
    return new AbstractEnumerable<TResult>() {

        @Override
        public Enumerator<TResult> enumerator() {
            return new Enumerator<TResult>() {

                Enumerator<TSource> sourceEnumerator = source.enumerator();

                Enumerator<TResult> resultEnumerator = Linq4j.emptyEnumerator();

                @Override
                public TResult current() {
                    return resultEnumerator.current();
                }

                @Override
                public boolean moveNext() {
                    for (; ; ) {
                        if (resultEnumerator.moveNext()) {
                            return true;
                        }
                        if (!sourceEnumerator.moveNext()) {
                            return false;
                        }
                        resultEnumerator = selector.apply(sourceEnumerator.current()).enumerator();
                    }
                }

                @Override
                public void reset() {
                    sourceEnumerator.reset();
                    resultEnumerator = Linq4j.emptyEnumerator();
                }

                @Override
                public void close() {
                    sourceEnumerator.close();
                    resultEnumerator.close();
                }
            };
        }
    };
}",java:S119,
"public static Enumerable<Grouping<TKey, TElement>> groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector, Function1<TSource, TElement> elementSelector){
    return enumerable.toLookup(keySelector, elementSelector);
}",java:S119,
"@Override
public OrderedQueryable<T> orderByDescending(final Queryable<T> source, final FunctionExpression<Function1<T, TKey>> keySelector){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.orderByDescending(source, keySelector);
        }
    };
}",java:S119,
"public static float sum(Enumerable<TSource> source, FloatFunction1<TSource> selector){
    return aggregate(source.select(adapt(selector)), 0F, Extensions.FLOAT_SUM);
}",java:S119,
"public static Enumerable<TResult> groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector, Function0<TAccumulate> accumulatorInitializer, Function2<TAccumulate, TSource, TAccumulate> accumulatorAdder, Function2<TKey, TAccumulate, TResult> resultSelector, EqualityComparer<TKey> comparer){
    return groupBy_(new WrapMap<>(() -> new HashMap<Wrapped<TKey>, TAccumulate>(), comparer), enumerable, keySelector, accumulatorInitializer, accumulatorAdder, resultSelector);
}",java:S119,
"public static Enumerable<TResult> zip(final Enumerable<T0> first, final Enumerable<T1> second, final Function2<T0, T1, TResult> resultSelector){
    return new AbstractEnumerable<TResult>() {

        @Override
        public Enumerator<TResult> enumerator() {
            return new Enumerator<TResult>() {

                final Enumerator<T0> e1 = first.enumerator();

                final Enumerator<T1> e2 = second.enumerator();

                @Override
                public TResult current() {
                    return resultSelector.apply(e1.current(), e2.current());
                }

                @Override
                public boolean moveNext() {
                    return e1.moveNext() && e2.moveNext();
                }

                @Override
                public void reset() {
                    e1.reset();
                    e2.reset();
                }

                @Override
                public void close() {
                    e1.close();
                    e2.close();
                }
            };
        }
    };
}",java:S119,
"public static SimpleDataset<C> createSimpleDataset(Map<K, V> upstreamMap, int partitions, LearningEnvironmentBuilder envBuilder, PartitionContextBuilder<K, V, C> partCtxBuilder, Preprocessor<K, V> featureExtractor){
    return createSimpleDataset(new LocalDatasetBuilder<>(upstreamMap, partitions), envBuilder, partCtxBuilder, featureExtractor);
}",java:S119,
" MH revise(Class<MH> handlerClass){
    throw new UnsupportedOperationException(""This provider doesn't support handler revision."");
}",java:S119,
"public static Lookup<TKey, TSource> toLookup(Enumerable<TSource> source, Function1<TSource, TKey> keySelector, EqualityComparer<TKey> comparer){
    return toLookup(source, keySelector, Functions.identitySelector(), comparer);
}",java:S119,
"public TypeT unmarshall(SdkPojo sdkPojo, SdkHttpFullResponse response){
    XmlElement document = XmlResponseParserUtils.parse(sdkPojo, response);
    return unmarshall(sdkPojo, document, response);
}",java:S119,
"public static float min(Enumerable<TSource> source, FloatFunction1<TSource> selector){
    return aggregate(source.select(adapt(selector)), null, Extensions.FLOAT_MIN);
}",java:S119,
"@Override
public OrderedQueryable<T> thenBy(OrderedQueryable<T> source, FunctionExpression<Function1<T, TKey>> keySelector, Comparator<TKey> comparator){
    throw new UnsupportedOperationException();
}",java:S119,
"@Override
public Enumerable<TResult> hashJoin(Enumerable<TInner> inner, Function1<T, TKey> outerKeySelector, Function1<TInner, TKey> innerKeySelector, Function2<T, TInner, TResult> resultSelector, EqualityComparer<TKey> comparer){
    return EnumerableDefaults.hashJoin(getThis(), inner, outerKeySelector, innerKeySelector, resultSelector, comparer);
}",java:S119,
"@Override
public Destination<Row> destination(ExecutionContext<Row> ctx, AffinityService affinityService, ColocationGroup m, ImmutableIntList k){
    if (m == null || m.nodeIds() == null || m.nodeIds().size() != 1)
        throw new AssertionError();
    return new AllNodes<>(Collections.singletonList(Objects.requireNonNull(F.first(m.nodeIds()))));
}",java:S119,
"@Override
public TAccumulate aggregate(TAccumulate seed, FunctionExpression<Function2<TAccumulate, T, TAccumulate>> selector){
    return factory.aggregate(getThis(), seed, selector);
}",java:S119,
"public static Lookup<TKey, TSource> toLookup(Enumerable<TSource> source, Function1<TSource, TKey> keySelector){
    return toLookup(source, keySelector, Functions.identitySelector());
}",java:S119,
"public static void storeByOffset(IO io, long pageAddr, int off, MetastorageRow row){
    assert row.link() != 0;
    PageUtils.putLong(pageAddr, off, row.link());
    byte[] bytes = row.key().getBytes();
    assert bytes.length <= Short.MAX_VALUE;
    if (row.keyLink() != 0) {
        PageUtils.putShort(pageAddr, off + 8, (short) bytes.length);
        PageUtils.putLong(pageAddr, off + 10, row.keyLink());
    } else {
        assert bytes.length <= MetastorageTree.MAX_KEY_LEN;
        PageUtils.putShort(pageAddr, off + 8, (short) bytes.length);
        PageUtils.putBytes(pageAddr, off + 10, bytes);
    }
}",java:S119,
"public static boolean any(Enumerable<TSource> enumerable, Predicate1<TSource> predicate){
    try (Enumerator<TSource> os = enumerable.enumerator()) {
        while (os.moveNext()) {
            TSource o = os.current();
            if (predicate.apply(o)) {
                return true;
            }
        }
        return false;
    }
}",java:S119,
"public static Map<TKey, TElement> toMap(Enumerable<TSource> source, Function1<TSource, TKey> keySelector, Function1<TSource, TElement> elementSelector, EqualityComparer<TKey> comparer){
    @SuppressWarnings(""Convert2MethodRef"")
    final Map<TKey, TElement> map = new WrapMap<>(() -> new LinkedHashMap<Wrapped<TKey>, TElement>(), comparer);
    try (Enumerator<TSource> os = source.enumerator()) {
        while (os.moveNext()) {
            TSource o = os.current();
            map.put(keySelector.apply(o), elementSelector.apply(o));
        }
    }
    return map;
}",java:S119,
"public static TSource single(Enumerable<TSource> source){
    TSource toRet = null;
    try (Enumerator<TSource> os = source.enumerator()) {
        if (os.moveNext()) {
            toRet = os.current();
            if (os.moveNext()) {
                throw new IllegalStateException();
            }
        }
        if (toRet != null) {
            return toRet;
        }
        throw new IllegalStateException();
    }
}",java:S119,
"public static Enumerable<TSource> intersect(Enumerable<TSource> source0, Enumerable<TSource> source1, EqualityComparer<TSource> comparer, boolean all){
    if (comparer == Functions.identityComparer()) {
        return intersect(source0, source1, all);
    }
    Collection<Wrapped<TSource>> collection = all ? HashMultiset.create() : new HashSet<>();
    Function1<TSource, Wrapped<TSource>> wrapper = wrapperFor(comparer);
    source1.select(wrapper).into(collection);
    Collection<Wrapped<TSource>> resultCollection = all ? HashMultiset.create() : new HashSet<>();
    try (Enumerator<Wrapped<TSource>> os = source0.select(wrapper).enumerator()) {
        while (os.moveNext()) {
            Wrapped<TSource> o = os.current();
            if (collection.remove(o)) {
                resultCollection.add(o);
            }
        }
    }
    Function1<Wrapped<TSource>, TSource> unwrapper = unwrapper();
    return Linq4j.asEnumerable(resultCollection).select(unwrapper);
}",java:S119,
"@Override
public OrderedQueryable<T> orderBy(Queryable<T> source, FunctionExpression<Function1<T, TKey>> keySelector){
    throw new UnsupportedOperationException();
}",java:S119,
"@Override
public OrderedQueryable<T> thenBy(OrderedQueryable<T> source, FunctionExpression<Function1<T, TKey>> keySelector){
    throw new UnsupportedOperationException();
}",java:S119,
"public static ConsequenceBuilder._12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> on(Variable<T1> arg1, Variable<T2> arg2, Variable<T3> arg3, Variable<T4> arg4, Variable<T5> arg5, Variable<T6> arg6, Variable<T7> arg7, Variable<T8> arg8, Variable<T9> arg9, Variable<T10> arg10, Variable<T11> arg11, Variable<T12> arg12){
    return new ConsequenceBuilder._12(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
}",java:S119,
"public static OrderedEnumerable<TSource> thenBy(OrderedEnumerable<TSource> source, Function1<TSource, TKey> keySelector){
    return createOrderedEnumerable(source, keySelector, Extensions.comparableComparator(), false);
}",java:S119,
"@Override
public OrderedQueryable<T> orderByDescending(Queryable<T> source, FunctionExpression<Function1<T, TKey>> keySelector){
    throw new UnsupportedOperationException();
}",java:S119,
"public static int max(Enumerable<TSource> source, IntegerFunction1<TSource> selector){
    return requireNonNull(aggregate(source.select(adapt(selector)), Extensions.INTEGER_MAX));
}",java:S119,
"@Override
public Queryable<Grouping<TKey, T>> groupBy(Queryable<T> source, FunctionExpression<Function1<T, TKey>> keySelector){
    throw new UnsupportedOperationException();
}",java:S119,
"public static Enumerable<TResult> selectMany(final Enumerable<TSource> source, final Function1<TSource, Enumerable<TCollection>> collectionSelector, final Function2<TSource, TCollection, TResult> resultSelector){
    return new AbstractEnumerable<TResult>() {

        @Override
        public Enumerator<TResult> enumerator() {
            return new Enumerator<TResult>() {

                Enumerator<TSource> sourceEnumerator = source.enumerator();

                Enumerator<TCollection> collectionEnumerator = Linq4j.emptyEnumerator();

                Enumerator<TResult> resultEnumerator = Linq4j.emptyEnumerator();

                @Override
                public TResult current() {
                    return resultEnumerator.current();
                }

                @Override
                public boolean moveNext() {
                    for (; ; ) {
                        if (resultEnumerator.moveNext()) {
                            return true;
                        }
                        if (!sourceEnumerator.moveNext()) {
                            return false;
                        }
                        final TSource sourceElement = sourceEnumerator.current();
                        collectionEnumerator = collectionSelector.apply(sourceElement).enumerator();
                        resultEnumerator = new TransformedEnumerator<TCollection, TResult>(collectionEnumerator) {

                            @Override
                            protected TResult transform(TCollection collectionElement) {
                                return resultSelector.apply(sourceElement, collectionElement);
                            }
                        };
                    }
                }

                @Override
                public void reset() {
                    sourceEnumerator.reset();
                    resultEnumerator = Linq4j.emptyEnumerator();
                }

                @Override
                public void close() {
                    sourceEnumerator.close();
                    resultEnumerator.close();
                }
            };
        }
    };
}",java:S119,
"public static long longCount(Enumerable<TSource> enumerable, Predicate1<TSource> predicate){
    if (predicate == Predicate1.TRUE && enumerable instanceof Collection) {
        return ((Collection) enumerable).size();
    }
    int n = 0;
    try (Enumerator<TSource> os = enumerable.enumerator()) {
        while (os.moveNext()) {
            TSource o = os.current();
            if (predicate.apply(o)) {
                ++n;
            }
        }
    }
    return n;
}",java:S119,
"public static Enumerable<TSource> asEnumerable(Enumerable<TSource> enumerable){
    return enumerable;
}",java:S119,
"public static double min(Enumerable<TSource> source, DoubleFunction1<TSource> selector){
    return requireNonNull(aggregate(source.select(adapt(selector)), Extensions.DOUBLE_MIN));
}",java:S119,
"private static Supplier<Accumulator<Row>> avgFactory(AggregateCall call, RowHandler<Row> hnd){
    switch(call.type.getSqlTypeName()) {
        case ANY:
            throw new UnsupportedOperationException(""AVG() is not supported for type '"" + call.type + ""'."");
        case BIGINT:
        case DECIMAL:
            return () -> new DecimalAvg<>(call, hnd);
        case DOUBLE:
        case REAL:
        case FLOAT:
        case INTEGER:
        default:
            return () -> new DoubleAvg<>(call, hnd);
    }
}",java:S119,
"@Override
public OrderedQueryable<T> thenByDescending(FunctionExpression<Function1<T, TKey>> keySelector){
    return QueryableDefaults.thenByDescending(asOrderedQueryable(), keySelector);
}",java:S119,
"@Nullable
public static TSource aggregate(Enumerable<TSource> source, Function2<@Nullable TSource, TSource, TSource> func){
    try (Enumerator<TSource> os = source.enumerator()) {
        if (!os.moveNext()) {
            return null;
        }
        TSource result = os.current();
        while (os.moveNext()) {
            TSource o = os.current();
            result = func.apply(result, o);
        }
        return result;
    }
}",java:S119,
"@Override
public Queryable<TResult> groupByK(final Queryable<T> source, final FunctionExpression<Function1<T, TKey>> keySelector, final FunctionExpression<Function2<TKey, Enumerable<T>, TResult>> resultSelector){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.groupByK(source, keySelector, resultSelector);
        }
    }.castQueryable();
}",java:S119,
"public Tag<T1> addInner(BatchStage<T1_IN> stage, JoinClause<K, T0, T1_IN, T1> joinClause){
    Tag<T1> tag = tag(clauses.size());
    clauses.put(tag, new StageAndClause<>(stage, joinClause, true));
    return tag;
}",java:S119,
"public static Enumerable<TSource> antiJoin(final Enumerable<TSource> outer, final Enumerable<TInner> inner, final Function1<TSource, TKey> outerKeySelector, final Function1<TInner, TKey> innerKeySelector, final EqualityComparer<TKey> comparer){
    return semiEquiJoin_(outer, inner, outerKeySelector, innerKeySelector, comparer, true);
}",java:S119,
"@Override
public Queryable<TResult> select(Queryable<T> source, FunctionExpression<Function1<T, TResult>> selector){
    RelNode child = toRel(source);
    List<RexNode> nodes = translator.toRexList(selector, child);
    setRel(LogicalProject.create(child, ImmutableList.of(), nodes, (List<String>) null, ImmutableSet.of()));
    return castNonNull(null);
}",java:S119,
"@Override
public TResult aggregate(TAccumulate seed, Function2<TAccumulate, T, TAccumulate> func, Function1<TAccumulate, TResult> selector){
    return EnumerableDefaults.aggregate(getThis(), seed, func, selector);
}",java:S119,
"private CompletableFuture<AnyT> uninitializedException(){
    return FutureUtils.exception(new InvalidStateStoreException(""State store "" + name() + "" is not initialized yet.""));
}",java:S119,
"@Override
public Lookup<TKey, TElement> toLookup(Function1<T, TKey> keySelector, Function1<T, TElement> elementSelector, EqualityComparer<TKey> comparer){
    return EnumerableDefaults.toLookup(getThis(), keySelector, elementSelector, comparer);
}",java:S119,
"public static CompletableFuture<ReturnT> run(Stream<Long> backoffs, Predicate<Throwable> retryPredicate, Supplier<CompletableFuture<ReturnT>> task, OrderedScheduler scheduler){
    return run(backoffs, retryPredicate, task, scheduler, null);
}",java:S119,
"private static IgniteBiFunction<List<IgniteModel<IS, IA>>, Vector, Vector> getFeatureExtractorForAggregator(IgniteFunction<IA, Vector> submodelOutput2VectorConverter, IgniteFunction<Vector, IS> vector2SubmodelInputConverter){
    return (List<IgniteModel<IS, IA>> subMdls, Vector v) -> {
        Vector[] vs = subMdls.stream().map(sm -> applyToVector(sm, submodelOutput2VectorConverter, vector2SubmodelInputConverter, v)).toArray(Vector[]::new);
        return VectorUtils.concat(vs);
    };
}",java:S119,
"@Override
public Queryable<TResult> join(Enumerable<TInner> inner, FunctionExpression<Function1<T, TKey>> outerKeySelector, FunctionExpression<Function1<TInner, TKey>> innerKeySelector, FunctionExpression<Function2<T, TInner, TResult>> resultSelector, EqualityComparer<TKey> comparer){
    return EnumerableDefaults.hashJoin(getThis(), inner, outerKeySelector.getFunction(), innerKeySelector.getFunction(), resultSelector.getFunction(), comparer).asQueryable();
}",java:S119,
"public static OrderedQueryable<T> orderByDescending(Queryable<T> source, FunctionExpression<Function1<T, TKey>> keySelector, Comparator<TKey> comparator){
    throw Extensions.todo();
}",java:S119,
"public static BigDecimal sum(Enumerable<TSource> source, BigDecimalFunction1<TSource> selector){
    return aggregate(source.select(selector), BigDecimal.ZERO, Extensions.BIG_DECIMAL_SUM);
}",java:S119,
"@Override
public Destination<Row> destination(ExecutionContext<Row> ctx, AffinityService affinityService, ColocationGroup m, ImmutableIntList k){
    throw new AssertionError();
}",java:S119,
"public static SimpleDataset<C> createSimpleDataset(DatasetBuilder<K, V> datasetBuilder, LearningEnvironmentBuilder envBuilder, PartitionContextBuilder<K, V, C> partCtxBuilder, Preprocessor<K, V> featureExtractor){
    LearningEnvironment environment = LearningEnvironmentBuilder.defaultBuilder().buildForTrainer();
    environment.initDeployingContext(featureExtractor);
    return create(datasetBuilder, envBuilder, partCtxBuilder, new SimpleDatasetDataBuilder<>(featureExtractor), environment).wrap(SimpleDataset::new);
}",java:S119,
"@Override
public OrderedQueryable<T> thenBy(FunctionExpression<Function1<T, TKey>> keySelector, Comparator<TKey> comparator){
    return factory.thenByDescending(getThisOrderedQueryable(), keySelector, comparator);
}",java:S119,
"@Override
public Enumerable<TResult> ofType(Class<TResult> clazz){
    return EnumerableDefaults.ofType(getThis(), clazz);
}",java:S119,
"@Override
@Nullable
public TResult min(Function1<T, TResult> selector){
    return EnumerableDefaults.min(getThis(), selector);
}",java:S119,
"private void requestWithCrossRegion(T request, Function<T, CompletableFuture<ReturnT>> operation, String bucketName, CompletableFuture<ReturnT> returnFuture, Throwable throwable){
    Optional<String> bucketRegionFromException = getBucketRegionFromException((S3Exception) throwable.getCause());
    if (bucketRegionFromException.isPresent()) {
        sendRequestWithRightRegion(request, operation, bucketName, returnFuture, bucketRegionFromException.get());
    } else {
        fetchRegionAndSendRequest(request, operation, bucketName, returnFuture);
    }
}",java:S119,
"public static int runCli(CliSpec<CliOptsT> spec, String[] args){
    Cli<CliOptsT> cli = new Cli<>(spec);
    return cli.run(args) ? 0 : -1;
}",java:S119,
"@Override
public OrderedQueryable<T> thenBy(final OrderedQueryable<T> source, final FunctionExpression<Function1<T, TKey>> keySelector){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.thenBy(source, keySelector);
        }
    };
}",java:S119,
"@Override
public Queryable<TResult> selectMany(FunctionExpression<Function1<T, Enumerable<TResult>>> selector){
    return EnumerableDefaults.selectMany(getThis(), selector.getFunction()).asQueryable();
}",java:S119,
"public static long average(Enumerable<TSource> source, LongFunction1<TSource> selector){
    return sum(source, selector) / longCount(source);
}",java:S119,
"public static OrderedEnumerable<TSource> thenByDescending(OrderedEnumerable<TSource> source, Function1<TSource, TKey> keySelector, Comparator<TKey> comparator){
    return createOrderedEnumerable(source, keySelector, comparator, true);
}",java:S119,
"@Override
public Destination<Row> destination(ExecutionContext<Row> ctx, AffinityService affinityService, ColocationGroup m, ImmutableIntList k){
    assert m != null && !F.isEmpty(m.nodeIds());
    return new RandomNode<>(m.nodeIds());
}",java:S119,
"@Override
public Enumerable<T> orderByDescending(Function1<T, TKey> keySelector){
    return EnumerableDefaults.orderByDescending(getThis(), keySelector);
}",java:S119,
"@Override
public Lookup<TKey, T> toLookup(Function1<T, TKey> keySelector, EqualityComparer<TKey> comparer){
    return EnumerableDefaults.toLookup(getThis(), keySelector, comparer);
}",java:S119,
"private static Enumerable<TResult> nestedLoopJoinAsList(final Enumerable<TSource> outer, final Enumerable<TInner> inner, final Predicate2<TSource, TInner> predicate, Function2<? super @Nullable TSource, ? super @Nullable TInner, TResult> resultSelector, final JoinType joinType){
    final boolean generateNullsOnLeft = joinType.generatesNullsOnLeft();
    final boolean generateNullsOnRight = joinType.generatesNullsOnRight();
    final List<TResult> result = new ArrayList<>();
    final List<TInner> rightList = inner.toList();
    final Set<TInner> rightUnmatched;
    if (generateNullsOnLeft) {
        rightUnmatched = Sets.newIdentityHashSet();
        rightUnmatched.addAll(rightList);
    } else {
        rightUnmatched = null;
    }
    try (Enumerator<TSource> lefts = outer.enumerator()) {
        while (lefts.moveNext()) {
            int leftMatchCount = 0;
            final TSource left = lefts.current();
            for (TInner right : rightList) {
                if (predicate.apply(left, right)) {
                    ++leftMatchCount;
                    if (joinType == JoinType.ANTI) {
                        break;
                    } else {
                        if (rightUnmatched != null) {
                            @SuppressWarnings(""argument.type.incompatible"")
                            boolean unused = rightUnmatched.remove(right);
                        }
                        result.add(resultSelector.apply(left, right));
                        if (joinType == JoinType.SEMI) {
                            break;
                        }
                    }
                }
            }
            if (leftMatchCount == 0 && (generateNullsOnRight || joinType == JoinType.ANTI)) {
                result.add(resultSelector.apply(left, null));
            }
        }
        if (rightUnmatched != null) {
            for (TInner right : rightUnmatched) {
                result.add(resultSelector.apply(null, right));
            }
        }
        return Linq4j.asEnumerable(result);
    }
}",java:S119,
"public static BiConsumer<SuccessT, ? super Throwable> promiseNotifyingBiConsumer(Function<SuccessT, PromiseT> successFunction, Promise<PromiseT> promise){
    return (success, fail) -> {
        if (fail != null) {
            promise.setFailure(fail);
        } else {
            try {
                promise.setSuccess(successFunction.apply(success));
            } catch (Throwable e) {
                promise.setFailure(e);
            }
        }
    };
}",java:S119,
"private ReqT interceptMessage(MethodDescriptor<ReqT, ?> method, InterceptorDescriptor<TableReqT> descriptor, ReqT message, Long sid, Long rid, byte[] rk){
    if (null == descriptor) {
        return message;
    } else {
        try {
            return interceptTableRequest(method, descriptor, message, sid, rid, rk);
        } catch (Throwable t) {
            log.error(""Failed to intercept table request (sid = {}, rid = {}, rk = {}) : "", sid, rid, Hex.encodeHexString(rk), t);
            return message;
        }
    }
}",java:S119,
"@Override
public OrderedQueryable<T> thenByDescending(FunctionExpression<Function1<T, TKey>> keySelector, Comparator<TKey> comparator){
    return factory.thenBy(getThisOrderedQueryable(), keySelector, comparator);
}",java:S119,
"public static long longCount(Enumerable<TSource> source){
    return longCount(source, Functions.truePredicate1());
}",java:S119,
"public static ConsequenceBuilder._10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> on(Variable<T1> arg1, Variable<T2> arg2, Variable<T3> arg3, Variable<T4> arg4, Variable<T5> arg5, Variable<T6> arg6, Variable<T7> arg7, Variable<T8> arg8, Variable<T9> arg9, Variable<T10> arg10){
    return new ConsequenceBuilder._10(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
}",java:S119,
"@Override
public OrderedQueryable<T> thenBy(FunctionExpression<Function1<T, TKey>> keySelector){
    return factory.thenBy(getThisOrderedQueryable(), keySelector);
}",java:S119,
"@Nullable
public static TSource firstOrDefault(Enumerable<TSource> enumerable){
    try (Enumerator<TSource> os = enumerable.enumerator()) {
        if (os.moveNext()) {
            return os.current();
        }
        return null;
    }
}",java:S119,
"@NotNull
public static NestedLoopJoinNode<Row> create(ExecutionContext<Row> ctx, RelDataType outputRowType, RelDataType leftRowType, RelDataType rightRowType, JoinRelType joinType, BiPredicate<Row, Row> cond){
    switch(joinType) {
        case INNER:
            return new InnerJoin<>(ctx, outputRowType, cond);
        case LEFT:
            {
                RowHandler.RowFactory<Row> rightRowFactory = ctx.rowHandler().factory(ctx.getTypeFactory(), rightRowType);
                return new LeftJoin<>(ctx, outputRowType, cond, rightRowFactory);
            }
        case RIGHT:
            {
                RowHandler.RowFactory<Row> leftRowFactory = ctx.rowHandler().factory(ctx.getTypeFactory(), leftRowType);
                return new RightJoin<>(ctx, outputRowType, cond, leftRowFactory);
            }
        case FULL:
            {
                RowHandler.RowFactory<Row> leftRowFactory = ctx.rowHandler().factory(ctx.getTypeFactory(), leftRowType);
                RowHandler.RowFactory<Row> rightRowFactory = ctx.rowHandler().factory(ctx.getTypeFactory(), rightRowType);
                return new FullOuterJoin<>(ctx, outputRowType, cond, leftRowFactory, rightRowFactory);
            }
        case SEMI:
            return new SemiJoin<>(ctx, outputRowType, cond);
        case ANTI:
            return new AntiJoin<>(ctx, outputRowType, cond);
        default:
            throw new IllegalStateException(""Join type \"""" + joinType + ""\"" is not supported yet"");
    }
}",java:S119,
"public static IndexSpoolNode<Row> createTreeSpool(ExecutionContext<Row> ctx, RelDataType rowType, RelCollation collation, Comparator<Row> comp, Predicate<Row> filter, RangeIterable<Row> ranges){
    RuntimeSortedIndex<Row> idx = new RuntimeSortedIndex<>(ctx, collation, comp);
    ScanNode<Row> scan = new ScanNode<>(ctx, rowType, idx.scan(ctx, rowType, ranges), filter, null);
    return new IndexSpoolNode<>(ctx, rowType, idx, scan);
}",java:S119,
"public static Enumerable<TResult> hashJoin(final Enumerable<TSource> outer, final Enumerable<TInner> inner, final Function1<TSource, TKey> outerKeySelector, final Function1<TInner, TKey> innerKeySelector, final Function2<TSource, TInner, TResult> resultSelector){
    return hashJoin(outer, inner, outerKeySelector, innerKeySelector, resultSelector, null, false, false);
}",java:S119,
"@Override
public Enumerable<TResult> groupBy(Function1<T, TKey> keySelector, Function2<TKey, Enumerable<T>, TResult> elementSelector, EqualityComparer<TKey> comparer){
    return EnumerableDefaults.groupBy(getThis(), keySelector, elementSelector, comparer);
}",java:S119,
"public static Enumerable<TResult> groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector, Function0<TAccumulate> accumulatorInitializer, Function2<TAccumulate, TSource, TAccumulate> accumulatorAdder, final Function2<TKey, TAccumulate, TResult> resultSelector){
    return groupBy_(new HashMap<>(), enumerable, keySelector, accumulatorInitializer, accumulatorAdder, resultSelector);
}",java:S119,
"@Override
public Queryable<TResult> selectManyN(Queryable<T> source, FunctionExpression<Function2<T, Integer, Enumerable<TResult>>> selector){
    throw new UnsupportedOperationException();
}",java:S119,
"public static int min(Enumerable<TSource> source, IntegerFunction1<TSource> selector){
    return requireNonNull(aggregate(source.select(adapt(selector)), Extensions.INTEGER_MIN));
}",java:S119,
"public static MetastorageDataRow getDataRow(IO io, long pageAddr, int idx, MetastorageRowStore rowStore) throws IgniteCheckedException{
    long link = io.getLink(pageAddr, idx);
    int off = io.offset(idx);
    int len = PageUtils.getShort(pageAddr, off + 8);
    if (len > MetastorageTree.MAX_KEY_LEN) {
        long keyLink = PageUtils.getLong(pageAddr, off + 10);
        byte[] keyBytes = rowStore.readRow(keyLink);
        assert keyBytes != null : ""[pageAddr="" + Long.toHexString(pageAddr) + "", idx="" + idx + ']';
        return new MetastorageDataRow(link, new String(keyBytes), keyLink);
    } else {
        byte[] keyBytes = PageUtils.getBytes(pageAddr, off + 10, len);
        return new MetastorageDataRow(link, new String(keyBytes), 0L);
    }
}",java:S119,
"public static Queryable<TResult> zip(Queryable<T0> source0, Enumerable<T1> source1, FunctionExpression<Function2<T0, T1, TResult>> resultSelector){
    throw Extensions.todo();
}",java:S119,
"private static Supplier<Accumulator<Row>> minFactory(AggregateCall call, RowHandler<Row> hnd){
    switch(call.type.getSqlTypeName()) {
        case DOUBLE:
        case REAL:
        case FLOAT:
            return () -> new DoubleMinMax<>(call, hnd, true);
        case DECIMAL:
            return () -> new DecimalMinMax<>(call, hnd, true);
        case INTEGER:
            return () -> new IntMinMax<>(call, hnd, true);
        case CHAR:
        case VARCHAR:
            return () -> new VarCharMinMax<>(call, hnd, true);
        case BINARY:
        case VARBINARY:
            return () -> new ComparableMinMax<Row, ByteString>(call, hnd, true, tf -> tf.createTypeWithNullability(tf.createSqlType(VARBINARY), true));
        case ANY:
            if (call.type instanceof UuidType) {
                return () -> new ComparableMinMax<Row, UUID>(call, hnd, true, tf -> tf.createTypeWithNullability(tf.createCustomType(UUID.class), true));
            }
            throw new UnsupportedOperationException(""MIN() is not supported for type '"" + call.type + ""'."");
        case BIGINT:
        default:
            return () -> new LongMinMax<>(call, hnd, true);
    }
}",java:S119,
"@Override
public Queryable<Grouping<TKey, TElement>> groupBy(FunctionExpression<Function1<T, TKey>> keySelector, FunctionExpression<Function1<T, TElement>> elementSelector){
    return EnumerableDefaults.groupBy(getThis(), keySelector.getFunction(), elementSelector.getFunction()).asQueryable();
}",java:S119,
"protected MH handler(Class<MH> handlerClass){
    return getMetadataHandlerProvider().handler(handlerClass);
}",java:S119,
"public static Enumerable<TResult> nestedLoopJoin(final Enumerable<TSource> outer, final Enumerable<TInner> inner, final Predicate2<TSource, TInner> predicate, Function2<? super @Nullable TSource, ? super @Nullable TInner, TResult> resultSelector, final JoinType joinType){
    if (!joinType.generatesNullsOnLeft()) {
        return nestedLoopJoinOptimized(outer, inner, predicate, resultSelector, joinType);
    }
    return nestedLoopJoinAsList(outer, inner, predicate, resultSelector, joinType);
}",java:S119,
" CacheType getCache(Message message, String defaultCache, Class<CacheType> type){
    return type.cast(getCache(message, defaultCache));
}",java:S119,
"public static SimpleDataset<C> createSimpleDataset(Ignite ignite, IgniteCache<K, V> upstreamCache, LearningEnvironmentBuilder envBuilder, PartitionContextBuilder<K, V, C> partCtxBuilder, Preprocessor<K, V> featureExtractor){
    return createSimpleDataset(new CacheBasedDatasetBuilder<>(ignite, upstreamCache), envBuilder, partCtxBuilder, featureExtractor);
}",java:S119,
"@Override
public Queryable<TResult> selectN(Queryable<T> source, FunctionExpression<Function2<T, Integer, TResult>> selector){
    throw new UnsupportedOperationException();
}",java:S119,
"public static float average(Enumerable<TSource> source, FloatFunction1<TSource> selector){
    return sum(source, selector) / longCount(source);
}",java:S119,
"@Override
public Destination<Row> destination(ExecutionContext<Row> ectx, AffinityService affSrvc, ColocationGroup target){
    return function.destination(ectx, affSrvc, target, keys);
}",java:S119,
" static BeanAttributeGetter<BeanT, GetterT> create(Class<BeanT> beanClass, Method getter){
    Validate.isTrue(getter.getParameterCount() == 0, ""%s.%s has parameters, despite being named like a getter."", beanClass, getter.getName());
    return LambdaToMethodBridgeBuilder.create(BeanAttributeGetter.class).lambdaMethodName(""apply"").runtimeLambdaSignature(Object.class, Object.class).compileTimeLambdaSignature(getter.getReturnType(), beanClass).targetMethod(getter).build();
}",java:S119,
"public static Enumerable<TSource> semiJoin(final Enumerable<TSource> outer, final Enumerable<TInner> inner, final Function1<TSource, TKey> outerKeySelector, final Function1<TInner, TKey> innerKeySelector, final EqualityComparer<TKey> comparer, final boolean anti, final Predicate2<TSource, TInner> nonEquiPredicate){
    if (nonEquiPredicate == null) {
        return semiEquiJoin_(outer, inner, outerKeySelector, innerKeySelector, comparer, anti);
    } else {
        return semiJoinWithPredicate_(outer, inner, outerKeySelector, innerKeySelector, comparer, anti, nonEquiPredicate);
    }
}",java:S119,
"@Override
public OrderedQueryable<T> orderByDescending(FunctionExpression<Function1<T, TKey>> keySelector){
    return factory.orderByDescending(getThis(), keySelector);
}",java:S119,
"public static SimpleLabeledDataset<C> createSimpleLabeledDataset(DatasetBuilder<K, V> datasetBuilder, LearningEnvironmentBuilder envBuilder, PartitionContextBuilder<K, V, C> partCtxBuilder, Preprocessor<K, V> vectorizer){
    LearningEnvironment environment = LearningEnvironmentBuilder.defaultBuilder().buildForTrainer();
    environment.initDeployingContext(vectorizer);
    return create(datasetBuilder, envBuilder, partCtxBuilder, new SimpleLabeledDatasetDataBuilder<>(vectorizer), environment).wrap(SimpleLabeledDataset::new);
}",java:S119,
"public static Queryable<TResult> join(Queryable<TOuter> outer, Enumerable<TInner> inner, FunctionExpression<Function1<TOuter, TKey>> outerKeySelector, FunctionExpression<Function1<TInner, TKey>> innerKeySelector, FunctionExpression<Function2<TOuter, TInner, TResult>> resultSelector, EqualityComparer<TKey> comparer){
    throw Extensions.todo();
}",java:S119,
"public static Queryable<Grouping<TKey, TResult>> groupByK(Queryable<T> queryable, FunctionExpression<Function1<T, TKey>> keySelector, FunctionExpression<Function2<TKey, Enumerable<T>, TResult>> elementSelector){
    throw Extensions.todo();
}",java:S119,
"private Object insertKey(Row row, ExecutionContext<Row> ectx) throws IgniteCheckedException{
    RowHandler<Row> handler = ectx.rowHandler();
    Object key = handler.get(keyField, row);
    if (key != null) {
        key = replaceDefault(key, descriptors[QueryUtils.KEY_COL]);
        return TypeUtils.fromInternal(ectx, key, descriptors[QueryUtils.KEY_COL].storageType());
    }
    for (int i = 2; i < descriptors.length; i++) {
        final CacheColumnDescriptor desc = descriptors[i];
        if (!desc.field() || !desc.key())
            continue;
        Object fieldVal = replaceDefault(handler.get(i, row), desc);
        if (fieldVal != null) {
            if (key == null)
                key = newVal(typeDesc.keyTypeName(), typeDesc.keyClass());
            desc.set(key, TypeUtils.fromInternal(ectx, fieldVal, desc.storageType()));
        }
    }
    if (key == null)
        key = descriptors[QueryUtils.KEY_COL].defaultValue();
    return key;
}",java:S119,
"public RequestPipelineBuilder<InputT, NewOutputT> then(Supplier<RequestPipeline<OutputT, NewOutputT>> pipelineFactory){
    return new RequestPipelineBuilder<>(r -> new ComposingRequestPipelineStage<>(this.pipelineFactory.apply(r), pipelineFactory.get()));
}",java:S119,
"@Nullable
public static TResult max(Enumerable<TSource> source, Function1<TSource, TResult> selector){
    return aggregate(source.select(selector), maxFunction());
}",java:S119,
"@Override
public Queryable<TResult> selectMany(final Queryable<T> source, final FunctionExpression<Function1<T, Enumerable<TResult>>> selector){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.selectMany(source, selector);
        }
    }.castQueryable();
}",java:S119,
"private static Supplier<Accumulator<Row>> sumFactory(AggregateCall call, RowHandler<Row> hnd){
    switch(call.type.getSqlTypeName()) {
        case ANY:
            throw new UnsupportedOperationException(""SUM() is not supported for type '"" + call.type + ""'."");
        case BIGINT:
        case DECIMAL:
            return () -> new Sum<>(call, new DecimalSumEmptyIsZero<>(call, hnd), hnd);
        case DOUBLE:
        case REAL:
        case FLOAT:
            return () -> new Sum<>(call, new DoubleSumEmptyIsZero<>(call, hnd), hnd);
        case TINYINT:
        case SMALLINT:
        case INTEGER:
        default:
            return () -> new Sum<>(call, new LongSumEmptyIsZero<>(call, hnd), hnd);
    }
}",java:S119,
"@Override
public TResult min(final Queryable<T> source, final FunctionExpression<Function1<T, TResult>> selector){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.min(source, selector);
        }
    }.castSingle();
}",java:S119,
"@Override
public OrderedQueryable<T> orderByDescending(FunctionExpression<Function1<T, TKey>> keySelector, Comparator<TKey> comparator){
    return EnumerableDefaults.asOrderedQueryable(EnumerableDefaults.orderByDescending(getThis(), keySelector.getFunction(), comparator));
}",java:S119,
"@Override
public Enumerable<TResult> selectMany(Function1<T, Enumerable<TCollection>> collectionSelector, Function2<T, TCollection, TResult> resultSelector){
    return EnumerableDefaults.selectMany(getThis(), collectionSelector, resultSelector);
}",java:S119,
"public JoinClause<K, T0, T1, T1_NEW_OUT> projecting(FunctionEx<? super T1, ? extends T1_NEW_OUT> rightProjectFn){
    return new JoinClause<>(this.leftKeyFn, this.rightKeyFn, rightProjectFn);
}",java:S119,
"@Override
public Enumerable<TResult> sortedGroupBy(Function1<T, TKey> keySelector, Function0<TAccumulate> accumulatorInitializer, Function2<TAccumulate, T, TAccumulate> accumulatorAdder, Function2<TKey, TAccumulate, TResult> resultSelector, Comparator<TKey> comparator){
    return EnumerableDefaults.sortedGroupBy(getThis(), keySelector, accumulatorInitializer, accumulatorAdder, resultSelector, comparator);
}",java:S119,
" static String getCmdPath(CliSpec<CliFlagsT> spec){
    if (Strings.isNullOrEmpty(spec.parent())) {
        return spec.name();
    } else {
        return spec.parent() + "" "" + spec.name();
    }
}",java:S119,
"public static Enumerable<TSource> except(Enumerable<TSource> source0, Enumerable<TSource> source1){
    return except(source0, source1, false);
}",java:S119,
"public static TSource single(Enumerable<TSource> source, Predicate1<TSource> predicate){
    TSource toRet = null;
    try (Enumerator<TSource> os = source.enumerator()) {
        while (os.moveNext()) {
            if (predicate.apply(os.current())) {
                if (toRet == null) {
                    toRet = os.current();
                } else {
                    throw new IllegalStateException();
                }
            }
        }
        if (toRet != null) {
            return toRet;
        }
        throw new IllegalStateException();
    }
}",java:S119,
"public RequestPipelineBuilder<NewInputT, NewOutputT> wrappedWith(Function<RequestPipeline<InputT, OutputT>, RequestPipeline<NewInputT, NewOutputT>> wrappedFactory){
    return new RequestPipelineBuilder<>(d -> wrappedFactory.apply(this.pipelineFactory.apply(d)));
}",java:S119,
"public static Queryable<TResult> join(Queryable<TOuter> outer, Enumerable<TInner> inner, FunctionExpression<Function1<TOuter, TKey>> outerKeySelector, FunctionExpression<Function1<TInner, TKey>> innerKeySelector, FunctionExpression<Function2<TOuter, TInner, TResult>> resultSelector){
    throw Extensions.todo();
}",java:S119,
"@Override
public Enumerable<TResult> groupBy(Function1<T, TKey> keySelector, Function0<TAccumulate> accumulatorInitializer, Function2<TAccumulate, T, TAccumulate> accumulatorAdder, Function2<TKey, TAccumulate, TResult> resultSelector){
    return EnumerableDefaults.groupBy(getThis(), keySelector, accumulatorInitializer, accumulatorAdder, resultSelector);
}",java:S119,
"public static Enumerable<TResult> ofType(Iterable<TSource> source, Class<TResult> clazz){
    return asEnumerable(source).ofType(clazz);
}",java:S119,
"private static Enumerator<TSource> where(final Enumerator<TSource> enumerator, final Predicate1<TSource> predicate){
    return new Enumerator<TSource>() {

        @Override
        public TSource current() {
            return enumerator.current();
        }

        @Override
        public boolean moveNext() {
            while (enumerator.moveNext()) {
                if (predicate.apply(enumerator.current())) {
                    return true;
                }
            }
            return false;
        }

        @Override
        public void reset() {
            enumerator.reset();
        }

        @Override
        public void close() {
            enumerator.close();
        }
    };
}",java:S119,
"@Override
public Queryable<TResult> selectManyN(final Queryable<T> source, final FunctionExpression<Function2<T, Integer, Enumerable<TResult>>> selector){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.selectManyN(source, selector);
        }
    }.castQueryable();
}",java:S119,
"public static Enumerable<TSource> distinct(Enumerable<TSource> enumerable, EqualityComparer<TSource> comparer){
    if (comparer == Functions.identityComparer()) {
        return distinct(enumerable);
    }
    final Set<Wrapped<TSource>> set = new HashSet<>();
    Function1<TSource, Wrapped<TSource>> wrapper = wrapperFor(comparer);
    Function1<Wrapped<TSource>, TSource> unwrapper = unwrapper();
    enumerable.select(wrapper).into(set);
    return Linq4j.asEnumerable(set).select(unwrapper);
}",java:S119,
"public static BigDecimal max(Enumerable<TSource> source, NullableBigDecimalFunction1<TSource> selector){
    return aggregate(source.select(selector), maxFunction());
}",java:S119,
"public static OrderedQueryable<T> orderBy(Queryable<T> source, FunctionExpression<Function1<T, TKey>> keySelector, Comparator<TKey> comparator){
    throw Extensions.todo();
}",java:S119,
"public static PageObjectClass screen(Class<PageObjectClass> pageObjectClass){
    return page(pageObjectClass);
}",java:S119,
"@Override
public OrderedQueryable<T> thenByDescending(FunctionExpression<Function1<T, TKey>> keySelector, Comparator<TKey> comparator){
    return QueryableDefaults.thenByDescending(asOrderedQueryable(), keySelector, comparator);
}",java:S119,
"public static Map<TKey, TSource> toMap(Enumerable<TSource> source, Function1<TSource, TKey> keySelector, EqualityComparer<TKey> comparer){
    return toMap(source, keySelector, Functions.identitySelector(), comparer);
}",java:S119,
"@Override
public Queryable<TResult> zip(Enumerable<T1> source1, FunctionExpression<Function2<T, T1, TResult>> resultSelector){
    return factory.zip(getThis(), source1, resultSelector);
}",java:S119,
"@Override
public Enumerable<TResult> hashJoin(Enumerable<TInner> inner, Function1<T, TKey> outerKeySelector, Function1<TInner, TKey> innerKeySelector, Function2<T, TInner, TResult> resultSelector, EqualityComparer<TKey> comparer, boolean generateNullsOnLeft, boolean generateNullsOnRight, @Nullable Predicate2<T, TInner> predicate){
    return EnumerableDefaults.hashJoin(getThis(), inner, outerKeySelector, innerKeySelector, resultSelector, comparer, generateNullsOnLeft, generateNullsOnRight, predicate);
}",java:S119,
"@Override
public Queryable<TResult> groupJoin(final Queryable<T> source, final Enumerable<TInner> inner, final FunctionExpression<Function1<T, TKey>> outerKeySelector, final FunctionExpression<Function1<TInner, TKey>> innerKeySelector, final FunctionExpression<Function2<T, Enumerable<TInner>, TResult>> resultSelector){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.groupJoin(source, inner, outerKeySelector, innerKeySelector, resultSelector);
        }
    }.castQueryable();
}",java:S119,
"@Nullable
public static TSource lastOrDefault(Enumerable<TSource> enumerable, Predicate1<TSource> predicate){
    final ListEnumerable<TSource> list = enumerable instanceof ListEnumerable ? ((ListEnumerable<TSource>) enumerable) : null;
    if (list != null) {
        final List<TSource> rawList = list.toList();
        final int count = rawList.size();
        for (int i = count - 1; i >= 0; --i) {
            TSource result = rawList.get(i);
            if (predicate.apply(result)) {
                return result;
            }
        }
    } else {
        try (Enumerator<TSource> os = enumerable.enumerator()) {
            while (os.moveNext()) {
                TSource result = os.current();
                if (predicate.apply(result)) {
                    while (os.moveNext()) {
                        TSource element = os.current();
                        if (predicate.apply(element)) {
                            result = element;
                        }
                    }
                    return result;
                }
            }
        }
    }
    return null;
}",java:S119,
"private static Function1<Wrapped<TSource>, TSource> unwrapper(){
    return a0 -> a0.element;
}",java:S119,
"private ModifyTuple deleteTuple(Row row, ExecutionContext<Row> ectx){
    Object key = TypeUtils.fromInternal(ectx, ectx.rowHandler().get(QueryUtils.KEY_COL, row), descriptors[QueryUtils.KEY_COL].storageType());
    return new ModifyTuple(Objects.requireNonNull(key), null, TableModify.Operation.DELETE);
}",java:S119,
"public static Enumerable<TSource> union(Enumerable<TSource> source0, Enumerable<TSource> source1, final EqualityComparer<TSource> comparer){
    if (comparer == Functions.identityComparer()) {
        return union(source0, source1);
    }
    Set<Wrapped<TSource>> set = new HashSet<>();
    Function1<TSource, Wrapped<TSource>> wrapper = wrapperFor(comparer);
    Function1<Wrapped<TSource>, TSource> unwrapper = unwrapper();
    source0.select(wrapper).into(set);
    source1.select(wrapper).into(set);
    return Linq4j.asEnumerable(set).select(unwrapper);
}",java:S119,
"@Override
public OrderedQueryable<T> thenByDescending(final OrderedQueryable<T> source, final FunctionExpression<Function1<T, TKey>> keySelector){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.thenByDescending(source, keySelector);
        }
    };
}",java:S119,
"public BatchStage<OUT> buildBatch(@Nonnull AggregateOperation<A, ? extends R> aggrOp, @Nonnull BiFunctionEx<? super K, ? super R, OUT> mapToOutputFn){
    checkSerializable(mapToOutputFn, ""mapToOutputFn"");
    List<Transform> upstreamTransforms = toList(upstreamStages, s -> s.transform);
    AbstractTransform transform = new GroupTransform<>(upstreamTransforms, keyFns, aggrOp, mapToOutputFn);
    pipelineImpl.connect(upstreamStages, transform);
    return new BatchStageImpl<>(transform, pipelineImpl);
}",java:S119,
"public static Enumerable<TSource> union(Enumerable<TSource> source0, Enumerable<TSource> source1){
    Set<TSource> set = new HashSet<>();
    source0.into(set);
    source1.into(set);
    return Linq4j.asEnumerable(set);
}",java:S119,
"public static ConsequenceBuilder._21<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> on(Variable<T1> arg1, Variable<T2> arg2, Variable<T3> arg3, Variable<T4> arg4, Variable<T5> arg5, Variable<T6> arg6, Variable<T7> arg7, Variable<T8> arg8, Variable<T9> arg9, Variable<T10> arg10, Variable<T11> arg11, Variable<T12> arg12, Variable<T13> arg13, Variable<T14> arg14, Variable<T15> arg15, Variable<T16> arg16, Variable<T17> arg17, Variable<T18> arg18, Variable<T19> arg19, Variable<T20> arg20, Variable<T21> arg21){
    return new ConsequenceBuilder._21(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21);
}",java:S119,
"public static Enumerable<TSource> takeWhile(final Enumerable<TSource> source, final Predicate2<TSource, Integer> predicate){
    return new AbstractEnumerable<TSource>() {

        @Override
        public Enumerator<TSource> enumerator() {
            return new TakeWhileEnumerator<>(source.enumerator(), predicate);
        }
    };
}",java:S119,
"public static Enumerable<TResult> sortedGroupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector, Function0<TAccumulate> accumulatorInitializer, Function2<TAccumulate, TSource, TAccumulate> accumulatorAdder, final Function2<TKey, TAccumulate, TResult> resultSelector, final Comparator<TKey> comparator){
    return new AbstractEnumerable<TResult>() {

        @Override
        public Enumerator<TResult> enumerator() {
            return new SortedAggregateEnumerator(enumerable, keySelector, accumulatorInitializer, accumulatorAdder, resultSelector, comparator);
        }
    };
}",java:S119,
"@Override
public Row toRow(ExecutionContext<Row> ectx, CacheDataRow row, RowHandler.RowFactory<Row> factory, @Nullable ImmutableBitSet requiredColumns) throws IgniteCheckedException{
    RowHandler<Row> handler = factory.handler();
    assert handler == ectx.rowHandler();
    Row res = factory.create();
    assert handler.columnCount(res) == (requiredColumns == null ? descriptors.length : requiredColumns.cardinality());
    if (requiredColumns == null) {
        for (int i = 0; i < descriptors.length; i++) {
            CacheColumnDescriptor desc = descriptors[i];
            handler.set(i, res, TypeUtils.toInternal(ectx, desc.value(ectx, cacheContext(), row), desc.storageType()));
        }
    } else {
        for (int i = 0, j = requiredColumns.nextSetBit(0); j != -1; j = requiredColumns.nextSetBit(j + 1), i++) {
            CacheColumnDescriptor desc = descriptors[j];
            handler.set(i, res, TypeUtils.toInternal(ectx, desc.value(ectx, cacheContext(), row), desc.storageType()));
        }
    }
    return res;
}",java:S119,
"@Override
public Queryable<TResult> groupJoin(Enumerable<TInner> inner, FunctionExpression<Function1<T, TKey>> outerKeySelector, FunctionExpression<Function1<TInner, TKey>> innerKeySelector, FunctionExpression<Function2<T, Enumerable<TInner>, TResult>> resultSelector, EqualityComparer<TKey> comparer){
    return factory.groupJoin(getThis(), inner, outerKeySelector, innerKeySelector, resultSelector, comparer);
}",java:S119,
"public static Supplier<Accumulator<Row>> accumulatorFactory(AggregateCall call, ExecutionContext<Row> ctx){
    Supplier<Accumulator<Row>> supplier = accumulatorFunctionFactory(call, ctx);
    if (call.isDistinct())
        return () -> new DistinctAccumulator<>(call, ctx.rowHandler(), supplier);
    return supplier;
}",java:S119,
"@Override
@Nullable
public TResult min(FunctionExpression<Function1<T, TResult>> selector){
    return EnumerableDefaults.min(getThis(), selector.getFunction());
}",java:S119,
"private static Supplier<Accumulator<Row>> listAggregateSupplier(AggregateCall call, ExecutionContext<Row> ctx){
    RowHandler<Row> hnd = ctx.rowHandler();
    Supplier<Accumulator<Row>> accSup;
    String aggName = call.getAggregation().getName();
    if (""LISTAGG"".equals(aggName))
        accSup = () -> new ListAggAccumulator<>(call, hnd);
    else if (""ARRAY_CONCAT_AGG"".equals(aggName))
        accSup = () -> new ArrayConcatAggregateAccumulator<>(call, hnd);
    else if (""ARRAY_AGG"".equals(aggName))
        accSup = () -> new ArrayAggregateAccumulator<>(call, hnd);
    else
        throw new AssertionError(call.getAggregation().getName());
    if (call.getCollation() != null && !call.getCollation().getFieldCollations().isEmpty()) {
        Comparator<Row> cmp = ctx.expressionFactory().comparator(call.getCollation());
        return () -> new SortingAccumulator<>(accSup, cmp);
    }
    return accSup;
}",java:S119,
"public static Enumerable<TResult> hashJoin(Enumerable<TSource> outer, Enumerable<TInner> inner, Function1<TSource, TKey> outerKeySelector, Function1<TInner, TKey> innerKeySelector, Function2<TSource, TInner, TResult> resultSelector, @Nullable EqualityComparer<TKey> comparer, boolean generateNullsOnLeft, boolean generateNullsOnRight){
    return hashEquiJoin_(outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer, generateNullsOnLeft, generateNullsOnRight);
}",java:S119,
"public static Enumerable<TResult> selectMany(final Enumerable<TSource> source, final Function2<TSource, Integer, Enumerable<TResult>> selector){
    return new AbstractEnumerable<TResult>() {

        @Override
        public Enumerator<TResult> enumerator() {
            return new Enumerator<TResult>() {

                int index = -1;

                Enumerator<TSource> sourceEnumerator = source.enumerator();

                Enumerator<TResult> resultEnumerator = Linq4j.emptyEnumerator();

                @Override
                public TResult current() {
                    return resultEnumerator.current();
                }

                @Override
                public boolean moveNext() {
                    for (; ; ) {
                        if (resultEnumerator.moveNext()) {
                            return true;
                        }
                        if (!sourceEnumerator.moveNext()) {
                            return false;
                        }
                        index += 1;
                        resultEnumerator = selector.apply(sourceEnumerator.current(), index).enumerator();
                    }
                }

                @Override
                public void reset() {
                    sourceEnumerator.reset();
                    resultEnumerator = Linq4j.emptyEnumerator();
                }

                @Override
                public void close() {
                    sourceEnumerator.close();
                    resultEnumerator.close();
                }
            };
        }
    };
}",java:S119,
"@Override
public OrderedEnumerable<T> thenByDescending(Function1<T, TKey> keySelector, Comparator<TKey> comparator){
    return EnumerableDefaults.thenBy(getThisOrdered(), keySelector, comparator);
}",java:S119,
"public static double sum(Enumerable<TSource> source, DoubleFunction1<TSource> selector){
    return aggregate(source.select(adapt(selector)), 0d, Extensions.DOUBLE_SUM);
}",java:S119,
"public static TSource last(Enumerable<TSource> enumerable, Predicate1<TSource> predicate){
    final ListEnumerable<TSource> list = enumerable instanceof ListEnumerable ? ((ListEnumerable<TSource>) enumerable) : null;
    if (list != null) {
        final List<TSource> rawList = list.toList();
        final int count = rawList.size();
        for (int i = count - 1; i >= 0; --i) {
            TSource result = rawList.get(i);
            if (predicate.apply(result)) {
                return result;
            }
        }
    } else {
        try (Enumerator<TSource> os = enumerable.enumerator()) {
            while (os.moveNext()) {
                TSource result = os.current();
                if (predicate.apply(result)) {
                    while (os.moveNext()) {
                        TSource element = os.current();
                        if (predicate.apply(element)) {
                            result = element;
                        }
                    }
                    return result;
                }
            }
        }
    }
    throw new NoSuchElementException();
}",java:S119,
"@Override
public Destination<Row> destination(ExecutionContext<Row> ctx, AffinityService affinityService, ColocationGroup m, ImmutableIntList k){
    assert m != null && !F.isEmpty(m.nodeIds());
    return new AllNodes<>(m.nodeIds());
}",java:S119,
"public static ConsequenceBuilder._19<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> on(Variable<T1> arg1, Variable<T2> arg2, Variable<T3> arg3, Variable<T4> arg4, Variable<T5> arg5, Variable<T6> arg6, Variable<T7> arg7, Variable<T8> arg8, Variable<T9> arg9, Variable<T10> arg10, Variable<T11> arg11, Variable<T12> arg12, Variable<T13> arg13, Variable<T14> arg14, Variable<T15> arg15, Variable<T16> arg16, Variable<T17> arg17, Variable<T18> arg18, Variable<T19> arg19){
    return new ConsequenceBuilder._19(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19);
}",java:S119,
"@Override
public OrderedEnumerable<T> createOrderedEnumerable(Function1<T, TKey> keySelector, Comparator<TKey> comparator, boolean descending){
    return EnumerableDefaults.createOrderedEnumerable(getThisOrdered(), keySelector, comparator, descending);
}",java:S119,
"private static Enumerable<TResult> hashEquiJoin_(final Enumerable<TSource> outer, final Enumerable<TInner> inner, final Function1<TSource, TKey> outerKeySelector, final Function1<TInner, TKey> innerKeySelector, final Function2<TSource, TInner, TResult> resultSelector, @Nullable final EqualityComparer<TKey> comparer, final boolean generateNullsOnLeft, final boolean generateNullsOnRight){
    return new AbstractEnumerable<TResult>() {

        @Override
        public Enumerator<TResult> enumerator() {
            final Lookup<TKey, TInner> innerLookup = comparer == null ? inner.toLookup(innerKeySelector) : inner.toLookup(innerKeySelector, comparer);
            return new Enumerator<TResult>() {

                Enumerator<TSource> outers = outer.enumerator();

                Enumerator<TInner> inners = Linq4j.emptyEnumerator();

                @Nullable
                Set<TKey> unmatchedKeys = generateNullsOnLeft ? new HashSet<>(innerLookup.keySet()) : null;

                @Override
                public TResult current() {
                    return resultSelector.apply(outers.current(), inners.current());
                }

                @Override
                public boolean moveNext() {
                    for (; ; ) {
                        if (inners.moveNext()) {
                            return true;
                        }
                        if (!outers.moveNext()) {
                            if (unmatchedKeys != null) {
                                List<TInner> list = new ArrayList<>();
                                for (TKey key : unmatchedKeys) {
                                    @SuppressWarnings(""argument.type.incompatible"")
                                    Enumerable<TInner> innerValues = requireNonNull(innerLookup.get(key));
                                    for (TInner tInner : innerValues) {
                                        list.add(tInner);
                                    }
                                }
                                inners = Linq4j.enumerator(list);
                                outers.close();
                                outers = Linq4j.singletonNullEnumerator();
                                outers.moveNext();
                                unmatchedKeys = null;
                                continue;
                            }
                            return false;
                        }
                        final TSource outer = outers.current();
                        final Enumerable<TInner> innerEnumerable;
                        if (outer == null) {
                            innerEnumerable = null;
                        } else {
                            final TKey outerKey = outerKeySelector.apply(outer);
                            if (outerKey == null) {
                                innerEnumerable = null;
                            } else {
                                if (unmatchedKeys != null) {
                                    unmatchedKeys.remove(outerKey);
                                }
                                innerEnumerable = innerLookup.get(outerKey);
                            }
                        }
                        if (innerEnumerable == null || !innerEnumerable.any()) {
                            if (generateNullsOnRight) {
                                inners = Linq4j.singletonNullEnumerator();
                            } else {
                                inners = Linq4j.emptyEnumerator();
                            }
                        } else {
                            inners = innerEnumerable.enumerator();
                        }
                    }
                }

                @Override
                public void reset() {
                    outers.reset();
                }

                @Override
                public void close() {
                    outers.close();
                }
            };
        }
    };
}",java:S119,
"public static OrderedQueryable<T> orderByDescending(Queryable<T> source, FunctionExpression<Function1<T, TKey>> keySelector){
    throw Extensions.todo();
}",java:S119,
"@Override
public Queryable<TResult> join(Enumerable<TInner> inner, FunctionExpression<Function1<T, TKey>> outerKeySelector, FunctionExpression<Function1<TInner, TKey>> innerKeySelector, FunctionExpression<Function2<T, TInner, TResult>> resultSelector){
    return factory.join(getThis(), inner, outerKeySelector, innerKeySelector, resultSelector);
}",java:S119,
"@Override
public Enumerable<TResult> groupJoin(Enumerable<TInner> inner, Function1<T, TKey> outerKeySelector, Function1<TInner, TKey> innerKeySelector, Function2<T, Enumerable<TInner>, TResult> resultSelector, EqualityComparer<TKey> comparer){
    return EnumerableDefaults.groupJoin(getThis(), inner, outerKeySelector, innerKeySelector, resultSelector, comparer);
}",java:S119,
"public static Queryable<TResult> ofType(Queryable<?> queryable, Class<TResult> clazz){
    throw Extensions.todo();
}",java:S119,
" static ResponseTransformer<ResponseT, ReturnT> unmanaged(ResponseTransformer<ResponseT, ReturnT> transformer){
    return new ResponseTransformer<ResponseT, ReturnT>() {

        @Override
        public ReturnT transform(ResponseT response, AbortableInputStream inputStream) throws Exception {
            InterruptMonitor.checkInterrupted();
            return transformer.transform(response, inputStream);
        }

        @Override
        public boolean needsConnectionLeftOpen() {
            return true;
        }
    };
}",java:S119,
"public static SimpleLabeledDataset<C> createSimpleLabeledDataset(Map<K, V> upstreamMap, int partitions, LearningEnvironmentBuilder envBuilder, PartitionContextBuilder<K, V, C> partCtxBuilder, Preprocessor<K, V> vectorizer){
    return createSimpleLabeledDataset(new LocalDatasetBuilder<>(upstreamMap, partitions), envBuilder, partCtxBuilder, vectorizer);
}",java:S119,
" T wrapMixinT(Class<T> mixinClass, MIXEE mixee){
    return wrapMixin(mixinClass, mixee);
}",java:S119,
"protected DS withLog(Config config, B dsBuilder){
    if (config.webdriverLogsEnabled()) {
        dsBuilder.withLogFile(webdriverLog(config));
    }
    return dsBuilder.build();
}",java:S119,
"public static Long min(Enumerable<TSource> source, NullableLongFunction1<TSource> selector){
    return aggregate(source.select(selector), null, Extensions.LONG_MIN);
}",java:S119,
"public static Integer sum(Enumerable<TSource> source, NullableIntegerFunction1<TSource> selector){
    return aggregate(source.select(selector), 0, Extensions.INTEGER_SUM);
}",java:S119,
"public static Enumerable<TSource> where(final Enumerable<TSource> source, final Predicate1<TSource> predicate){
    assert predicate != null;
    return new AbstractEnumerable<TSource>() {

        @Override
        public Enumerator<TSource> enumerator() {
            final Enumerator<TSource> enumerator = source.enumerator();
            return EnumerableDefaults.where(enumerator, predicate);
        }
    };
}",java:S119,
"@Override
public Lookup<TKey, T> toLookup(Function1<T, TKey> keySelector){
    return EnumerableDefaults.toLookup(getThis(), keySelector);
}",java:S119,
"@Override
public Queryable<Grouping<TKey, TElement>> groupBy(final Queryable<T> source, final FunctionExpression<Function1<T, TKey>> keySelector, final FunctionExpression<Function1<T, TElement>> elementSelector, final EqualityComparer<TKey> comparer){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.groupBy(source, keySelector, elementSelector, comparer);
        }
    }.castQueryable();
}",java:S119,
"public static Queryable<TResult> groupJoin(Queryable<TOuter> outer, Enumerable<TInner> inner, FunctionExpression<Function1<TOuter, TKey>> outerKeySelector, FunctionExpression<Function1<TInner, TKey>> innerKeySelector, FunctionExpression<Function2<TOuter, Enumerable<TInner>, TResult>> resultSelector){
    throw Extensions.todo();
}",java:S119,
"public static ConsequenceBuilder._23<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> on(Variable<T1> arg1, Variable<T2> arg2, Variable<T3> arg3, Variable<T4> arg4, Variable<T5> arg5, Variable<T6> arg6, Variable<T7> arg7, Variable<T8> arg8, Variable<T9> arg9, Variable<T10> arg10, Variable<T11> arg11, Variable<T12> arg12, Variable<T13> arg13, Variable<T14> arg14, Variable<T15> arg15, Variable<T16> arg16, Variable<T17> arg17, Variable<T18> arg18, Variable<T19> arg19, Variable<T20> arg20, Variable<T21> arg21, Variable<T22> arg22, Variable<T23> arg23){
    return new ConsequenceBuilder._23(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23);
}",java:S119,
"@Override
public Enumerable<Grouping<TKey, TElement>> groupBy(Function1<T, TKey> keySelector, Function1<T, TElement> elementSelector){
    return EnumerableDefaults.groupBy(getThis(), keySelector, elementSelector);
}",java:S119,
"private static Enumerable<TResult> groupBy_(final Map<TKey, TAccumulate> map, Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector, Function0<TAccumulate> accumulatorInitializer, Function2<TAccumulate, TSource, TAccumulate> accumulatorAdder, final Function2<TKey, TAccumulate, TResult> resultSelector){
    try (Enumerator<TSource> os = enumerable.enumerator()) {
        while (os.moveNext()) {
            TSource o = os.current();
            TKey key = keySelector.apply(o);
            @SuppressWarnings(""argument.type.incompatible"")
            TAccumulate accumulator = map.get(key);
            if (accumulator == null) {
                accumulator = accumulatorInitializer.apply();
                accumulator = accumulatorAdder.apply(accumulator, o);
                map.put(key, accumulator);
            } else {
                TAccumulate accumulator0 = accumulator;
                accumulator = accumulatorAdder.apply(accumulator, o);
                if (accumulator != accumulator0) {
                    map.put(key, accumulator);
                }
            }
        }
    }
    return new LookupResultEnumerable<>(map, resultSelector);
}",java:S119,
"@Override
public TResult max(Queryable<T> source, FunctionExpression<Function1<T, TResult>> selector){
    throw new UnsupportedOperationException();
}",java:S119,
"public RequestPipelineBuilder<NewInputT, NewOutputT> wrappedWith(BiFunction<HttpClientDependencies, RequestPipeline<InputT, OutputT>, RequestPipeline<NewInputT, NewOutputT>> wrappedFactory){
    return new RequestPipelineBuilder<>(r -> wrappedFactory.apply(r, this.pipelineFactory.apply(r)));
}",java:S119,
"@Override
public Queryable<TResult> ofType(Class<TResult> clazz){
    return factory.ofType(getThis(), clazz);
}",java:S119,
"@Override
public Iterable<Row> scan(ExecutionContext<Row> execCtx, ColocationGroup grp, RangeIterable<Row> ranges, @Nullable ImmutableBitSet requiredColumns){
    return new SystemViewScan<>(execCtx, tbl.descriptor(), ranges, requiredColumns);
}",java:S119,
"@Override
public Enumerable<T> orderBy(Function1<T, TKey> keySelector){
    return EnumerableDefaults.orderBy(getThis(), keySelector);
}",java:S119,
"public static Double sum(Enumerable<TSource> source, NullableDoubleFunction1<TSource> selector){
    return aggregate(source.select(selector), 0d, Extensions.DOUBLE_SUM);
}",java:S119,
"@Override
public Enumerable<TResult> select(Function2<T, Integer, TResult> selector){
    return EnumerableDefaults.select(getThis(), selector);
}",java:S119,
"@Override
public TResult aggregate(TAccumulate seed, FunctionExpression<Function2<TAccumulate, T, TAccumulate>> func, FunctionExpression<Function1<TAccumulate, TResult>> selector){
    return factory.aggregate(getThis(), seed, func, selector);
}",java:S119,
"@Override
public Destination<Row> destination(ExecutionContext<Row> ctx, AffinityService affSrvc, ColocationGroup m, ImmutableIntList k){
    assert m != null && !F.isEmpty(m.assignments()) && k.size() == 1;
    List<List<UUID>> assignments = m.assignments();
    if (U.assertionsEnabled()) {
        for (List<UUID> assignment : assignments) assert F.isEmpty(assignment) || assignment.size() == 1;
    }
    AffinityAdapter<Row> affinity = new AffinityAdapter<>(affSrvc.affinity(cacheId), k.toIntArray(), ctx.rowHandler());
    return new Partitioned<>(assignments, affinity);
}",java:S119,
"@Override
public OrderedQueryable<T> orderBy(FunctionExpression<Function1<T, TKey>> keySelector, Comparator<TKey> comparator){
    return factory.orderBy(getThis(), keySelector, comparator);
}",java:S119,
"public static BigDecimal min(Enumerable<TSource> source, BigDecimalFunction1<TSource> selector){
    Function2<BigDecimal, BigDecimal, BigDecimal> min = minFunction();
    return aggregate(source.select(selector), null, min);
}",java:S119,
"public static TSource max(Enumerable<TSource> source){
    return aggregate(source, maxFunction());
}",java:S119,
"@Override
public OrderedQueryable<T> orderBy(final Queryable<T> source, final FunctionExpression<Function1<T, TKey>> keySelector){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.orderBy(source, keySelector);
        }
    };
}",java:S119,
" static ResponseTransformer<ResponseT, ResponseT> toFile(File file){
    return toFile(file.toPath());
}",java:S119,
"@Override
public Queryable<TResult> groupJoin(Enumerable<TInner> inner, FunctionExpression<Function1<T, TKey>> outerKeySelector, FunctionExpression<Function1<TInner, TKey>> innerKeySelector, FunctionExpression<Function2<T, Enumerable<TInner>, TResult>> resultSelector, EqualityComparer<TKey> comparer){
    return EnumerableDefaults.groupJoin(getThis(), inner, outerKeySelector.getFunction(), innerKeySelector.getFunction(), resultSelector.getFunction(), comparer).asQueryable();
}",java:S119,
"public static Enumerable<@Nullable TSource> defaultIfEmpty(Enumerable<TSource> enumerable){
    return defaultIfEmpty(enumerable, null);
}",java:S119,
"public static Enumerable<TResult> groupByMultiple(Enumerable<TSource> enumerable, List<Function1<TSource, TKey>> keySelectors, Function0<TAccumulate> accumulatorInitializer, Function2<TAccumulate, TSource, TAccumulate> accumulatorAdder, final Function2<TKey, TAccumulate, TResult> resultSelector){
    return groupByMultiple_(new HashMap<>(), enumerable, keySelectors, accumulatorInitializer, accumulatorAdder, resultSelector);
}",java:S119,
"public static BigDecimal min(Enumerable<TSource> source, NullableBigDecimalFunction1<TSource> selector){
    return aggregate(source.select(selector), minFunction());
}",java:S119,
"@Override
public Queryable<TResult> ofType(Class<TResult> clazz){
    return EnumerableDefaults.ofType(getThis(), clazz).asQueryable();
}",java:S119,
"public static short getKeySize(IO io, long pageAddr, int idx){
    return PageUtils.getShort(pageAddr, io.offset(idx) + 8);
}",java:S119,
"public boolean isOfType(Class<T_SUGGESTED> type){
    return this.type.equals(type);
}",java:S119,
"public static OrderedQueryable<T> orderBy(Queryable<T> source, FunctionExpression<Function1<T, TKey>> keySelector){
    throw Extensions.todo();
}",java:S119,
"public static Enumerable<TSource> distinct(Enumerable<TSource> enumerable){
    final Enumerator<TSource> os = enumerable.enumerator();
    final Set<TSource> set = new HashSet<>();
    while (os.moveNext()) {
        set.add(os.current());
    }
    os.close();
    return Linq4j.asEnumerable(set);
}",java:S119,
"public static ConsequenceBuilder._14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> on(Variable<T1> arg1, Variable<T2> arg2, Variable<T3> arg3, Variable<T4> arg4, Variable<T5> arg5, Variable<T6> arg6, Variable<T7> arg7, Variable<T8> arg8, Variable<T9> arg9, Variable<T10> arg10, Variable<T11> arg11, Variable<T12> arg12, Variable<T13> arg13, Variable<T14> arg14){
    return new ConsequenceBuilder._14(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
}",java:S119,
"public void addCacheGroupHandler(int hndId, Class<Msg> type, IgniteBiInClosure<UUID, ? super Msg> c){
    assert !type.isAssignableFrom(GridCacheIdMessage.class) : type;
    addHandler(hndId, NONE, type, c, grpHandlers);
}",java:S119,
"public static Enumerable<TResult> select(final Enumerable<TSource> source, final Function1<TSource, TResult> selector){
    if (selector == Functions.identitySelector()) {
        return (Enumerable<TResult>) source;
    }
    return new AbstractEnumerable<TResult>() {

        @Override
        public Enumerator<TResult> enumerator() {
            return new Enumerator<TResult>() {

                final Enumerator<TSource> enumerator = source.enumerator();

                @Override
                public TResult current() {
                    return selector.apply(enumerator.current());
                }

                @Override
                public boolean moveNext() {
                    return enumerator.moveNext();
                }

                @Override
                public void reset() {
                    enumerator.reset();
                }

                @Override
                public void close() {
                    enumerator.close();
                }
            };
        }
    };
}",java:S119,
" static Function1<TSource, Wrapped<TSource>> wrapperFor(final EqualityComparer<TSource> comparer){
    return a0 -> Wrapped.upAs(comparer, a0);
}",java:S119,
"@Override
public Queryable<TResult> groupBy(final Queryable<T> source, final FunctionExpression<Function1<T, TKey>> keySelector, final FunctionExpression<Function1<T, TElement>> elementSelector, final FunctionExpression<Function2<TKey, Enumerable<TElement>, TResult>> resultSelector, final EqualityComparer<TKey> comparer){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.groupBy(source, keySelector, elementSelector, resultSelector, comparer);
        }
    }.castQueryable();
}",java:S119,
"public static double max(Enumerable<TSource> source, DoubleFunction1<TSource> selector){
    return requireNonNull(aggregate(source.select(adapt(selector)), Extensions.DOUBLE_MAX));
}",java:S119,
"public static boolean contains(Enumerable<TSource> enumerable, TSource element){
    try (Enumerator<TSource> os = enumerable.enumerator()) {
        while (os.moveNext()) {
            TSource o = os.current();
            if (Objects.equals(o, element)) {
                return true;
            }
        }
        return false;
    }
}",java:S119,
"private static Enumerable<TSource> semiEquiJoin_(final Enumerable<TSource> outer, final Enumerable<TInner> inner, final Function1<TSource, TKey> outerKeySelector, final Function1<TInner, TKey> innerKeySelector, @Nullable final EqualityComparer<TKey> comparer, final boolean anti){
    return new AbstractEnumerable<TSource>() {

        @Override
        public Enumerator<TSource> enumerator() {
            final Supplier<Enumerable<TKey>> innerLookup = Suppliers.memoize(() -> comparer == null ? inner.select(innerKeySelector).distinct() : inner.select(innerKeySelector).distinct(comparer));
            final Predicate1<TSource> predicate = anti ? v0 -> !innerLookup.get().contains(outerKeySelector.apply(v0)) : v0 -> innerLookup.get().contains(outerKeySelector.apply(v0));
            return EnumerableDefaults.where(outer.enumerator(), predicate);
        }
    };
}",java:S119,
"public static IndexSpoolNode<Row> createHashSpool(ExecutionContext<Row> ctx, RelDataType rowType, ImmutableBitSet keys, @Nullable Predicate<Row> filter, Supplier<Row> searchRow, boolean allowNulls){
    RuntimeHashIndex<Row> idx = new RuntimeHashIndex<>(ctx, keys, allowNulls);
    ScanNode<Row> scan = new ScanNode<>(ctx, rowType, idx.scan(searchRow), filter, null);
    return new IndexSpoolNode<>(ctx, rowType, idx, scan);
}",java:S119,
"@Override
public Queryable<TResult> join(Enumerable<TInner> inner, FunctionExpression<Function1<T, TKey>> outerKeySelector, FunctionExpression<Function1<TInner, TKey>> innerKeySelector, FunctionExpression<Function2<T, TInner, TResult>> resultSelector){
    return EnumerableDefaults.hashJoin(getThis(), inner, outerKeySelector.getFunction(), innerKeySelector.getFunction(), resultSelector.getFunction()).asQueryable();
}",java:S119,
"@Override
public Queryable<Grouping<TKey, TElement>> groupBy(Queryable<T> source, FunctionExpression<Function1<T, TKey>> keySelector, FunctionExpression<Function1<T, TElement>> elementSelector){
    throw new UnsupportedOperationException();
}",java:S119,
"public static Map<TKey, TSource> toMap(Enumerable<TSource> source, Function1<TSource, TKey> keySelector){
    return toMap(source, keySelector, Functions.identitySelector());
}",java:S119,
" T wrapMixinT(Class<T> mixinClass, MIXEE mixee, SyncControl syncControl){
    return wrapMixin(mixinClass, mixee, syncControl);
}",java:S119,
"public static TSource first(Enumerable<TSource> enumerable){
    try (Enumerator<TSource> os = enumerable.enumerator()) {
        if (os.moveNext()) {
            return os.current();
        }
        throw new NoSuchElementException();
    }
}",java:S119,
"@Override
public Enumerable<TResult> groupBy(Function1<T, TKey> keySelector, Function0<TAccumulate> accumulatorInitializer, Function2<TAccumulate, T, TAccumulate> accumulatorAdder, Function2<TKey, TAccumulate, TResult> resultSelector, EqualityComparer<TKey> comparer){
    return EnumerableDefaults.groupBy(getThis(), keySelector, accumulatorInitializer, accumulatorAdder, resultSelector, comparer);
}",java:S119,
"public static CollectNode<Row> createCountCollector(ExecutionContext<Row> ctx){
    RelDataType rowType = ctx.getTypeFactory().createSqlType(SqlTypeName.BIGINT);
    Collector<Row> collector = new Counter<>(ctx.rowHandler(), ctx.rowHandler().factory(ctx.getTypeFactory(), rowType), 1);
    return new CollectNode<>(ctx, rowType, collector);
}",java:S119,
"@Override
public Enumerable<TResult> groupBy(Function1<T, TKey> keySelector, Function1<T, TElement> elementSelector, Function2<TKey, Enumerable<TElement>, TResult> resultSelector){
    return EnumerableDefaults.groupBy(getThis(), keySelector, elementSelector, resultSelector);
}",java:S119,
"public static JoinClause<K, T0, Entry<K, T1_OUT>, T1_OUT> joinMapEntries(FunctionEx<? super T0, ? extends K> leftKeyFn){
    return new JoinClause<>(leftKeyFn, Entry::getKey, Entry::getValue);
}",java:S119,
"@Nullable
public static TSource singleOrDefault(Enumerable<TSource> source){
    TSource toRet = null;
    try (Enumerator<TSource> os = source.enumerator()) {
        if (os.moveNext()) {
            toRet = os.current();
        }
        if (os.moveNext()) {
            return null;
        }
        return toRet;
    }
}",java:S119,
"public static RequestPipelineBuilder<InputT, OutputT> first(Function<HttpClientDependencies, RequestPipeline<InputT, OutputT>> pipelineFactory){
    return new RequestPipelineBuilder<>(pipelineFactory);
}",java:S119,
"@Override
public Queryable<TResult> select(FunctionExpression<Function1<T, TResult>> selector){
    return EnumerableDefaults.select(getThis(), selector.getFunction()).asQueryable();
}",java:S119,
"@Override
public Queryable<Grouping<TKey, T>> groupBy(final Queryable<T> source, final FunctionExpression<Function1<T, TKey>> keySelector){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.groupBy(source, keySelector);
        }
    }.castQueryable();
}",java:S119,
"public static Enumerable<TResult> correlateJoin(final JoinType joinType, final Enumerable<TSource> outer, final Function1<TSource, Enumerable<TInner>> inner, final Function2<TSource, ? super @Nullable TInner, TResult> resultSelector){
    if (joinType == JoinType.RIGHT || joinType == JoinType.FULL) {
        throw new IllegalArgumentException(""JoinType "" + joinType + "" is not valid for correlation"");
    }
    return new AbstractEnumerable<TResult>() {

        @Override
        public Enumerator<TResult> enumerator() {
            return new Enumerator<TResult>() {

                private final Enumerator<TSource> outerEnumerator = outer.enumerator();

                @Nullable
                private Enumerator<TInner> innerEnumerator;

                @Nullable
                TSource outerValue;

                @Nullable
                TInner innerValue;

                int state = 0;

                @Override
                public TResult current() {
                    return resultSelector.apply(castNonNull(outerValue), innerValue);
                }

                @Override
                public boolean moveNext() {
                    while (true) {
                        switch(state) {
                            case 0:
                                if (!outerEnumerator.moveNext()) {
                                    return false;
                                }
                                outerValue = outerEnumerator.current();
                                Enumerable<TInner> innerEnumerable = inner.apply(outerValue);
                                if (innerEnumerable == null) {
                                    innerEnumerable = Linq4j.emptyEnumerable();
                                }
                                if (innerEnumerator != null) {
                                    innerEnumerator.close();
                                }
                                innerEnumerator = innerEnumerable.enumerator();
                                if (innerEnumerator.moveNext()) {
                                    switch(joinType) {
                                        case ANTI:
                                            continue;
                                        case SEMI:
                                            return true;
                                        default:
                                            break;
                                    }
                                    innerValue = innerEnumerator.current();
                                    state = 1;
                                    return true;
                                }
                                innerValue = null;
                                switch(joinType) {
                                    case LEFT:
                                    case ANTI:
                                        return true;
                                    default:
                                        break;
                                }
                                continue;
                            case 1:
                                Enumerator<TInner> innerEnumerator = requireNonNull(this.innerEnumerator);
                                if (innerEnumerator.moveNext()) {
                                    innerValue = innerEnumerator.current();
                                    return true;
                                }
                                state = 0;
                                break;
                            default:
                                break;
                        }
                    }
                }

                @Override
                public void reset() {
                    state = 0;
                    outerEnumerator.reset();
                    closeInner();
                }

                @Override
                public void close() {
                    outerEnumerator.close();
                    closeInner();
                    outerValue = null;
                }

                private void closeInner() {
                    innerValue = null;
                    if (innerEnumerator != null) {
                        innerEnumerator.close();
                        innerEnumerator = null;
                    }
                }
            };
        }
    };
}",java:S119,
"private static Vector applyToVector(IgniteModel<IS, IA> mdl, IgniteFunction<IA, Vector> submodelOutput2VectorConverter, IgniteFunction<Vector, IS> vector2SubmodelInputConverter, Vector v){
    return vector2SubmodelInputConverter.andThen(mdl::predict).andThen(submodelOutput2VectorConverter).apply(v);
}",java:S119,
"public static Query10Def<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> query(String name, Class<T1> type1, String arg1name, Class<T2> type2, String arg2name, Class<T3> type3, String arg3name, Class<T4> type4, String arg4name, Class<T5> type5, String arg5name, Class<T6> type6, String arg6name, Class<T7> type7, String arg7name, Class<T8> type8, String arg8name, Class<T9> type9, String arg9name, Class<T10> type10, String arg10name){
    return new Query10DefImpl<>(VIEW_BUILDER, name, type1, arg1name, type2, arg2name, type3, arg3name, type4, arg4name, type5, arg5name, type6, arg6name, type7, arg7name, type8, arg8name, type9, arg9name, type10, arg10name);
}",java:S119,
"private ModifyTuple insertTuple(Row row, ExecutionContext<Row> ectx) throws IgniteCheckedException{
    Object key = insertKey(row, ectx);
    Object val = insertVal(row, ectx);
    if (cacheContext().binaryMarshaller()) {
        if (key instanceof BinaryObjectBuilder)
            key = ((BinaryObjectBuilder) key).build();
        if (val instanceof BinaryObjectBuilder)
            val = ((BinaryObjectBuilder) val).build();
    }
    typeDesc.validateKeyAndValue(key, val);
    return new ModifyTuple(key, val, TableModify.Operation.INSERT);
}",java:S119,
"public static F newLayoutInfo(final A anyTO, final List<String> anyTypeClasses, final FL anyFormLayout, final AbstractAnyRestClient<?> anyRestClient, final PageReference pageRef){
    try {
        if (anyTO instanceof UserTO) {
            return anyFormLayout.getFormClass().getConstructor(anyTO.getClass(), anyTO.getClass(), List.class, anyFormLayout.getClass(), UserRestClient.class, pageRef.getClass()).newInstance(null, anyTO, anyTypeClasses, anyFormLayout, anyRestClient, pageRef);
        }
        if (anyTO instanceof GroupTO) {
            return anyFormLayout.getFormClass().getConstructor(anyTO.getClass(), List.class, anyFormLayout.getClass(), GroupRestClient.class, pageRef.getClass()).newInstance(anyTO, anyTypeClasses, anyFormLayout, anyRestClient, pageRef);
        }
        return anyFormLayout.getFormClass().getConstructor(anyTO.getClass(), List.class, anyFormLayout.getClass(), AnyObjectRestClient.class, pageRef.getClass()).newInstance(anyTO, anyTypeClasses, anyFormLayout, anyRestClient, pageRef);
    } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
        throw new IllegalArgumentException(""Could not instantiate "" + anyFormLayout.getFormClass().getName(), e);
    }
}",java:S119,
"private static Enumerable<TResult> hashJoinWithPredicate_(final Enumerable<TSource> outer, final Enumerable<TInner> inner, final Function1<TSource, TKey> outerKeySelector, final Function1<TInner, TKey> innerKeySelector, final Function2<TSource, TInner, TResult> resultSelector, @Nullable final EqualityComparer<TKey> comparer, final boolean generateNullsOnLeft, final boolean generateNullsOnRight, final Predicate2<TSource, TInner> predicate){
    return new AbstractEnumerable<TResult>() {

        @Override
        public Enumerator<TResult> enumerator() {
            final Enumerable<TInner> innerToLookUp = generateNullsOnLeft ? Linq4j.asEnumerable(inner.toList()) : inner;
            final Lookup<TKey, TInner> innerLookup = comparer == null ? innerToLookUp.toLookup(innerKeySelector) : innerToLookUp.toLookup(innerKeySelector, comparer);
            return new Enumerator<TResult>() {

                Enumerator<TSource> outers = outer.enumerator();

                Enumerator<TInner> inners = Linq4j.emptyEnumerator();

                @Nullable
                List<TInner> innersUnmatched = generateNullsOnLeft ? new ArrayList<>(innerToLookUp.toList()) : null;

                @Override
                public TResult current() {
                    return resultSelector.apply(outers.current(), inners.current());
                }

                @Override
                public boolean moveNext() {
                    for (; ; ) {
                        if (inners.moveNext()) {
                            return true;
                        }
                        if (!outers.moveNext()) {
                            if (innersUnmatched != null) {
                                inners = Linq4j.enumerator(innersUnmatched);
                                outers.close();
                                outers = Linq4j.singletonNullEnumerator();
                                outers.moveNext();
                                innersUnmatched = null;
                                continue;
                            }
                            return false;
                        }
                        final TSource outer = outers.current();
                        Enumerable<TInner> innerEnumerable;
                        if (outer == null) {
                            innerEnumerable = null;
                        } else {
                            final TKey outerKey = outerKeySelector.apply(outer);
                            if (outerKey == null) {
                                innerEnumerable = null;
                            } else {
                                innerEnumerable = innerLookup.get(outerKey);
                                if (innerEnumerable != null) {
                                    final List<TInner> matchedInners = new ArrayList<>();
                                    try (Enumerator<TInner> innerEnumerator = innerEnumerable.enumerator()) {
                                        while (innerEnumerator.moveNext()) {
                                            final TInner inner = innerEnumerator.current();
                                            if (predicate.apply(outer, inner)) {
                                                matchedInners.add(inner);
                                            }
                                        }
                                    }
                                    innerEnumerable = Linq4j.asEnumerable(matchedInners);
                                    if (innersUnmatched != null) {
                                        innersUnmatched.removeAll(matchedInners);
                                    }
                                }
                            }
                        }
                        if (innerEnumerable == null || !innerEnumerable.any()) {
                            if (generateNullsOnRight) {
                                inners = Linq4j.singletonNullEnumerator();
                            } else {
                                inners = Linq4j.emptyEnumerator();
                            }
                        } else {
                            inners = innerEnumerable.enumerator();
                        }
                    }
                }

                @Override
                public void reset() {
                    outers.reset();
                }

                @Override
                public void close() {
                    outers.close();
                }
            };
        }
    };
}",java:S119,
"private static Supplier<Accumulator<Row>> accumulatorFunctionFactory(AggregateCall call, ExecutionContext<Row> ctx){
    RowHandler<Row> hnd = ctx.rowHandler();
    switch(call.getAggregation().getName()) {
        case ""COUNT"":
            return () -> new LongCount<>(call, hnd);
        case ""AVG"":
            return avgFactory(call, hnd);
        case ""SUM"":
            return sumFactory(call, hnd);
        case ""$SUM0"":
            return sumEmptyIsZeroFactory(call, hnd);
        case ""MIN"":
        case ""EVERY"":
            return minFactory(call, hnd);
        case ""MAX"":
        case ""SOME"":
            return maxFactory(call, hnd);
        case ""SINGLE_VALUE"":
            return () -> new SingleVal<>(call, hnd);
        case ""ANY_VALUE"":
            return () -> new AnyVal<>(call, hnd);
        case ""LISTAGG"":
        case ""ARRAY_AGG"":
        case ""ARRAY_CONCAT_AGG"":
            return listAggregateSupplier(call, ctx);
        default:
            throw new AssertionError(call.getAggregation().getName());
    }
}",java:S119,
"public static int count(Enumerable<TSource> enumerable, Predicate1<TSource> predicate){
    return (int) longCount(enumerable, predicate);
}",java:S119,
"@Override
public Queryable<Grouping<TKey, T>> groupBy(FunctionExpression<Function1<T, TKey>> keySelector, EqualityComparer<TKey> comparer){
    return EnumerableDefaults.groupBy(getThis(), keySelector.getFunction(), comparer).asQueryable();
}",java:S119,
"public static Enumerable<TSource> intersect(Enumerable<TSource> source0, Enumerable<TSource> source1, EqualityComparer<TSource> comparer){
    return intersect(source0, source1, comparer, false);
}",java:S119,
"@Override
public Map<TKey, TElement> toMap(Function1<T, TKey> keySelector, Function1<T, TElement> elementSelector, EqualityComparer<TKey> comparer){
    return EnumerableDefaults.toMap(getThis(), keySelector, elementSelector, comparer);
}",java:S119,
"private void sendRequestWithRightRegion(T request, Function<T, CompletableFuture<ReturnT>> operation, String bucketName, CompletableFuture<ReturnT> returnFuture, String region){
    bucketToRegionCache.put(bucketName, Region.of(region));
    CompletableFuture<ReturnT> newFuture = operation.apply(requestWithDecoratedEndpointProvider(request, () -> Region.of(region), serviceClientConfiguration().endpointProvider().get()));
    CompletableFutureUtils.forwardResultTo(newFuture, returnFuture);
    CompletableFutureUtils.forwardExceptionTo(returnFuture, newFuture);
}",java:S119,
"public static Enumerable<TResult> select(final Enumerable<TSource> source, final Function2<TSource, Integer, TResult> selector){
    return new AbstractEnumerable<TResult>() {

        @Override
        public Enumerator<TResult> enumerator() {
            return new Enumerator<TResult>() {

                final Enumerator<TSource> enumerator = source.enumerator();

                int n = -1;

                @Override
                public TResult current() {
                    return selector.apply(enumerator.current(), n);
                }

                @Override
                public boolean moveNext() {
                    if (enumerator.moveNext()) {
                        ++n;
                        return true;
                    } else {
                        return false;
                    }
                }

                @Override
                public void reset() {
                    enumerator.reset();
                }

                @Override
                public void close() {
                    enumerator.close();
                }
            };
        }
    };
}",java:S119,
"public static Enumerable<TSource> semiJoin(final Enumerable<TSource> outer, final Enumerable<TInner> inner, final Function1<TSource, TKey> outerKeySelector, final Function1<TInner, TKey> innerKeySelector){
    return semiEquiJoin_(outer, inner, outerKeySelector, innerKeySelector, null, false);
}",java:S119,
"@Override
public Queryable<TResult> join(Queryable<T> source, Enumerable<TInner> inner, FunctionExpression<Function1<T, TKey>> outerKeySelector, FunctionExpression<Function1<TInner, TKey>> innerKeySelector, FunctionExpression<Function2<T, TInner, TResult>> resultSelector){
    throw new UnsupportedOperationException();
}",java:S119,
"public static Enumerable<TSource> takeWhileLong(final Enumerable<TSource> source, final Predicate2<TSource, Long> predicate){
    return new AbstractEnumerable<TSource>() {

        @Override
        public Enumerator<TSource> enumerator() {
            return new TakeWhileLongEnumerator<>(source.enumerator(), predicate);
        }
    };
}",java:S119,
"public static Enumerable<TSource> where(final Enumerable<TSource> source, final Predicate2<TSource, Integer> predicate){
    return new AbstractEnumerable<TSource>() {

        @Override
        public Enumerator<TSource> enumerator() {
            return new Enumerator<TSource>() {

                final Enumerator<TSource> enumerator = source.enumerator();

                int n = -1;

                @Override
                public TSource current() {
                    return enumerator.current();
                }

                @Override
                public boolean moveNext() {
                    while (enumerator.moveNext()) {
                        ++n;
                        if (predicate.apply(enumerator.current(), n)) {
                            return true;
                        }
                    }
                    return false;
                }

                @Override
                public void reset() {
                    enumerator.reset();
                    n = -1;
                }

                @Override
                public void close() {
                    enumerator.close();
                }
            };
        }
    };
}",java:S119,
" static PrintStream setupConsole(CliSpec<CliFlagsT> spec){
    if (null == spec.console()) {
        return System.out;
    } else {
        return spec.console();
    }
}",java:S119,
"@Override
@PolyNull
public TAccumulate aggregate(@PolyNull TAccumulate seed, Function2<@PolyNull TAccumulate, T, @PolyNull TAccumulate> func){
    return EnumerableDefaults.aggregate(getThis(), seed, func);
}",java:S119,
"@Override
public Queryable<TResult> selectManyN(FunctionExpression<Function2<T, Integer, Enumerable<TResult>>> selector){
    return factory.selectManyN(getThis(), selector);
}",java:S119,
"public static Enumerable<TSource> take(Enumerable<TSource> source, final int count){
    return takeWhile(source, (v1, v2) -> {
        return v2 < count;
    });
}",java:S119,
"public static void printUsage(CliSpec<CliOptsT> spec){
    Cli<CliOptsT> cli = new Cli<>(spec);
    cli.usage();
}",java:S119,
"public static Integer min(Enumerable<TSource> source, NullableIntegerFunction1<TSource> selector){
    return aggregate(source.select(selector), null, Extensions.INTEGER_MIN);
}",java:S119,
"public static Enumerable<TSource> reverse(Enumerable<TSource> source){
    final List<TSource> list = toList(source);
    final int n = list.size();
    return Linq4j.asEnumerable(new AbstractList<TSource>() {

        @Override
        public TSource get(int index) {
            return list.get(n - 1 - index);
        }

        @Override
        public int size() {
            return n;
        }
    });
}",java:S119,
"@Override
public Enumerable<TResult> hashJoin(Enumerable<TInner> inner, Function1<T, TKey> outerKeySelector, Function1<TInner, TKey> innerKeySelector, Function2<T, TInner, TResult> resultSelector, EqualityComparer<TKey> comparer, boolean generateNullsOnLeft, boolean generateNullsOnRight){
    return EnumerableDefaults.hashJoin(getThis(), inner, outerKeySelector, innerKeySelector, resultSelector, comparer, generateNullsOnLeft, generateNullsOnRight);
}",java:S119,
"public static Enumerable<TSource> take(Enumerable<TSource> source, final long count){
    return takeWhileLong(source, (v1, v2) -> {
        return v2 < count;
    });
}",java:S119,
"@Override
public Queryable<TResult> selectManyN(FunctionExpression<Function2<T, Integer, Enumerable<TResult>>> selector){
    return EnumerableDefaults.selectMany(getThis(), selector.getFunction()).asQueryable();
}",java:S119,
"@Override
public Queryable<TResult> groupByK(Queryable<T> source, FunctionExpression<Function1<T, TKey>> keySelector, FunctionExpression<Function2<TKey, Enumerable<T>, TResult>> elementSelector, EqualityComparer<TKey> comparer){
    throw new UnsupportedOperationException();
}",java:S119,
"public static CompletableFuture<SourceT> forwardTransformedResultTo(CompletableFuture<SourceT> src, CompletableFuture<DestT> dst, Function<SourceT, DestT> function){
    src.whenComplete((r, e) -> {
        if (e != null) {
            dst.completeExceptionally(e);
        } else {
            dst.complete(function.apply(r));
        }
    });
    return src;
}",java:S119,
"@Override
public Queryable<TResult> selectManyN(final Queryable<T> source, final FunctionExpression<Function1<T, Enumerable<TCollection>>> collectionSelector, final FunctionExpression<Function2<T, TCollection, TResult>> resultSelector){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.selectManyN(source, collectionSelector, resultSelector);
        }
    }.castQueryable();
}",java:S119,
"@Nullable
public static Float max(Enumerable<TSource> source, NullableFloatFunction1<TSource> selector){
    return aggregate(source.select(selector), Extensions.FLOAT_MAX);
}",java:S119,
"@Override
public TAccumulate aggregate(TAccumulate seed, FunctionExpression<Function2<TAccumulate, T, TAccumulate>> selector){
    return EnumerableDefaults.aggregate(getThis(), seed, selector.getFunction());
}",java:S119,
"public static Queryable<Grouping<TKey, T>> groupBy(Queryable<T> queryable, FunctionExpression<Function1<T, TKey>> keySelector){
    throw Extensions.todo();
}",java:S119,
"@Override
public Queryable<TResult> groupJoin(Enumerable<TInner> inner, FunctionExpression<Function1<T, TKey>> outerKeySelector, FunctionExpression<Function1<TInner, TKey>> innerKeySelector, FunctionExpression<Function2<T, Enumerable<TInner>, TResult>> resultSelector){
    return factory.groupJoin(getThis(), inner, outerKeySelector, innerKeySelector, resultSelector);
}",java:S119,
"public static Queryable<TResult> selectMany(Queryable<T> source, FunctionExpression<Function2<T, Integer, Enumerable<TCollection>>> collectionSelector, FunctionExpression<Function2<T, TCollection, TResult>> resultSelector){
    throw Extensions.todo();
}",java:S119,
"@Override
public Queryable<TResult> zip(final Queryable<T> source, final Enumerable<T1> source1, final FunctionExpression<Function2<T, T1, TResult>> resultSelector){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.zip(source, source1, resultSelector);
        }
    }.castQueryable();
}",java:S119,
"public static BigDecimal average(Enumerable<TSource> source, BigDecimalFunction1<TSource> selector){
    return sum(source, selector).divide(BigDecimal.valueOf(longCount(source)));
}",java:S119,
"public static Enumerable<TResult> groupJoin(final Enumerable<TSource> outer, final Enumerable<TInner> inner, final Function1<TSource, TKey> outerKeySelector, final Function1<TInner, TKey> innerKeySelector, final Function2<TSource, Enumerable<TInner>, TResult> resultSelector, final EqualityComparer<TKey> comparer){
    return new AbstractEnumerable<TResult>() {

        final Map<TKey, TSource> outerMap = outer.toMap(outerKeySelector, comparer);

        final Lookup<TKey, TInner> innerLookup = inner.toLookup(innerKeySelector, comparer);

        final Enumerator<Map.Entry<TKey, TSource>> entries = Linq4j.enumerator(outerMap.entrySet());

        @Override
        public Enumerator<TResult> enumerator() {
            return new Enumerator<TResult>() {

                @Override
                public TResult current() {
                    final Map.Entry<TKey, TSource> entry = entries.current();
                    @SuppressWarnings(""argument.type.incompatible"")
                    final Enumerable<TInner> inners = innerLookup.get(entry.getKey());
                    return resultSelector.apply(entry.getValue(), inners == null ? Linq4j.emptyEnumerable() : inners);
                }

                @Override
                public boolean moveNext() {
                    return entries.moveNext();
                }

                @Override
                public void reset() {
                    entries.reset();
                }

                @Override
                public void close() {
                }
            };
        }
    };
}",java:S119,
"public void addCacheHandler(int hndId, AffinityTopologyVersion startTopVer, Class<Msg> type, IgniteBiInClosure<UUID, ? super Msg> c){
    assert !type.isAssignableFrom(GridCacheGroupIdMessage.class) : type;
    addHandler(hndId, startTopVer, type, c, cacheHandlers);
}",java:S119,
"public static OrderedQueryable<T> thenBy(OrderedQueryable<T> source, FunctionExpression<Function1<T, TKey>> keySelector){
    throw Extensions.todo();
}",java:S119,
"public static BigDecimal sum(Enumerable<TSource> source, NullableBigDecimalFunction1<TSource> selector){
    return aggregate(source.select(selector), BigDecimal.ZERO, Extensions.BIG_DECIMAL_SUM);
}",java:S119,
"@Override
public Queryable<TResult> selectMany(FunctionExpression<Function1<T, Enumerable<TResult>>> selector){
    return factory.selectMany(getThis(), selector);
}",java:S119,
"@Override
public TResult min(Queryable<T> source, FunctionExpression<Function1<T, TResult>> selector){
    throw new UnsupportedOperationException();
}",java:S119,
"private void innerGo(final Request request, final HttpResponseHandler<Intermediate, Final> httpResponseHandler, final Duration duration, final SettableFuture<Final> future){
    try {
        final String host = request.getUrl().getHost();
        final URI uri = request.getUrl().toURI();
        Map<String, List<String>> cookieMap = cookieManager.get(uri, Collections.emptyMap());
        for (Map.Entry<String, List<String>> entry : cookieMap.entrySet()) {
            request.addHeaderValues(entry.getKey(), entry.getValue());
        }
        final boolean shouldRetryOnUnauthorizedResponse;
        if (DruidKerberosUtil.needToSendCredentials(cookieManager.getCookieStore(), uri)) {
            LOG.debug(""No Auth Cookie found for URI{}. Existing Cookies{} Authenticating... "", uri, cookieManager.getCookieStore().getCookies());
            UserGroupInformation currentUser = UserGroupInformation.getCurrentUser();
            currentUser.checkTGTAndReloginFromKeytab();
            LOG.debug(""The user credential is {}"", currentUser);
            String challenge = currentUser.doAs((PrivilegedExceptionAction<String>) () -> DruidKerberosUtil.kerberosChallenge(host));
            request.setHeader(HttpHeaders.Names.AUTHORIZATION, ""Negotiate "" + challenge);
            shouldRetryOnUnauthorizedResponse = false;
        } else {
            LOG.debug(""Found Auth Cookie found for URI {} cookie {}"", uri, DruidKerberosUtil.getAuthCookie(cookieManager.getCookieStore(), uri).toString());
            shouldRetryOnUnauthorizedResponse = true;
        }
        @SuppressWarnings(""unchecked"")
        ListenableFuture<RetryResponseHolder<Final>> internalFuture = delegate.go(request, new RetryIfUnauthorizedResponseHandler<Intermediate, Final>(new ResponseCookieHandler(request.getUrl().toURI(), cookieManager, httpResponseHandler)), duration);
        RetryResponseHolder<Final> responseHolder = internalFuture.get();
        if (shouldRetryOnUnauthorizedResponse && responseHolder.shouldRetry()) {
            LOG.debug(""Preparing for Retry boolean {} and result {}, object{} "", true, responseHolder.shouldRetry(), responseHolder.getObj());
            DruidKerberosUtil.removeAuthCookie(cookieManager.getCookieStore(), uri);
            request.setHeader(""Cookie"", """");
            innerGo(request.copy(), httpResponseHandler, duration, future);
        } else {
            future.set(responseHolder.getObj());
        }
    } catch (Throwable e) {
        throw Throwables.propagate(e);
    }
}",java:S119,
"@Override
public TResult max(final Queryable<T> source, final FunctionExpression<Function1<T, TResult>> selector){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.max(source, selector);
        }
    }.castSingle();
}",java:S119,
"public static boolean all(Enumerable<TSource> enumerable, Predicate1<TSource> predicate){
    try (Enumerator<TSource> os = enumerable.enumerator()) {
        while (os.moveNext()) {
            TSource o = os.current();
            if (!predicate.apply(o)) {
                return false;
            }
        }
        return true;
    }
}",java:S119,
"@Override
public Iterable<Row> firstOrLast(boolean first, ExecutionContext<Row> ectx, ColocationGroup grp, @Nullable ImmutableBitSet requiredColumns){
    UUID localNodeId = ectx.localNodeId();
    if (grp.nodeIds().contains(localNodeId) && idx != null) {
        return new IndexFirstLastScan<>(first, ectx, tbl.descriptor(), idx.unwrap(InlineIndexImpl.class), collation.getKeys(), grp.partitions(localNodeId), requiredColumns);
    }
    return Collections.emptyList();
}",java:S119,
"public static OrderedQueryable<T> thenByDescending(OrderedQueryable<T> source, FunctionExpression<Function1<T, TKey>> keySelector, Comparator<TKey> comparator){
    throw Extensions.todo();
}",java:S119,
"public static Float min(Enumerable<TSource> source, NullableFloatFunction1<TSource> selector){
    return aggregate(source.select(selector), null, Extensions.FLOAT_MIN);
}",java:S119,
"@Override
public Queryable<Grouping<TKey, TElement>> groupBy(FunctionExpression<Function1<T, TKey>> keySelector, FunctionExpression<Function1<T, TElement>> elementSelector, EqualityComparer<TKey> comparer){
    return EnumerableDefaults.groupBy(getThis(), keySelector.getFunction(), elementSelector.getFunction(), comparer).asQueryable();
}",java:S119,
"public static SimpleLabeledDataset<EmptyContext> createSimpleLabeledDataset(Ignite ignite, LearningEnvironmentBuilder envBuilder, IgniteCache<K, V> upstreamCache, Preprocessor<K, V> vectorizer){
    return createSimpleLabeledDataset(new CacheBasedDatasetBuilder<>(ignite, upstreamCache), envBuilder, vectorizer);
}",java:S119,
"@Override
public Enumerable<Grouping<TKey, TElement>> groupBy(Function1<T, TKey> keySelector, Function1<T, TElement> elementSelector, EqualityComparer<TKey> comparer){
    return EnumerableDefaults.groupBy(getThis(), keySelector, elementSelector, comparer);
}",java:S119,
"@Override
public OrderedQueryable<T> orderBy(FunctionExpression<Function1<T, TKey>> keySelector){
    return factory.orderBy(getThis(), keySelector);
}",java:S119,
"@Override
public Queryable<TResult> selectN(FunctionExpression<Function2<T, Integer, TResult>> selector){
    return factory.selectN(getThis(), selector);
}",java:S119,
"@Override
public OrderedQueryable<T> orderByDescending(final Queryable<T> source, final FunctionExpression<Function1<T, TKey>> keySelector, final Comparator<TKey> comparator){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.orderByDescending(source, keySelector, comparator);
        }
    };
}",java:S119,
"public static Double min(Enumerable<TSource> source, NullableDoubleFunction1<TSource> selector){
    return aggregate(source.select(selector), Extensions.DOUBLE_MIN);
}",java:S119,
"public static Enumerable<Grouping<TKey, TSource>> groupBy(final Enumerable<TSource> enumerable, final Function1<TSource, TKey> keySelector){
    return enumerable.toLookup(keySelector);
}",java:S119,
"@Override
public Queryable<Grouping<TKey, TElement>> groupBy(Queryable<T> source, FunctionExpression<Function1<T, TKey>> keySelector, FunctionExpression<Function1<T, TElement>> elementSelector, EqualityComparer<TKey> comparer){
    throw new UnsupportedOperationException();
}",java:S119,
"public static Enumerable<TSource> intersect(Enumerable<TSource> source0, Enumerable<TSource> source1){
    return intersect(source0, source1, false);
}",java:S119,
"@Override
public Queryable<TResult> selectManyN(FunctionExpression<Function1<T, Enumerable<TCollection>>> collectionSelector, FunctionExpression<Function2<T, TCollection, TResult>> resultSelector){
    return EnumerableDefaults.selectMany(getThis(), collectionSelector.getFunction(), resultSelector.getFunction()).asQueryable();
}",java:S119,
"@Override
public ModifyTuple toTuple(ExecutionContext<Row> ectx, Row row, TableModify.Operation op, Object arg) throws IgniteCheckedException{
    switch(op) {
        case INSERT:
            return insertTuple(row, ectx);
        case DELETE:
            return deleteTuple(row, ectx);
        case UPDATE:
            return updateTuple(row, (List<String>) arg, 0, ectx);
        case MERGE:
            return mergeTuple(row, (List<String>) arg, ectx);
        default:
            throw new AssertionError();
    }
}",java:S119,
"@Override
public OrderedQueryable<T> orderBy(final Queryable<T> source, final FunctionExpression<Function1<T, TKey>> keySelector, final Comparator<TKey> comparator){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.orderBy(source, keySelector, comparator);
        }
    };
}",java:S119,
"@Override
public Queryable<TResult> groupByK(Queryable<T> source, FunctionExpression<Function1<T, TKey>> keySelector, FunctionExpression<Function2<TKey, Enumerable<T>, TResult>> resultSelector){
    throw new UnsupportedOperationException();
}",java:S119,
"@Override
@Nullable
public TResult max(Function1<T, TResult> selector){
    return EnumerableDefaults.max(getThis(), selector);
}",java:S119,
"public static Queryable<TResult> groupBy(Queryable<T> queryable, FunctionExpression<Function1<T, TKey>> keySelector, FunctionExpression<Function1<T, TElement>> elementSelector, FunctionExpression<Function2<TKey, Enumerable<TElement>, TResult>> resultSelector, EqualityComparer<TKey> comparer){
    throw Extensions.todo();
}",java:S119,
"@Override
public OrderedQueryable<T> orderBy(Queryable<T> source, FunctionExpression<Function1<T, TKey>> keySelector, Comparator<TKey> comparator){
    throw new UnsupportedOperationException();
}",java:S119,
"@Override
public Queryable<Grouping<TKey, T>> groupBy(FunctionExpression<Function1<T, TKey>> keySelector, EqualityComparer<TKey> comparer){
    return factory.groupBy(getThis(), keySelector, comparer);
}",java:S119,
"public static ConsequenceBuilder._16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> on(Variable<T1> arg1, Variable<T2> arg2, Variable<T3> arg3, Variable<T4> arg4, Variable<T5> arg5, Variable<T6> arg6, Variable<T7> arg7, Variable<T8> arg8, Variable<T9> arg9, Variable<T10> arg10, Variable<T11> arg11, Variable<T12> arg12, Variable<T13> arg13, Variable<T14> arg14, Variable<T15> arg15, Variable<T16> arg16){
    return new ConsequenceBuilder._16(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
}",java:S119,
"private ModifyTuple updateTuple(Row row, List<String> updateColList, int offset, ExecutionContext<Row> ectx) throws IgniteCheckedException{
    RowHandler<Row> handler = ectx.rowHandler();
    Object key = Objects.requireNonNull(handler.get(offset + QueryUtils.KEY_COL, row));
    Object val = clone(Objects.requireNonNull(handler.get(offset + QueryUtils.VAL_COL, row)));
    offset += descriptorsMap.size();
    for (int i = 0; i < updateColList.size(); i++) {
        final CacheColumnDescriptor desc = Objects.requireNonNull(descriptorsMap.get(updateColList.get(i)));
        assert !desc.key();
        Object fieldVal = handler.get(i + offset, row);
        if (desc.field())
            desc.set(val, TypeUtils.fromInternal(ectx, fieldVal, desc.storageType()));
        else
            val = TypeUtils.fromInternal(ectx, fieldVal, desc.storageType());
    }
    if (cacheContext().binaryMarshaller() && val instanceof BinaryObjectBuilder)
        val = ((BinaryObjectBuilder) val).build();
    typeDesc.validateKeyAndValue(key, val);
    return new ModifyTuple(key, val, TableModify.Operation.UPDATE);
}",java:S119,
"public static double average(Enumerable<TSource> source, DoubleFunction1<TSource> selector){
    return sum(source, selector) / longCount(source);
}",java:S119,
"@Override
public Queryable<TResult> groupBy(final Queryable<T> source, final FunctionExpression<Function1<T, TKey>> keySelector, final FunctionExpression<Function1<T, TElement>> elementSelector, final FunctionExpression<Function2<TKey, Enumerable<TElement>, TResult>> resultSelector){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.groupBy(source, keySelector, elementSelector, resultSelector);
        }
    }.castQueryable();
}",java:S119,
"public static Query10Def<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> query(String pkg, String name, Class<T1> type1, String arg1name, Class<T2> type2, String arg2name, Class<T3> type3, String arg3name, Class<T4> type4, String arg4name, Class<T5> type5, String arg5name, Class<T6> type6, String arg6name, Class<T7> type7, String arg7name, Class<T8> type8, String arg8name, Class<T9> type9, String arg9name, Class<T10> type10, String arg10name){
    return new Query10DefImpl<>(VIEW_BUILDER, pkg, name, type1, arg1name, type2, arg2name, type3, arg3name, type4, arg4name, type5, arg5name, type6, arg6name, type7, arg7name, type8, arg8name, type9, arg9name, type10, arg10name);
}",java:S119,
"@Override
public Iterable<Row> firstOrLast(boolean first, ExecutionContext<Row> ectx, ColocationGroup grp, @Nullable ImmutableBitSet requiredColumns){
    throw new IgniteException(""Taking first or last value is not implemented for system view index."");
}",java:S119,
"public static OrderedQueryable<T> thenBy(OrderedQueryable<T> source, FunctionExpression<Function1<T, TKey>> keySelector, Comparator<TKey> comparator){
    throw Extensions.todo();
}",java:S119,
"public static Enumerable<TResult> selectMany(final Enumerable<TSource> source, final Function2<TSource, Integer, Enumerable<TCollection>> collectionSelector, final Function2<TSource, TCollection, TResult> resultSelector){
    return new AbstractEnumerable<TResult>() {

        @Override
        public Enumerator<TResult> enumerator() {
            return new Enumerator<TResult>() {

                int index = -1;

                Enumerator<TSource> sourceEnumerator = source.enumerator();

                Enumerator<TCollection> collectionEnumerator = Linq4j.emptyEnumerator();

                Enumerator<TResult> resultEnumerator = Linq4j.emptyEnumerator();

                @Override
                public TResult current() {
                    return resultEnumerator.current();
                }

                @Override
                public boolean moveNext() {
                    for (; ; ) {
                        if (resultEnumerator.moveNext()) {
                            return true;
                        }
                        if (!sourceEnumerator.moveNext()) {
                            return false;
                        }
                        index += 1;
                        final TSource sourceElement = sourceEnumerator.current();
                        collectionEnumerator = collectionSelector.apply(sourceElement, index).enumerator();
                        resultEnumerator = new TransformedEnumerator<TCollection, TResult>(collectionEnumerator) {

                            @Override
                            protected TResult transform(TCollection collectionElement) {
                                return resultSelector.apply(sourceElement, collectionElement);
                            }
                        };
                    }
                }

                @Override
                public void reset() {
                    sourceEnumerator.reset();
                    resultEnumerator = Linq4j.emptyEnumerator();
                }

                @Override
                public void close() {
                    sourceEnumerator.close();
                    resultEnumerator.close();
                }
            };
        }
    };
}",java:S119,
"private static Supplier<Accumulator<Row>> sumEmptyIsZeroFactory(AggregateCall call, RowHandler<Row> hnd){
    switch(call.type.getSqlTypeName()) {
        case ANY:
            throw new UnsupportedOperationException(""SUM() is not supported for type '"" + call.type + ""'."");
        case BIGINT:
        case DECIMAL:
            return () -> new DecimalSumEmptyIsZero<>(call, hnd);
        case DOUBLE:
        case REAL:
        case FLOAT:
            return () -> new DoubleSumEmptyIsZero<>(call, hnd);
        case TINYINT:
        case SMALLINT:
        case INTEGER:
        default:
            return () -> new LongSumEmptyIsZero<>(call, hnd);
    }
}",java:S119,
"public static long sum(Enumerable<TSource> source, LongFunction1<TSource> selector){
    return aggregate(source.select(adapt(selector)), 0L, Extensions.LONG_SUM);
}",java:S119,
"@Override
public Queryable<TResult> selectMany(Queryable<T> source, FunctionExpression<Function1<T, Enumerable<TResult>>> selector){
    throw new UnsupportedOperationException();
}",java:S119,
"private static void storeByOffset(IO io, long pageAddr, int off, DefragIndexRowImpl row){
    int payloadSize = io.inlineSize();
    assert row.link() != 0;
    PageUtils.putBytes(pageAddr, off, row.values);
    IORowHandler.store(pageAddr, off + payloadSize, row, io.storeMvccInfo());
}",java:S119,
"public static TSource last(Enumerable<TSource> enumerable){
    final ListEnumerable<TSource> list = enumerable instanceof ListEnumerable ? ((ListEnumerable<TSource>) enumerable) : null;
    if (list != null) {
        final List<TSource> rawList = list.toList();
        final int count = rawList.size();
        if (count > 0) {
            return rawList.get(count - 1);
        }
    } else {
        try (Enumerator<TSource> os = enumerable.enumerator()) {
            if (os.moveNext()) {
                TSource result;
                do {
                    result = os.current();
                } while (os.moveNext());
                return result;
            }
        }
    }
    throw new NoSuchElementException();
}",java:S119,
"private ReqT interceptMessage(MethodDescriptor<ReqT, RespT> method, ReqT message){
    InputStream is = method.getRequestMarshaller().stream(message);
    int bytes;
    try {
        bytes = is.available();
    } catch (IOException e) {
        log.warn(""Encountered exceptions in getting available bytes of message"", e);
        throw new RuntimeException(""Encountered exception in intercepting message"", e);
    }
    ByteBuf buffer = PooledByteBufAllocator.DEFAULT.buffer();
    try {
        buffer.writeBytes(is, bytes);
    } catch (IOException e) {
        log.warn(""Encountered exceptions in transferring bytes to the buffer"", e);
        buffer.release();
        throw new RuntimeException(""Encountered exceptions in transferring bytes to the buffer"", e);
    }
    return method.getRequestMarshaller().parse(new ByteBufInputStream(buffer, true));
}",java:S119,
" static ResponseTransformer<ResponseT, ResponseBytes<ResponseT>> toBytes(){
    return (response, inputStream) -> {
        try {
            InterruptMonitor.checkInterrupted();
            return ResponseBytes.fromByteArrayUnsafe(response, IoUtils.toByteArray(inputStream));
        } catch (IOException e) {
            throw RetryableException.builder().message(""Failed to read response."").cause(e).build();
        }
    };
}",java:S119,
"@Override
public Queryable<TResult> selectN(FunctionExpression<Function2<T, Integer, TResult>> selector){
    return EnumerableDefaults.select(getThis(), selector.getFunction()).asQueryable();
}",java:S119,
"public static OrderedEnumerable<TSource> createOrderedEnumerable(OrderedEnumerable<TSource> source, Function1<TSource, TKey> keySelector, Comparator<TKey> comparator, boolean descending){
    throw Extensions.todo();
}",java:S119,
"@Override
public OrderedQueryable<T> thenByDescending(final OrderedQueryable<T> source, final FunctionExpression<Function1<T, TKey>> keySelector, final Comparator<TKey> comparator){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.thenByDescending(source, keySelector, comparator);
        }
    };
}",java:S119,
"@Override
public Map<TKey, T> toMap(Function1<T, TKey> keySelector, EqualityComparer<TKey> comparer){
    return EnumerableDefaults.toMap(getThis(), keySelector, comparer);
}",java:S119,
"@Override
public Queryable<TResult> zip(Queryable<T> source, Enumerable<T1> source1, FunctionExpression<Function2<T, T1, TResult>> resultSelector){
    throw new UnsupportedOperationException();
}",java:S119,
"public static Enumerable<TSource> skipWhile(final Enumerable<TSource> source, final Predicate2<TSource, Integer> predicate){
    return new AbstractEnumerable<TSource>() {

        @Override
        public Enumerator<TSource> enumerator() {
            return new SkipWhileEnumerator<>(source.enumerator(), predicate);
        }
    };
}",java:S119,
"@Override
public Queryable<TResult> groupJoin(final Queryable<T> source, final Enumerable<TInner> inner, final FunctionExpression<Function1<T, TKey>> outerKeySelector, final FunctionExpression<Function1<TInner, TKey>> innerKeySelector, final FunctionExpression<Function2<T, Enumerable<TInner>, TResult>> resultSelector, final EqualityComparer<TKey> comparer){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.groupJoin(source, inner, outerKeySelector, innerKeySelector, resultSelector, comparer);
        }
    }.castQueryable();
}",java:S119,
"public static Function1<TSource, TSource> identitySelector(){
    return (Function1) Function1.IDENTITY;
}",java:S119,
"public static void store(IO dstIo, long dstPageAddr, int dstIdx, BPlusIO<MetastorageRow> srcIo, long srcPageAddr, int srcIdx){
    int srcOff = srcIo.offset(srcIdx);
    int dstOff = dstIo.offset(dstIdx);
    GridUnsafe.copyMemory(srcPageAddr + srcOff, dstPageAddr + dstOff, MetastorageTree.MAX_KEY_LEN + 10);
}",java:S119,
"public static OrderedEnumerable<TSource> thenByDescending(OrderedEnumerable<TSource> source, Function1<TSource, TKey> keySelector){
    return createOrderedEnumerable(source, keySelector, Extensions.comparableComparator(), true);
}",java:S119,
"public static Enumerable<TSource> except(Enumerable<TSource> source0, Enumerable<TSource> source1, boolean all){
    Collection<TSource> collection = all ? HashMultiset.create() : new HashSet<>();
    source0.into(collection);
    try (Enumerator<TSource> os = source1.enumerator()) {
        while (os.moveNext()) {
            TSource o = os.current();
            @SuppressWarnings(""argument.type.incompatible"")
            boolean unused = collection.remove(o);
        }
        return Linq4j.asEnumerable(collection);
    }
}",java:S119,
"@Override
public OrderedQueryable<T> orderBy(FunctionExpression<Function1<T, TKey>> keySelector){
    return EnumerableDefaults.asOrderedQueryable(EnumerableDefaults.orderBy(getThis(), keySelector.getFunction()));
}",java:S119,
"@Override
public Queryable<TResult> groupBy(FunctionExpression<Function1<T, TKey>> keySelector, FunctionExpression<Function1<T, TElement>> elementSelector, FunctionExpression<Function2<TKey, Enumerable<TElement>, TResult>> resultSelector, EqualityComparer<TKey> comparer){
    return factory.groupBy(getThis(), keySelector, elementSelector, resultSelector, comparer);
}",java:S119,
"@Nullable
public static TResult min(Enumerable<TSource> source, Function1<TSource, TResult> selector){
    Function2<TResult, TResult, TResult> min = minFunction();
    return aggregate(source.select(selector), null, min);
}",java:S119,
"@Override
public Queryable<TResult> zip(Enumerable<T1> source1, FunctionExpression<Function2<T, T1, TResult>> resultSelector){
    return EnumerableDefaults.zip(getThis(), source1, resultSelector.getFunction()).asQueryable();
}",java:S119,
"private BiConsumer<ReturnT, Throwable> redirectToCrossRegionIfRedirectException(Function<T, CompletableFuture<ReturnT>> operation, T userAgentUpdatedRequest, String bucketName, CompletableFuture<ReturnT> returnFuture){
    return (response, throwable) -> {
        if (throwable != null) {
            if (isS3RedirectException(throwable)) {
                bucketToRegionCache.remove(bucketName);
                requestWithCrossRegion(userAgentUpdatedRequest, operation, bucketName, returnFuture, throwable);
            } else {
                returnFuture.completeExceptionally(throwable);
            }
        } else {
            returnFuture.complete(response);
        }
    };
}",java:S119,
"public static Enumerable<TResult> hashJoin(Enumerable<TSource> outer, Enumerable<TInner> inner, Function1<TSource, TKey> outerKeySelector, Function1<TInner, TKey> innerKeySelector, Function2<TSource, TInner, TResult> resultSelector, @Nullable EqualityComparer<TKey> comparer, boolean generateNullsOnLeft, boolean generateNullsOnRight, @Nullable Predicate2<TSource, TInner> predicate){
    if (predicate == null) {
        return hashEquiJoin_(outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer, generateNullsOnLeft, generateNullsOnRight);
    } else {
        return hashJoinWithPredicate_(outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer, generateNullsOnLeft, generateNullsOnRight, predicate);
    }
}",java:S119,
"@Override
public Enumerable<TResult> select(Function1<T, TResult> selector){
    return EnumerableDefaults.select(getThis(), selector);
}",java:S119,
"public static Enumerable<TResult> correlateBatchJoin(final JoinType joinType, final Enumerable<TSource> outer, final Function1<List<TSource>, Enumerable<TInner>> inner, final Function2<TSource, TInner, TResult> resultSelector, final Predicate2<TSource, TInner> predicate, final int batchSize){
    return new AbstractEnumerable<TResult>() {

        @Override
        public Enumerator<TResult> enumerator() {
            return new Enumerator<TResult>() {

                final Enumerator<TSource> outerEnumerator = outer.enumerator();

                final List<TSource> outerValues = new ArrayList<>(batchSize);

                final List<TInner> innerValues = new ArrayList<>();

                @Nullable
                TSource outerValue;

                @Nullable
                TInner innerValue;

                @Nullable
                Enumerable<TInner> innerEnumerable;

                @Nullable
                Enumerator<TInner> innerEnumerator;

                boolean innerEnumHasNext = false;

                boolean atLeastOneResult = false;

                int i = -1;

                int j = -1;

                @SuppressWarnings(""argument.type.incompatible"")
                @Override
                public TResult current() {
                    return resultSelector.apply(outerValue, innerValue);
                }

                @Override
                public boolean moveNext() {
                    while (true) {
                        if (i == outerValues.size() || i == -1) {
                            i = 0;
                            j = 0;
                            outerValues.clear();
                            innerValues.clear();
                            while (outerValues.size() < batchSize && outerEnumerator.moveNext()) {
                                TSource tSource = outerEnumerator.current();
                                outerValues.add(tSource);
                            }
                            if (outerValues.isEmpty()) {
                                return false;
                            }
                            innerEnumerable = inner.apply(new AbstractList<TSource>() {

                                @Override
                                public TSource get(final int index) {
                                    return index < outerValues.size() ? outerValues.get(index) : outerValues.get(0);
                                }

                                @Override
                                public int size() {
                                    return batchSize;
                                }
                            });
                            if (innerEnumerable == null) {
                                innerEnumerable = Linq4j.emptyEnumerable();
                            }
                            innerEnumerator = innerEnumerable.enumerator();
                            innerEnumHasNext = innerEnumerator.moveNext();
                            if (!innerEnumHasNext && (joinType == JoinType.SEMI || joinType == JoinType.INNER)) {
                                i = outerValues.size();
                                continue;
                            }
                        }
                        if (innerHasNext()) {
                            outerValue = outerValues.get(i);
                            nextInnerValue();
                            if (predicate.apply(castNonNull(outerValue), castNonNull(innerValue))) {
                                atLeastOneResult = true;
                                if (joinType == JoinType.ANTI || joinType == JoinType.SEMI) {
                                    if (i == 0) {
                                        Enumerator<TInner> innerEnumerator = requireNonNull(this.innerEnumerator);
                                        while (innerEnumHasNext) {
                                            innerValues.add(innerEnumerator.current());
                                            innerEnumHasNext = innerEnumerator.moveNext();
                                        }
                                    } else {
                                        j = innerValues.size();
                                    }
                                    if (joinType == JoinType.ANTI) {
                                        continue;
                                    }
                                }
                                return true;
                            }
                        } else {
                            if (!atLeastOneResult && (joinType == JoinType.LEFT || joinType == JoinType.ANTI)) {
                                outerValue = outerValues.get(i);
                                innerValue = null;
                                nextOuterValue();
                                return true;
                            }
                            nextOuterValue();
                        }
                    }
                }

                public void nextOuterValue() {
                    i++;
                    j = 0;
                    atLeastOneResult = false;
                }

                private void nextInnerValue() {
                    if (i == 0) {
                        Enumerator<TInner> innerEnumerator = requireNonNull(this.innerEnumerator);
                        innerValue = innerEnumerator.current();
                        innerValues.add(innerValue);
                        innerEnumHasNext = innerEnumerator.moveNext();
                    } else {
                        innerValue = innerValues.get(j++);
                    }
                }

                private boolean innerHasNext() {
                    return i == 0 ? innerEnumHasNext : j < innerValues.size();
                }

                @Override
                public void reset() {
                    outerEnumerator.reset();
                    innerValue = null;
                    outerValue = null;
                    outerValues.clear();
                    innerValues.clear();
                    atLeastOneResult = false;
                    i = -1;
                }

                @Override
                public void close() {
                    outerEnumerator.close();
                    if (innerEnumerator != null) {
                        innerEnumerator.close();
                    }
                    outerValue = null;
                    innerValue = null;
                }
            };
        }
    };
}",java:S119,
"public static ConsequenceBuilder._11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> on(Variable<T1> arg1, Variable<T2> arg2, Variable<T3> arg3, Variable<T4> arg4, Variable<T5> arg5, Variable<T6> arg6, Variable<T7> arg7, Variable<T8> arg8, Variable<T9> arg9, Variable<T10> arg10, Variable<T11> arg11){
    return new ConsequenceBuilder._11(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
}",java:S119,
"@NotNull
public static MergeJoinNode<Row> create(ExecutionContext<Row> ctx, RelDataType outputRowType, RelDataType leftRowType, RelDataType rightRowType, JoinRelType joinType, Comparator<Row> comp){
    switch(joinType) {
        case INNER:
            return new InnerJoin<>(ctx, outputRowType, comp);
        case LEFT:
            {
                RowHandler.RowFactory<Row> rightRowFactory = ctx.rowHandler().factory(ctx.getTypeFactory(), rightRowType);
                return new LeftJoin<>(ctx, outputRowType, comp, rightRowFactory);
            }
        case RIGHT:
            {
                RowHandler.RowFactory<Row> leftRowFactory = ctx.rowHandler().factory(ctx.getTypeFactory(), leftRowType);
                return new RightJoin<>(ctx, outputRowType, comp, leftRowFactory);
            }
        case FULL:
            {
                RowHandler.RowFactory<Row> leftRowFactory = ctx.rowHandler().factory(ctx.getTypeFactory(), leftRowType);
                RowHandler.RowFactory<Row> rightRowFactory = ctx.rowHandler().factory(ctx.getTypeFactory(), rightRowType);
                return new FullOuterJoin<>(ctx, outputRowType, comp, leftRowFactory, rightRowFactory);
            }
        case SEMI:
            return new SemiJoin<>(ctx, outputRowType, comp);
        case ANTI:
            return new AntiJoin<>(ctx, outputRowType, comp);
        default:
            throw new IllegalStateException(""Join type \"""" + joinType + ""\"" is not supported yet"");
    }
}",java:S119,
"public static Enumerable<TResult> groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector, Function1<TSource, TElement> elementSelector, final Function2<TKey, Enumerable<TElement>, TResult> resultSelector, EqualityComparer<TKey> comparer){
    return enumerable.toLookup(keySelector, elementSelector, comparer).select(group -> resultSelector.apply(group.getKey(), group));
}",java:S119,
"@Override
public Queryable<TResult> selectMany(FunctionExpression<Function2<T, Integer, Enumerable<TCollection>>> collectionSelector, FunctionExpression<Function2<T, TCollection, TResult>> resultSelector){
    return factory.selectMany(getThis(), collectionSelector, resultSelector);
}",java:S119,
"public static SimpleDataset<EmptyContext> createSimpleDataset(Ignite ignite, IgniteCache<K, V> upstreamCache, Preprocessor<K, V> featureExtractor){
    return createSimpleDataset(new CacheBasedDatasetBuilder<>(ignite, upstreamCache), LearningEnvironmentBuilder.defaultBuilder(), featureExtractor);
}",java:S119,
"@Override
public TResult min(FunctionExpression<Function1<T, TResult>> selector){
    return factory.min(getThis(), selector);
}",java:S119,
"private ModifyTuple mergeTuple(Row row, List<String> updateColList, ExecutionContext<Row> ectx) throws IgniteCheckedException{
    RowHandler<Row> hnd = ectx.rowHandler();
    int rowColumnsCnt = hnd.columnCount(row);
    if (rowColumnsCnt == descriptors.length)
        return insertTuple(row, ectx);
    else if (rowColumnsCnt == descriptors.length + updateColList.size())
        return updateTuple(row, updateColList, 0, ectx);
    else {
        assert rowColumnsCnt == descriptors.length * 2 + updateColList.size() : ""Unexpected columns count: "" + rowColumnsCnt;
        int updateOffset = descriptors.length;
        if (hnd.get(updateOffset + QueryUtils.KEY_COL, row) != null)
            return updateTuple(row, updateColList, updateOffset, ectx);
        else
            return insertTuple(row, ectx);
    }
}",java:S119,
"public static boolean sequenceEqual(Enumerable<TSource> first, Enumerable<TSource> second, @Nullable EqualityComparer<TSource> comparer){
    requireNonNull(first, ""first"");
    requireNonNull(second, ""second"");
    if (comparer == null) {
        comparer = new EqualityComparer<TSource>() {

            @Override
            public boolean equal(TSource v1, TSource v2) {
                return Objects.equals(v1, v2);
            }

            @Override
            public int hashCode(TSource tSource) {
                return Objects.hashCode(tSource);
            }
        };
    }
    final CollectionEnumerable<TSource> firstCollection = first instanceof CollectionEnumerable ? ((CollectionEnumerable<TSource>) first) : null;
    if (firstCollection != null) {
        final CollectionEnumerable<TSource> secondCollection = second instanceof CollectionEnumerable ? ((CollectionEnumerable<TSource>) second) : null;
        if (secondCollection != null) {
            if (firstCollection.getCollection().size() != secondCollection.getCollection().size()) {
                return false;
            }
        }
    }
    try (Enumerator<TSource> os1 = first.enumerator();
        Enumerator<TSource> os2 = second.enumerator()) {
        while (os1.moveNext()) {
            if (!(os2.moveNext() && comparer.equal(os1.current(), os2.current()))) {
                return false;
            }
        }
        return !os2.moveNext();
    }
}",java:S119,
"@Override
public Queryable<TResult> ofType(Queryable<T> source, Class<TResult> clazz){
    throw new UnsupportedOperationException();
}",java:S119,
"private void fetchRegionAndSendRequest(T request, Function<T, CompletableFuture<ReturnT>> operation, String bucketName, CompletableFuture<ReturnT> returnFuture){
    ((S3AsyncClient) delegate()).headBucket(b -> b.bucket(bucketName)).whenComplete((response, throwable) -> {
        if (throwable != null) {
            if (isS3RedirectException(throwable)) {
                bucketToRegionCache.remove(bucketName);
                Optional<String> bucketRegion = getBucketRegionFromException((S3Exception) throwable.getCause());
                if (bucketRegion.isPresent()) {
                    sendRequestWithRightRegion(request, operation, bucketName, returnFuture, bucketRegion.get());
                } else {
                    returnFuture.completeExceptionally(throwable);
                }
            } else {
                returnFuture.completeExceptionally(throwable);
            }
        }
    });
}",java:S119,
"public static SimpleLabeledDataset<C> createSimpleLabeledDataset(Ignite ignite, IgniteCache<K, V> upstreamCache, LearningEnvironmentBuilder envBuilder, PartitionContextBuilder<K, V, C> partCtxBuilder, Preprocessor<K, V> vectorizer){
    return createSimpleLabeledDataset(new CacheBasedDatasetBuilder<>(ignite, upstreamCache), envBuilder, partCtxBuilder, vectorizer);
}",java:S119,
"public static Enumerable<T2> cast(final Enumerable<TSource> source, final Class<T2> clazz){
    return new AbstractEnumerable<T2>() {

        @Override
        public Enumerator<T2> enumerator() {
            return new CastingEnumerator<>(source.enumerator(), clazz);
        }
    };
}",java:S119,
"public static ConsequenceBuilder._20<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> on(Variable<T1> arg1, Variable<T2> arg2, Variable<T3> arg3, Variable<T4> arg4, Variable<T5> arg5, Variable<T6> arg6, Variable<T7> arg7, Variable<T8> arg8, Variable<T9> arg9, Variable<T10> arg10, Variable<T11> arg11, Variable<T12> arg12, Variable<T13> arg13, Variable<T14> arg14, Variable<T15> arg15, Variable<T16> arg16, Variable<T17> arg17, Variable<T18> arg18, Variable<T19> arg19, Variable<T20> arg20){
    return new ConsequenceBuilder._20(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20);
}",java:S119,
"public static Enumerable<TSource> intersect(Enumerable<TSource> source0, Enumerable<TSource> source1, boolean all){
    Collection<TSource> set1 = all ? HashMultiset.create() : new HashSet<>();
    source1.into(set1);
    Collection<TSource> resultCollection = all ? HashMultiset.create() : new HashSet<>();
    try (Enumerator<TSource> os = source0.enumerator()) {
        while (os.moveNext()) {
            TSource o = os.current();
            @SuppressWarnings(""argument.type.incompatible"")
            boolean removed = set1.remove(o);
            if (removed) {
                resultCollection.add(o);
            }
        }
    }
    return Linq4j.asEnumerable(resultCollection);
}",java:S119,
"public static boolean sequenceEqual(Enumerable<TSource> first, Enumerable<TSource> second){
    return sequenceEqual(first, second, null);
}",java:S119,
"public static Enumerable<TSource> orderBy(Enumerable<TSource> source, Function1<TSource, TKey> keySelector, Comparator<TKey> comparator, int offset, int fetch){
    return new AbstractEnumerable<TSource>() {

        @Override
        public Enumerator<TSource> enumerator() {
            if (fetch == 0) {
                return Linq4j.emptyEnumerator();
            }
            TreeMap<TKey, List<TSource>> map = new TreeMap<>(comparator);
            long size = 0;
            long needed = fetch + (long) offset;
            try (Enumerator<TSource> os = source.enumerator()) {
                while (os.moveNext()) {
                    TSource o = os.current();
                    TKey key = keySelector.apply(o);
                    if (needed >= 0 && size >= needed) {
                        @KeyFor(""map"")
                        TKey lastKey = map.lastKey();
                        if (comparator.compare(key, lastKey) >= 0) {
                            continue;
                        }
                        @SuppressWarnings(""argument.type.incompatible"")
                        List<TSource> l = map.get(lastKey);
                        if (l.size() == 1) {
                            map.remove(lastKey);
                        } else {
                            l.remove(l.size() - 1);
                        }
                        size--;
                    }
                    map.compute(key, (k, l) -> {
                        if (l == null) {
                            return Collections.singletonList(o);
                        }
                        if (l.size() == 1) {
                            l = new ArrayList<>(l);
                        }
                        l.add(o);
                        return l;
                    });
                    size++;
                }
            }
            if (offset > 0) {
                int skipped = 0;
                TKey until = (TKey) DUMMY;
                for (Map.Entry<TKey, List<TSource>> e : map.entrySet()) {
                    skipped += e.getValue().size();
                    if (skipped > offset) {
                        List<TSource> l = e.getValue();
                        int toKeep = skipped - offset;
                        if (toKeep < l.size()) {
                            l.subList(0, l.size() - toKeep).clear();
                        }
                        until = e.getKey();
                        break;
                    }
                }
                if (until == DUMMY) {
                    return Linq4j.emptyEnumerator();
                }
                map.headMap(until, false).clear();
            }
            return new LookupImpl<>(map).valuesEnumerable().enumerator();
        }
    };
}",java:S119,
"public Pair<TypeT, Map<String, String>> unmarshall(SdkPojo sdkPojo, SdkHttpFullResponse response){
    if (responsePayloadIsBlob(sdkPojo)) {
        XmlElement document = XmlElement.builder().textContent(response.content().map(s -> invokeSafely(() -> IoUtils.toUtf8String(s))).orElse("""")).build();
        return Pair.of(unmarshall(sdkPojo, document, response), new HashMap<>());
    }
    XmlElement document = response.content().map(XmlDomParser::parse).orElseGet(XmlElement::empty);
    XmlElement resultRoot = hasResultWrapper ? document.getFirstChild() : document;
    return Pair.of(unmarshall(sdkPojo, resultRoot, response), parseMetadata(document));
}",java:S119,
"public IgniteBiInClosure<UUID, ? super Msg> cacheHandler(int hndId, Class<? extends GridCacheMessage> msgCls){
    RegularClassHandler clsHnd = cacheHandlers.clsHandlers.get(new ListenerKey(hndId, msgCls));
    return (clsHnd != null) ? clsHnd.hnd : null;
}",java:S119,
"public static AP newAnyPanel(final String panelClass, final String id, final AnyTypeTO anyTypeTO, final RealmTO realmTO, final AnyLayout anyLayout, final boolean enableSearch, final AnyPanel.DirectoryPanelSupplier directoryPanelSupplier, final PageReference pageRef){
    try {
        @SuppressWarnings(""unchecked"")
        Class<AP> clazz = (Class<AP>) ClassUtils.forName(panelClass, ClassUtils.getDefaultClassLoader());
        return clazz.getConstructor(String.class, AnyTypeTO.class, RealmTO.class, AnyLayout.class, boolean.class, AnyPanel.DirectoryPanelSupplier.class, PageReference.class).newInstance(id, anyTypeTO, realmTO, anyLayout, enableSearch, directoryPanelSupplier, pageRef);
    } catch (Exception e) {
        throw new IllegalArgumentException(""Could not instantiate "" + panelClass, e);
    }
}",java:S119,
"public static Enumerable<TSource> antiJoin(final Enumerable<TSource> outer, final Enumerable<TInner> inner, final Function1<TSource, TKey> outerKeySelector, final Function1<TInner, TKey> innerKeySelector, final EqualityComparer<TKey> comparer, final Predicate2<TSource, TInner> nonEquiPredicate){
    return semiJoin(outer, inner, outerKeySelector, innerKeySelector, comparer, true, nonEquiPredicate);
}",java:S119,
"@Override
public Enumerable<TResult> applyResultSelector(final Function2<K, Enumerable<V>, TResult> resultSelector){
    return new AbstractEnumerable<TResult>() {

        @Override
        public Enumerator<TResult> enumerator() {
            final Enumerator<Grouping<K, V>> groupingEnumerator = LookupImpl.this.enumerator();
            return new Enumerator<TResult>() {

                @Override
                public TResult current() {
                    final Grouping<K, V> grouping = groupingEnumerator.current();
                    return resultSelector.apply(grouping.getKey(), grouping);
                }

                @Override
                public boolean moveNext() {
                    return groupingEnumerator.moveNext();
                }

                @Override
                public void reset() {
                    groupingEnumerator.reset();
                }

                @Override
                public void close() {
                    groupingEnumerator.close();
                }
            };
        }
    };
}",java:S119,
"public static Queryable<TResult> selectManyN(Queryable<T> source, FunctionExpression<Function1<T, Enumerable<TCollection>>> collectionSelector, FunctionExpression<Function2<T, TCollection, TResult>> resultSelector){
    throw Extensions.todo();
}",java:S119,
"public static BiConsumer<SuccessT, ? super Throwable> asyncPromiseNotifyingBiConsumer(BiConsumer<SuccessT, Promise<PromiseT>> successConsumer, Promise<PromiseT> promise){
    return (success, fail) -> {
        if (fail != null) {
            promise.setFailure(fail);
        } else {
            try {
                successConsumer.accept(success, promise);
            } catch (Throwable e) {
                promise.setFailure(e);
            }
        }
    };
}",java:S119,
"@Override
public OrderedQueryable<T> thenBy(FunctionExpression<Function1<T, TKey>> keySelector, Comparator<TKey> comparator){
    return QueryableDefaults.thenBy(asOrderedQueryable(), keySelector, comparator);
}",java:S119,
"public static Enumerable<TResult> tumbling(Enumerable<TSource> inputEnumerable, Function1<TSource, TResult> outSelector){
    return new AbstractEnumerable<TResult>() {

        @Override
        public Enumerator<TResult> enumerator() {
            return new Enumerator<TResult>() {

                final Enumerator<TSource> inputs = inputEnumerable.enumerator();

                @Override
                public TResult current() {
                    return outSelector.apply(inputs.current());
                }

                @Override
                public boolean moveNext() {
                    return inputs.moveNext();
                }

                @Override
                public void reset() {
                    inputs.reset();
                }

                @Override
                public void close() {
                    inputs.close();
                }
            };
        }
    };
}",java:S119,
"@Override
public Iterable<Row> scan(ExecutionContext<Row> execCtx, ColocationGroup grp, RangeIterable<Row> ranges, @Nullable ImmutableBitSet requiredColumns){
    UUID locNodeId = execCtx.localNodeId();
    if (grp.nodeIds().contains(locNodeId) && idx != null) {
        return new IndexScan<>(execCtx, tbl.descriptor(), idx.unwrap(InlineIndex.class), collation.getKeys(), grp.partitions(locNodeId), ranges, requiredColumns);
    }
    return Collections.emptyList();
}",java:S119,
" static MH compile(String className, String generatedCode, Class<MH> handlerClass, List<? extends Object> argList) throws CompileException, IOException{
    final ICompilerFactory compilerFactory;
    ClassLoader classLoader = Objects.requireNonNull(JaninoRelMetadataProvider.class.getClassLoader(), ""classLoader"");
    try {
        compilerFactory = CompilerFactoryFactory.getDefaultCompilerFactory(classLoader);
    } catch (Exception e) {
        throw new IllegalStateException(""Unable to instantiate java compiler"", e);
    }
    final ISimpleCompiler compiler = compilerFactory.newSimpleCompiler();
    compiler.setParentClassLoader(JaninoRexCompiler.class.getClassLoader());
    if (CalciteSystemProperty.DEBUG.value()) {
        compiler.setDebuggingInformation(true, true, true);
        System.out.println(generatedCode);
    }
    compiler.cook(generatedCode);
    final Constructor constructor;
    final Object o;
    try {
        constructor = compiler.getClassLoader().loadClass(className).getDeclaredConstructors()[0];
        o = constructor.newInstance(argList.toArray());
    } catch (InstantiationException | IllegalAccessException | InvocationTargetException | ClassNotFoundException e) {
        throw new RuntimeException(e);
    }
    return handlerClass.cast(o);
}",java:S119,
"public static int average(Enumerable<TSource> source, IntegerFunction1<TSource> selector){
    return sum(source, selector) / count(source);
}",java:S119,
"public static ConsequenceBuilder._18<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> on(Variable<T1> arg1, Variable<T2> arg2, Variable<T3> arg3, Variable<T4> arg4, Variable<T5> arg5, Variable<T6> arg6, Variable<T7> arg7, Variable<T8> arg8, Variable<T9> arg9, Variable<T10> arg10, Variable<T11> arg11, Variable<T12> arg12, Variable<T13> arg13, Variable<T14> arg14, Variable<T15> arg15, Variable<T16> arg16, Variable<T17> arg17, Variable<T18> arg18){
    return new ConsequenceBuilder._18(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18);
}",java:S119,
"@Override
public Row toRow(ExecutionContext<Row> ectx, ViewRow row, RowHandler.RowFactory<Row> factory, @Nullable ImmutableBitSet requiredColumns){
    RowHandler<Row> hnd = factory.handler();
    assert hnd == ectx.rowHandler();
    Row res = factory.create();
    assert hnd.columnCount(res) == (requiredColumns == null ? descriptors.length : requiredColumns.cardinality());
    sysView.walker().visitAll(row, new SystemViewRowAttributeWalker.AttributeWithValueVisitor() {

        private int colIdx;

        @Override
        public <T> void accept(int idx, String name, Class<T> clazz, T val) {
            if (requiredColumns == null || requiredColumns.get(idx))
                hnd.set(colIdx++, res, TypeUtils.toInternal(ectx, val, descriptors[idx].storageType()));
        }

        @Override
        public void acceptBoolean(int idx, String name, boolean val) {
            accept(idx, name, Boolean.class, val);
        }

        @Override
        public void acceptChar(int idx, String name, char val) {
            accept(idx, name, Character.class, val);
        }

        @Override
        public void acceptByte(int idx, String name, byte val) {
            accept(idx, name, Byte.class, val);
        }

        @Override
        public void acceptShort(int idx, String name, short val) {
            accept(idx, name, Short.class, val);
        }

        @Override
        public void acceptInt(int idx, String name, int val) {
            accept(idx, name, Integer.class, val);
        }

        @Override
        public void acceptLong(int idx, String name, long val) {
            accept(idx, name, Long.class, val);
        }

        @Override
        public void acceptFloat(int idx, String name, float val) {
            accept(idx, name, Float.class, val);
        }

        @Override
        public void acceptDouble(int idx, String name, double val) {
            accept(idx, name, Double.class, val);
        }
    });
    return res;
}",java:S119,
"public static Enumerable<TResult> groupJoin(final Enumerable<TSource> outer, final Enumerable<TInner> inner, final Function1<TSource, TKey> outerKeySelector, final Function1<TInner, TKey> innerKeySelector, final Function2<TSource, Enumerable<TInner>, TResult> resultSelector){
    return new AbstractEnumerable<TResult>() {

        final Map<TKey, TSource> outerMap = outer.toMap(outerKeySelector);

        final Lookup<TKey, TInner> innerLookup = inner.toLookup(innerKeySelector);

        final Enumerator<Map.Entry<TKey, TSource>> entries = Linq4j.enumerator(outerMap.entrySet());

        @Override
        public Enumerator<TResult> enumerator() {
            return new Enumerator<TResult>() {

                @Override
                public TResult current() {
                    final Map.Entry<TKey, TSource> entry = entries.current();
                    @SuppressWarnings(""argument.type.incompatible"")
                    final Enumerable<TInner> inners = innerLookup.get(entry.getKey());
                    return resultSelector.apply(entry.getValue(), inners == null ? Linq4j.emptyEnumerable() : inners);
                }

                @Override
                public boolean moveNext() {
                    return entries.moveNext();
                }

                @Override
                public void reset() {
                    entries.reset();
                }

                @Override
                public void close() {
                }
            };
        }
    };
}",java:S119,
"@Override
public Destination<Row> destination(ExecutionContext<Row> ctx, AffinityService affSrvc, ColocationGroup target, ImmutableIntList keys){
    throw new AssertionError(""Correlated distribution should be converted to delegate before using"");
}",java:S119,
"public static Long sum(Enumerable<TSource> source, NullableLongFunction1<TSource> selector){
    return aggregate(source.select(selector), 0L, Extensions.LONG_SUM);
}",java:S119,
"public static ConsequenceBuilder._22<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> on(Variable<T1> arg1, Variable<T2> arg2, Variable<T3> arg3, Variable<T4> arg4, Variable<T5> arg5, Variable<T6> arg6, Variable<T7> arg7, Variable<T8> arg8, Variable<T9> arg9, Variable<T10> arg10, Variable<T11> arg11, Variable<T12> arg12, Variable<T13> arg13, Variable<T14> arg14, Variable<T15> arg15, Variable<T16> arg16, Variable<T17> arg17, Variable<T18> arg18, Variable<T19> arg19, Variable<T20> arg20, Variable<T21> arg21, Variable<T22> arg22){
    return new ConsequenceBuilder._22(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22);
}",java:S119,
"@Nullable
public static Long max(Enumerable<TSource> source, NullableLongFunction1<TSource> selector){
    return aggregate(source.select(selector), Extensions.LONG_MAX);
}",java:S119,
" CacheType getCache(String cacheName, Class<CacheType> type){
    return type.cast(getCache(cacheName));
}",java:S119,
"@Override
public TAccumulate aggregate(final Queryable<T> source, final TAccumulate seed, final FunctionExpression<Function2<TAccumulate, T, TAccumulate>> func){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.aggregate(source, seed, func);
        }
    }.castSingle();
}",java:S119,
"public static Queryable<Grouping<TKey, TElement>> groupBy(Queryable<T> queryable, FunctionExpression<Function1<T, TKey>> keySelector, FunctionExpression<Function1<T, TElement>> elementSelector, EqualityComparer comparer){
    throw Extensions.todo();
}",java:S119,
"public static Enumerable<TResult> groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector, final Function2<TKey, Enumerable<TSource>, TResult> resultSelector, EqualityComparer<TKey> comparer){
    return enumerable.toLookup(keySelector, comparer).select(group -> resultSelector.apply(group.getKey(), group));
}",java:S119,
"public static Enumerable<TSource> orderByDescending(Enumerable<TSource> source, Function1<TSource, TKey> keySelector){
    return orderBy(source, keySelector, Collections.reverseOrder());
}",java:S119,
"@Override
public OrderedEnumerable<T> thenBy(Function1<T, TKey> keySelector, Comparator<TKey> comparator){
    return EnumerableDefaults.thenByDescending(getThisOrdered(), keySelector, comparator);
}",java:S119,
"@Override
public Queryable<TResult> groupByK(final Queryable<T> source, final FunctionExpression<Function1<T, TKey>> keySelector, final FunctionExpression<Function2<TKey, Enumerable<T>, TResult>> resultSelector, final EqualityComparer<TKey> comparer){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.groupByK(source, keySelector, resultSelector, comparer);
        }
    }.castQueryable();
}",java:S119,
"@Nullable
public static TSource singleOrDefault(Enumerable<TSource> source, Predicate1<TSource> predicate){
    TSource toRet = null;
    for (TSource s : source) {
        if (predicate.apply(s)) {
            if (toRet != null) {
                return null;
            } else {
                toRet = s;
            }
        }
    }
    return toRet;
}",java:S119,
"public static BigDecimal max(Enumerable<TSource> source, BigDecimalFunction1<TSource> selector){
    return aggregate(source.select(selector), maxFunction());
}",java:S119,
"@Override
public Queryable<TResult> groupJoin(Queryable<T> source, Enumerable<TInner> inner, FunctionExpression<Function1<T, TKey>> outerKeySelector, FunctionExpression<Function1<TInner, TKey>> innerKeySelector, FunctionExpression<Function2<T, Enumerable<TInner>, TResult>> resultSelector){
    throw new UnsupportedOperationException();
}",java:S119,
"@Nullable
public static TSource lastOrDefault(Enumerable<TSource> enumerable){
    final ListEnumerable<TSource> list = enumerable instanceof ListEnumerable ? ((ListEnumerable<TSource>) enumerable) : null;
    if (list != null) {
        final List<TSource> rawList = list.toList();
        final int count = rawList.size();
        if (count > 0) {
            return rawList.get(count - 1);
        }
    } else {
        try (Enumerator<TSource> os = enumerable.enumerator()) {
            if (os.moveNext()) {
                TSource result;
                do {
                    result = os.current();
                } while (os.moveNext());
                return result;
            }
        }
    }
    return null;
}",java:S119,
"@Override
public Enumerable<TResult> groupJoin(Enumerable<TInner> inner, Function1<T, TKey> outerKeySelector, Function1<TInner, TKey> innerKeySelector, Function2<T, Enumerable<TInner>, TResult> resultSelector){
    return EnumerableDefaults.groupJoin(getThis(), inner, outerKeySelector, innerKeySelector, resultSelector);
}",java:S119,
"@Nullable
public static TSource firstOrDefault(Enumerable<TSource> enumerable, Predicate1<TSource> predicate){
    for (TSource o : enumerable) {
        if (predicate.apply(o)) {
            return o;
        }
    }
    return null;
}",java:S119,
"public static long getLink(IO io, long pageAddr, int idx){
    assert idx < io.getCount(pageAddr) : idx;
    return PageUtils.getLong(pageAddr, io.offset(idx));
}",java:S119,
" static JCommander setupCli(String cmdPath, CliSpec<CliFlagsT> spec, Map<String, Command> commandMap){
    JCommander commander = new JCommander();
    commander.setProgramName(cmdPath);
    if (null != spec.flags()) {
        commander.addObject(spec.flags());
    }
    for (Command cmd : spec.commands()) {
        commandMap.put(cmd.name(), cmd);
    }
    StringBuilder usageBuilder = new StringBuilder();
    commander.getUsageFormatter().usage(usageBuilder);
    return commander;
}",java:S119,
"@Override
public Iterable<Row> scan(ExecutionContext<Row> execCtx, ColocationGroup grp, @Nullable ImmutableBitSet usedColumns){
    UUID locNodeId = execCtx.localNodeId();
    if (grp.nodeIds().contains(locNodeId))
        return new TableScan<>(execCtx, desc, grp.partitions(locNodeId), usedColumns);
    return Collections.emptyList();
}",java:S119,
"public static TAccumulate aggregate(Enumerable<TSource> source, TAccumulate seed, Function2<TAccumulate, TSource, TAccumulate> func){
    TAccumulate result = seed;
    try (Enumerator<TSource> os = source.enumerator()) {
        while (os.moveNext()) {
            TSource o = os.current();
            result = func.apply(result, o);
        }
        return result;
    }
}",java:S119,
"public ReturnT apply(BiFunction<LeftT, RightT, ReturnT> function){
    return function.apply(left, right);
}",java:S119,
"@Override
public Queryable<TResult> groupBy(Queryable<T> source, FunctionExpression<Function1<T, TKey>> keySelector, FunctionExpression<Function1<T, TElement>> elementSelector, FunctionExpression<Function2<TKey, Enumerable<TElement>, TResult>> resultSelector){
    throw new UnsupportedOperationException();
}",java:S119,
"public static TResult min(Queryable<T> queryable, FunctionExpression<Function1<T, TResult>> selector){
    throw Extensions.todo();
}",java:S119,
"@Override
public Queryable<TResult> join(final Queryable<T> source, final Enumerable<TInner> inner, final FunctionExpression<Function1<T, TKey>> outerKeySelector, final FunctionExpression<Function1<TInner, TKey>> innerKeySelector, final FunctionExpression<Function2<T, TInner, TResult>> resultSelector, final EqualityComparer<TKey> comparer){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.join(source, inner, outerKeySelector, innerKeySelector, resultSelector, comparer);
        }
    }.castQueryable();
}",java:S119,
"public static Object getFieldFromBiRows(RowHandler<Row> hnd, int offset, Row row1, Row row2){
    return offset < hnd.columnCount(row1) ? hnd.get(offset, row1) : hnd.get(offset - hnd.columnCount(row1), row2);
}",java:S119,
"@Override
public Queryable<TResult> select(final Queryable<T> source, final FunctionExpression<Function1<T, TResult>> selector){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.select(source, selector);
        }

        @Override
        public Type getElementType() {
            return requireNonNull(selector.body, ""selector.body"").type;
        }
    }.castQueryable();
}",java:S119,
"@Override
public Enumerable<TResult> selectMany(Function2<T, Integer, Enumerable<TResult>> selector){
    return EnumerableDefaults.selectMany(getThis(), selector);
}",java:S119,
"@Override
public OrderedQueryable<T> orderByDescending(FunctionExpression<Function1<T, TKey>> keySelector, Comparator<TKey> comparator){
    return factory.orderByDescending(getThis(), keySelector, comparator);
}",java:S119,
"@Override
public ListenableFuture<Final> go(Request request, HttpResponseHandler<Intermediate, Final> httpResponseHandler, Duration duration){
    final SettableFuture<Final> retVal = SettableFuture.create();
    innerGo(request, httpResponseHandler, duration, retVal);
    return retVal;
}",java:S119,
"public static Enumerable<TSource> orderBy(Enumerable<TSource> source, Function1<TSource, TKey> keySelector, @Nullable Comparator<TKey> comparator){
    return new AbstractEnumerable<TSource>() {

        @Override
        public Enumerator<TSource> enumerator() {
            final Map<TKey, List<TSource>> map = new TreeMap<>(comparator);
            final LookupImpl<TKey, TSource> lookup = toLookup_(map, source, keySelector, Functions.identitySelector());
            return lookup.valuesEnumerable().enumerator();
        }
    };
}",java:S119,
"public static CompletableFuture<ReturnT> run(Stream<Long> backoffs, Predicate<Throwable> retryPredicate, Supplier<CompletableFuture<ReturnT>> task, OrderedScheduler scheduler, Object key){
    CompletableFuture<ReturnT> future = FutureUtils.createFuture();
    if (null == key) {
        execute(future, backoffs.iterator(), retryPredicate, task, scheduler, null);
    } else {
        scheduler.executeOrdered(key, () -> {
            execute(future, backoffs.iterator(), retryPredicate, task, scheduler, key);
        });
    }
    return future;
}",java:S119,
"public static Float average(Enumerable<TSource> source, NullableFloatFunction1<TSource> selector){
    return sum(source, selector) / longCount(source);
}",java:S119,
"@Override
public Queryable<Grouping<TKey, T>> groupBy(FunctionExpression<Function1<T, TKey>> keySelector){
    return factory.groupBy(getThis(), keySelector);
}",java:S119,
"@Override
public Queryable<Grouping<TKey, TElement>> groupBy(FunctionExpression<Function1<T, TKey>> keySelector, FunctionExpression<Function1<T, TElement>> elementSelector){
    return factory.groupBy(getThis(), keySelector, elementSelector);
}",java:S119,
"@Override
public Queryable<TResult> join(final Queryable<T> source, final Enumerable<TInner> inner, final FunctionExpression<Function1<T, TKey>> outerKeySelector, final FunctionExpression<Function1<TInner, TKey>> innerKeySelector, final FunctionExpression<Function2<T, TInner, TResult>> resultSelector){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.join(source, inner, outerKeySelector, innerKeySelector, resultSelector);
        }
    }.castQueryable();
}",java:S119,
"public static ResponseBytes<ResponseT> fromInputStream(ResponseT response, InputStream stream) throws UncheckedIOException{
    return new ResponseBytes<>(response, invokeSafely(() -> IoUtils.toByteArray(stream)));
}",java:S119,
"@Override
public Queryable<Grouping<TKey, T>> groupBy(FunctionExpression<Function1<T, TKey>> keySelector){
    return EnumerableDefaults.groupBy(getThis(), keySelector.getFunction()).asQueryable();
}",java:S119,
"public static Map<K, VOutT> mapValues(Map<K, VInT> inputMap, Function<VInT, VOutT> mapper){
    return inputMap.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, e -> mapper.apply(e.getValue())));
}",java:S119,
"public static F newLayoutInfo(final A anyTO, final List<String> anyTypeClasses, final FL anyFormLayout, final PageReference pageRef){
    try {
        if (anyTO instanceof UserTO) {
            return anyFormLayout.getFormClass().getConstructor(anyTO.getClass(), anyTO.getClass(), List.class, anyFormLayout.getClass(), pageRef.getClass()).newInstance(null, anyTO, anyTypeClasses, anyFormLayout, pageRef);
        } else {
            return anyFormLayout.getFormClass().getConstructor(anyTO.getClass(), List.class, anyFormLayout.getClass(), pageRef.getClass()).newInstance(anyTO, anyTypeClasses, anyFormLayout, pageRef);
        }
    } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
        throw new IllegalArgumentException(""Could not instantiate "" + anyFormLayout.getFormClass().getName(), e);
    }
}",java:S119,
"public static Integer average(Enumerable<TSource> source, NullableIntegerFunction1<TSource> selector){
    return sum(source, selector) / count(source);
}",java:S119,
"@Override
public Enumerable<T> orderBy(Function1<T, TKey> keySelector, Comparator<TKey> comparator){
    return EnumerableDefaults.orderBy(getThis(), keySelector, comparator);
}",java:S119,
"private static Enumerable<TResult> groupByMultiple_(final Map<TKey, TAccumulate> map, Enumerable<TSource> enumerable, List<Function1<TSource, TKey>> keySelectors, Function0<TAccumulate> accumulatorInitializer, Function2<TAccumulate, TSource, TAccumulate> accumulatorAdder, final Function2<TKey, TAccumulate, TResult> resultSelector){
    try (Enumerator<TSource> os = enumerable.enumerator()) {
        while (os.moveNext()) {
            for (Function1<TSource, TKey> keySelector : keySelectors) {
                TSource o = os.current();
                TKey key = keySelector.apply(o);
                @SuppressWarnings(""argument.type.incompatible"")
                TAccumulate accumulator = map.get(key);
                if (accumulator == null) {
                    accumulator = accumulatorInitializer.apply();
                    accumulator = accumulatorAdder.apply(accumulator, o);
                    map.put(key, accumulator);
                } else {
                    TAccumulate accumulator0 = accumulator;
                    accumulator = accumulatorAdder.apply(accumulator, o);
                    if (accumulator != accumulator0) {
                        map.put(key, accumulator);
                    }
                }
            }
        }
    }
    return new LookupResultEnumerable<>(map, resultSelector);
}",java:S119,
"@Override
public TAccumulate aggregate(Queryable<T> source, TAccumulate seed, FunctionExpression<Function2<TAccumulate, T, TAccumulate>> selector){
    throw new UnsupportedOperationException();
}",java:S119,
"public static Enumerable<TSource> takeWhile(Enumerable<TSource> source, final Predicate1<TSource> predicate){
    return takeWhile(source, Functions.toPredicate2(predicate));
}",java:S119,
"@Override
public Enumerable<Grouping<TKey, T>> groupBy(Function1<T, TKey> keySelector){
    return EnumerableDefaults.groupBy(getThis(), keySelector);
}",java:S119,
"public static TAccumulate aggregate(Queryable<T> queryable, TAccumulate seed, FunctionExpression<Function2<TAccumulate, T, TAccumulate>> func){
    throw Extensions.todo();
}",java:S119,
"@Override
public Enumerable<TResult> correlateJoin(JoinType joinType, Function1<T, Enumerable<TInner>> inner, Function2<T, TInner, TResult> resultSelector){
    return EnumerableDefaults.correlateJoin(joinType, getThis(), inner, resultSelector);
}",java:S119,
"@Override
public TResult aggregate(final Queryable<T> source, final TAccumulate seed, final FunctionExpression<Function2<TAccumulate, T, TAccumulate>> func, final FunctionExpression<Function1<TAccumulate, TResult>> selector){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.aggregate(source, seed, func, selector);
        }
    }.castSingle();
}",java:S119,
"@Override
public Queryable<TResult> groupBy(FunctionExpression<Function1<T, TKey>> keySelector, FunctionExpression<Function1<T, TElement>> elementSelector, FunctionExpression<Function2<TKey, Enumerable<TElement>, TResult>> resultSelector){
    return factory.groupBy(getThis(), keySelector, elementSelector, resultSelector);
}",java:S119,
"public RequestPipelineBuilder<InputT, NewOutputT> then(Function<HttpClientDependencies, RequestPipeline<OutputT, NewOutputT>> pipelineFactory){
    return new RequestPipelineBuilder<>(r -> new ComposingRequestPipelineStage<>(this.pipelineFactory.apply(r), pipelineFactory.apply(r)));
}",java:S119,
"public static ConsequenceBuilder._13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> on(Variable<T1> arg1, Variable<T2> arg2, Variable<T3> arg3, Variable<T4> arg4, Variable<T5> arg5, Variable<T6> arg6, Variable<T7> arg7, Variable<T8> arg8, Variable<T9> arg9, Variable<T10> arg10, Variable<T11> arg11, Variable<T12> arg12, Variable<T13> arg13){
    return new ConsequenceBuilder._13(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
}",java:S119,
"public static Queryable<TSource> asQueryable(Enumerable<TSource> enumerable){
    throw Extensions.todo();
}",java:S119,
"@Override
public Enumerable<TResult> hashJoin(Enumerable<TInner> inner, Function1<T, TKey> outerKeySelector, Function1<TInner, TKey> innerKeySelector, Function2<T, TInner, TResult> resultSelector){
    return EnumerableDefaults.hashJoin(getThis(), inner, outerKeySelector, innerKeySelector, resultSelector);
}",java:S119,
"public static ConsequenceBuilder._24<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> on(Variable<T1> arg1, Variable<T2> arg2, Variable<T3> arg3, Variable<T4> arg4, Variable<T5> arg5, Variable<T6> arg6, Variable<T7> arg7, Variable<T8> arg8, Variable<T9> arg9, Variable<T10> arg10, Variable<T11> arg11, Variable<T12> arg12, Variable<T13> arg13, Variable<T14> arg14, Variable<T15> arg15, Variable<T16> arg16, Variable<T17> arg17, Variable<T18> arg18, Variable<T19> arg19, Variable<T20> arg20, Variable<T21> arg21, Variable<T22> arg22, Variable<T23> arg23, Variable<T24> arg24){
    return new ConsequenceBuilder._24(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24);
}",java:S119,
"@Override
public Enumerable<TResult> zip(Enumerable<T1> source1, Function2<T, T1, TResult> resultSelector){
    return EnumerableDefaults.zip(getThis(), source1, resultSelector);
}",java:S119,
"public static Long average(Enumerable<TSource> source, NullableLongFunction1<TSource> selector){
    return sum(source, selector) / longCount(source);
}",java:S119,
"private CompletableFuture<T> processRootRangeRpc(CreateRequestFunc<ReqT> createRequestFunc, ProcessRequestFunc<ReqT, RespT, RootRangeServiceFutureStub> processRequestFunc, ProcessResponseFunc<RespT, T> processResponseFunc){
    CompletableFuture<T> result = FutureUtils.<T>createFuture().whenComplete((v, cause) -> {
        if (null != cause && isContainerNotFound(cause)) {
            scClient.resetStorageServerChannelFuture();
        }
    });
    scClient.getStorageContainerChannelFuture().whenComplete((rsChannel, cause) -> {
        if (null != cause) {
            handleGetRootRangeServiceFailure(result, cause);
            return;
        }
        RpcUtils.processRpc(rsChannel.getRootRangeService(), result, createRequestFunc, processRequestFunc, processResponseFunc);
    });
    return result;
}",java:S119,
"@Override
public Enumerable<T> orderByDescending(Function1<T, TKey> keySelector, Comparator<TKey> comparator){
    return EnumerableDefaults.orderByDescending(getThis(), keySelector, comparator);
}",java:S119,
"private Object insertVal(Row row, ExecutionContext<Row> ectx) throws IgniteCheckedException{
    RowHandler<Row> handler = ectx.rowHandler();
    Object val = handler.get(valField, row);
    if (val == null) {
        val = newVal(typeDesc.valueTypeName(), typeDesc.valueClass());
        for (int i = 2; i < descriptors.length; i++) {
            final CacheColumnDescriptor desc = descriptors[i];
            Object fieldVal = replaceDefault(handler.get(i, row), desc);
            if (desc.field() && !desc.key() && fieldVal != null)
                desc.set(val, TypeUtils.fromInternal(ectx, fieldVal, desc.storageType()));
        }
    } else {
        val = replaceDefault(val, descriptors[QueryUtils.VAL_COL]);
        val = TypeUtils.fromInternal(ectx, val, descriptors[QueryUtils.VAL_COL].storageType());
    }
    return val;
}",java:S119,
"public static int sum(Enumerable<TSource> source, IntegerFunction1<TSource> selector){
    return aggregate(source.select(adapt(selector)), 0, Extensions.INTEGER_SUM);
}",java:S119,
"public static Query10Def<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> query(String name, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10){
    return new Query10DefImpl<>(VIEW_BUILDER, name, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10);
}",java:S119,
"public static Enumerable<TResult> hashJoin(Enumerable<TSource> outer, Enumerable<TInner> inner, Function1<TSource, TKey> outerKeySelector, Function1<TInner, TKey> innerKeySelector, Function2<TSource, TInner, TResult> resultSelector, EqualityComparer<TKey> comparer){
    return hashJoin(outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer, false, false);
}",java:S119,
"public static SimpleLabeledDataset<EmptyContext> createSimpleLabeledDataset(Map<K, V> upstreamMap, LearningEnvironmentBuilder envBuilder, int partitions, Preprocessor<K, V> vectorizer){
    return createSimpleLabeledDataset(new LocalDatasetBuilder<>(upstreamMap, partitions), envBuilder, vectorizer);
}",java:S119,
"@Nullable
public static TSource min(Enumerable<TSource> source){
    return aggregate(source, minFunction());
}",java:S119,
"public static Function<Row, Row> resultTypeConverter(ExecutionContext<Row> ectx, RelDataType resultType){
    assert resultType.isStruct();
    if (hasConvertableFields(resultType)) {
        RowHandler<Row> handler = ectx.rowHandler();
        List<RelDataType> types = RelOptUtil.getFieldTypeList(resultType);
        RowHandler.RowFactory<Row> factory = handler.factory(ectx.getTypeFactory(), types);
        List<Function<Object, Object>> converters = transform(types, t -> fieldConverter(ectx, t));
        return r -> {
            Row newRow = factory.create();
            assert handler.columnCount(newRow) == converters.size();
            assert handler.columnCount(r) == converters.size();
            for (int i = 0; i < converters.size(); i++) handler.set(i, newRow, converters.get(i).apply(handler.get(i, r)));
            return newRow;
        };
    }
    return Function.identity();
}",java:S119,
"public static Enumerable<Grouping<TKey, TSource>> groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector, EqualityComparer<TKey> comparer){
    return enumerable.toLookup(keySelector, comparer);
}",java:S119,
"public static SimpleDataset<EmptyContext> createSimpleDataset(Ignite ignite, IgniteCache<K, V> upstreamCache, LearningEnvironmentBuilder envBuilder, Preprocessor<K, V> featureExtractor){
    return createSimpleDataset(new CacheBasedDatasetBuilder<>(ignite, upstreamCache), envBuilder, featureExtractor);
}",java:S119,
"public static Optional<TRACE> processTracing(final BlockchainQueries blockchainQueries, final Hash blockHash, final Function<TraceableState, ? extends Optional<TRACE>> mapper){
    return processTracing(blockchainQueries, blockchainQueries.getBlockHeaderByHash(blockHash), mapper);
}",java:S119,
"public static Function1<TSource, String> toStringSelector(){
    return TO_STRING_FUNCTION1;
}",java:S119,
"public static Enumerable<TSource> except(Enumerable<TSource> source0, Enumerable<TSource> source1, EqualityComparer<TSource> comparer){
    return except(source0, source1, comparer, false);
}",java:S119,
"public static Enumerable<TSource> skip(Enumerable<TSource> source, final int count){
    return skipWhile(source, (v1, v2) -> {
        return v2 < count;
    });
}",java:S119,
"@Override
public Queryable<Grouping<TKey, TElement>> groupBy(FunctionExpression<Function1<T, TKey>> keySelector, FunctionExpression<Function1<T, TElement>> elementSelector, EqualityComparer<TKey> comparer){
    return factory.groupBy(getThis(), keySelector, elementSelector, comparer);
}",java:S119,
"public static Enumerable<TResult> mergeJoin(final Enumerable<TSource> outer, final Enumerable<TInner> inner, final Function1<TSource, TKey> outerKeySelector, final Function1<TInner, TKey> innerKeySelector, final Function2<TSource, @Nullable TInner, TResult> resultSelector, final JoinType joinType, final Comparator<TKey> comparator){
    return mergeJoin(outer, inner, outerKeySelector, innerKeySelector, null, resultSelector, joinType, comparator);
}",java:S119,
"@Override
public void sendBatch(UUID nodeId, UUID qryId, long fragmentId, long exchangeId, int batchId, boolean last, List<Row> rows) throws IgniteCheckedException{
    messageService().send(nodeId, new QueryBatchMessage(qryId, fragmentId, exchangeId, batchId, last, Commons.cast(rows)));
    if (batchId == 0) {
        Query<?> qry = qryRegistry.query(qryId);
        if (qry != null)
            qry.onOutboundExchangeStarted(nodeId, exchangeId);
    }
}",java:S119,
"private Th shutDownAndThrow(Th th){
    killConnection();
    return th;
}",java:S119,
"@Override
public Queryable<Grouping<TKey, T>> groupBy(final Queryable<T> source, final FunctionExpression<Function1<T, TKey>> keySelector, final EqualityComparer<TKey> comparer){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.groupBy(source, keySelector, comparer);
        }
    }.castQueryable();
}",java:S119,
"@Override
public Enumerable<TResult> selectMany(Function2<T, Integer, Enumerable<TCollection>> collectionSelector, Function2<T, TCollection, TResult> resultSelector){
    return EnumerableDefaults.selectMany(getThis(), collectionSelector, resultSelector);
}",java:S119,
"@Override
public Queryable<TResult> groupByK(FunctionExpression<Function1<T, TKey>> keySelector, FunctionExpression<Function2<TKey, Enumerable<T>, TResult>> resultSelector, EqualityComparer<TKey> comparer){
    return EnumerableDefaults.groupBy(getThis(), keySelector.getFunction(), resultSelector.getFunction(), comparer).asQueryable();
}",java:S119,
"public static OrderedQueryable<T> thenByDescending(OrderedQueryable<T> source, FunctionExpression<Function1<T, TKey>> keySelector){
    throw Extensions.todo();
}",java:S119,
"private TR op(ClientOperation op, Consumer<BinaryRawWriterEx> writer, Function<PayloadInputChannel, TR> reader){
    return ch.service(op, out -> {
        try (BinaryRawWriterEx w = serDes.createBinaryWriter(out.out())) {
            writeIdentity(w);
            if (writer != null)
                writer.accept(w);
        }
    }, reader);
}",java:S119,
"private static Supplier<Accumulator<Row>> maxFactory(AggregateCall call, RowHandler<Row> hnd){
    switch(call.type.getSqlTypeName()) {
        case DOUBLE:
        case REAL:
        case FLOAT:
            return () -> new DoubleMinMax<>(call, hnd, false);
        case DECIMAL:
            return () -> new DecimalMinMax<>(call, hnd, false);
        case INTEGER:
            return () -> new IntMinMax<>(call, hnd, false);
        case CHAR:
        case VARCHAR:
            return () -> new VarCharMinMax<>(call, hnd, false);
        case BINARY:
        case VARBINARY:
            return () -> new ComparableMinMax<Row, ByteString>(call, hnd, false, tf -> tf.createTypeWithNullability(tf.createSqlType(VARBINARY), true));
        case ANY:
            if (call.type instanceof UuidType) {
                return () -> new ComparableMinMax<Row, UUID>(call, hnd, false, tf -> tf.createTypeWithNullability(tf.createCustomType(UUID.class), true));
            }
            throw new UnsupportedOperationException(""MAX() is not supported for type '"" + call.type + ""'."");
        case BIGINT:
        default:
            return () -> new LongMinMax<>(call, hnd, false);
    }
}",java:S119,
"public static Enumerable<TSource> skipWhile(Enumerable<TSource> source, Predicate1<TSource> predicate){
    return skipWhile(source, Functions.toPredicate2(predicate));
}",java:S119,
"@Override
public Queryable<TResult> groupBy(FunctionExpression<Function1<T, TKey>> keySelector, FunctionExpression<Function1<T, TElement>> elementSelector, FunctionExpression<Function2<TKey, Enumerable<TElement>, TResult>> resultSelector){
    return EnumerableDefaults.groupBy(getThis(), keySelector.getFunction(), elementSelector.getFunction(), resultSelector.getFunction()).asQueryable();
}",java:S119,
"public static Enumerable<Grouping<TKey, TElement>> groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector, Function1<TSource, TElement> elementSelector, EqualityComparer<TKey> comparer){
    return enumerable.toLookup(keySelector, elementSelector, comparer);
}",java:S119,
"@Override
@Nullable
public TResult max(FunctionExpression<Function1<T, TResult>> selector){
    return EnumerableDefaults.max(getThis(), selector.getFunction());
}",java:S119,
"public static Enumerable<TResult> match(Enumerable<E> enumerable, final Function1<E, TKey> keySelector, Matcher<E> matcher, Emitter<E, TResult> emitter, int history, int future){
    return new AbstractEnumerable<TResult>() {

        @Override
        public Enumerator<TResult> enumerator() {
            return new Enumerator<TResult>() {

                final Enumerator<E> inputEnumerator = enumerable.enumerator();

                final Map<TKey, Matcher.PartitionState<E>> partitionStates = new HashMap<>();

                int inputRow = -1;

                final Deque<TResult> emitRows = new ArrayDeque<>();

                @Nullable
                TResult resultRow;

                final AtomicInteger matchCounter = new AtomicInteger(1);

                @Override
                public TResult current() {
                    Objects.requireNonNull(resultRow, ""resultRow"");
                    return resultRow;
                }

                @Override
                public boolean moveNext() {
                    for (; ; ) {
                        resultRow = emitRows.pollFirst();
                        if (resultRow != null) {
                            return true;
                        }
                        if (!inputEnumerator.moveNext()) {
                            return false;
                        }
                        ++inputRow;
                        final E row = inputEnumerator.current();
                        final TKey key = keySelector.apply(row);
                        final Matcher.PartitionState<E> partitionState = partitionStates.computeIfAbsent(key, k -> matcher.createPartitionState(history, future));
                        partitionState.getMemoryFactory().add(row);
                        matcher.matchOne(partitionState.getRows(), partitionState, matches -> emitter.emit(matches.rows, null, matches.symbols, matchCounter.getAndIncrement(), emitRows::add));
                    }
                }

                @Override
                public void reset() {
                    throw new UnsupportedOperationException();
                }

                @Override
                public void close() {
                    inputEnumerator.close();
                }
            };
        }
    };
}",java:S119,
"public static Enumerable<TResult> groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector, Function1<TSource, TElement> elementSelector, final Function2<TKey, Enumerable<TElement>, TResult> resultSelector){
    return enumerable.toLookup(keySelector, elementSelector).select(group -> resultSelector.apply(group.getKey(), group));
}",java:S119,
"public static Enumerable<TSource> semiJoin(final Enumerable<TSource> outer, final Enumerable<TInner> inner, final Function1<TSource, TKey> outerKeySelector, final Function1<TInner, TKey> innerKeySelector, final EqualityComparer<TKey> comparer, final Predicate2<TSource, TInner> nonEquiPredicate){
    return semiJoin(outer, inner, outerKeySelector, innerKeySelector, comparer, false, nonEquiPredicate);
}",java:S119,
"public static Page<ItemT> readAndTransformPaginatedItems(ResponseT response, TableSchema<ItemT> tableSchema, OperationContext operationContext, DynamoDbEnhancedClientExtension dynamoDbEnhancedClientExtension, Function<ResponseT, List<Map<String, AttributeValue>>> getItems, Function<ResponseT, Map<String, AttributeValue>> getLastEvaluatedKey, Function<ResponseT, Integer> count, Function<ResponseT, Integer> scannedCount, Function<ResponseT, ConsumedCapacity> consumedCapacity){
    List<ItemT> collect = getItems.apply(response).stream().map(itemMap -> readAndTransformSingleItem(itemMap, tableSchema, operationContext, dynamoDbEnhancedClientExtension)).collect(Collectors.toList());
    Page.Builder<ItemT> pageBuilder = Page.builder(tableSchema.itemType().rawClass()).items(collect).count(count.apply(response)).scannedCount(scannedCount.apply(response)).consumedCapacity(consumedCapacity.apply(response));
    if (getLastEvaluatedKey.apply(response) != null && !getLastEvaluatedKey.apply(response).isEmpty()) {
        pageBuilder.lastEvaluatedKey(getLastEvaluatedKey.apply(response));
    }
    return pageBuilder.build();
}",java:S119,
" CacheType getCache(Exchange exchange, String defaultCache, Class<CacheType> type){
    return type.cast(getCache(exchange, defaultCache));
}",java:S119,
"@Override
public OrderedEnumerable<T> thenBy(Function1<T, TKey> keySelector){
    return EnumerableDefaults.thenBy(getThisOrdered(), keySelector);
}",java:S119,
"public static Enumerable<TSource> semiJoin(final Enumerable<TSource> outer, final Enumerable<TInner> inner, final Function1<TSource, TKey> outerKeySelector, final Function1<TInner, TKey> innerKeySelector, final EqualityComparer<TKey> comparer){
    return semiEquiJoin_(outer, inner, outerKeySelector, innerKeySelector, comparer, false);
}",java:S119,
"public static Lookup<TKey, TElement> toLookup(Enumerable<TSource> source, Function1<TSource, TKey> keySelector, Function1<TSource, TElement> elementSelector){
    final Map<TKey, List<TElement>> map = new HashMap<>();
    return toLookup_(map, source, keySelector, elementSelector);
}",java:S119,
"public static Optional<TRACE> processTracing(final BlockchainQueries blockchainQueries, final Optional<BlockHeader> blockHeader, final Function<TraceableState, ? extends Optional<TRACE>> mapper){
    return blockHeader.map(BlockHeader::getParentHash).flatMap(parentHash -> blockchainQueries.getAndMapWorldState(parentHash, mutableWorldState -> mapper.apply(new TraceableState(mutableWorldState))));
}",java:S119,
"public static SimpleLabeledDataset<EmptyContext> createSimpleLabeledDataset(DatasetBuilder<K, V> datasetBuilder, LearningEnvironmentBuilder envBuilder, Preprocessor<K, V> vectorizer){
    return createSimpleLabeledDataset(datasetBuilder, envBuilder, new EmptyContextBuilder<>(), vectorizer);
}",java:S119,
"@Override
public Queryable<TResult> join(Enumerable<TInner> inner, FunctionExpression<Function1<T, TKey>> outerKeySelector, FunctionExpression<Function1<TInner, TKey>> innerKeySelector, FunctionExpression<Function2<T, TInner, TResult>> resultSelector, EqualityComparer<TKey> comparer){
    return factory.join(getThis(), inner, outerKeySelector, innerKeySelector, resultSelector, comparer);
}",java:S119,
"@Override
public Queryable<TResult> groupBy(Queryable<T> source, FunctionExpression<Function1<T, TKey>> keySelector, FunctionExpression<Function1<T, TElement>> elementSelector, FunctionExpression<Function2<TKey, Enumerable<TElement>, TResult>> resultSelector, EqualityComparer<TKey> comparer){
    throw new UnsupportedOperationException();
}",java:S119,
"@Override
public Queryable<TResult> selectN(final Queryable<T> source, final FunctionExpression<Function2<T, Integer, TResult>> selector){
    return new NonLeafReplayableQueryable<T>(source) {

        @Override
        public void replay(QueryableFactory<T> factory) {
            factory.selectN(source, selector);
        }
    }.castQueryable();
}",java:S119,
"public static String getKey(IO io, long pageAddr, int idx, MetastorageRowStore rowStore) throws IgniteCheckedException{
    int off = io.offset(idx);
    int len = PageUtils.getShort(pageAddr, off + 8);
    if (len > MetastorageTree.MAX_KEY_LEN) {
        long keyLink = PageUtils.getLong(pageAddr, off + 10);
        byte[] keyBytes = rowStore.readRow(keyLink);
        assert keyBytes != null : ""[pageAddr="" + Long.toHexString(pageAddr) + "", idx="" + idx + ']';
        return new String(keyBytes);
    } else {
        byte[] keyBytes = PageUtils.getBytes(pageAddr, off + 10, len);
        return new String(keyBytes);
    }
}",java:S119,
"public static RowTracker<Row> instance(){
    return (RowTracker<Row>) INSTANCE;
}",java:S119,
"public static Queryable<TResult> selectMany(Queryable<T> source, FunctionExpression<Function1<T, Enumerable<TResult>>> selector){
    throw Extensions.todo();
}",java:S119,
"public static Enumerable<TResult> cast(Iterable<TSource> source, Class<TResult> clazz){
    return asEnumerable(source).cast(clazz);
}",java:S119,
"public static Enumerable<TSource> antiJoin(final Enumerable<TSource> outer, final Enumerable<TInner> inner, final Function1<TSource, TKey> outerKeySelector, final Function1<TInner, TKey> innerKeySelector){
    return semiEquiJoin_(outer, inner, outerKeySelector, innerKeySelector, null, true);
}",java:S119,
"public static TSource first(Enumerable<TSource> enumerable, Predicate1<TSource> predicate){
    for (TSource o : enumerable) {
        if (predicate.apply(o)) {
            return o;
        }
    }
    throw new NoSuchElementException();
}",java:S119,
"@Override
public TResult max(FunctionExpression<Function1<T, TResult>> selector){
    return factory.max(getThis(), selector);
}",java:S119,
"public static long min(Enumerable<TSource> source, LongFunction1<TSource> selector){
    return aggregate(source.select(adapt(selector)), null, Extensions.LONG_MIN);
}",java:S119,
"@Override
public Map<TKey, T> toMap(Function1<T, TKey> keySelector){
    return EnumerableDefaults.toMap(getThis(), keySelector);
}",java:S119,
"public static TResult max(Queryable<T> queryable, FunctionExpression<Function1<T, TResult>> selector){
    throw Extensions.todo();
}",java:S119,
"public static Queryable<Grouping<TKey, T>> groupBy(Queryable<T> queryable, FunctionExpression<Function1<T, TKey>> keySelector, EqualityComparer comparer){
    throw Extensions.todo();
}",java:S119,
"private ObjectServicePort getObjectService(boolean forceLoading) throws Exception{
    String method = ""getObjectService"";
    log.debug(method + "". BEGIN"");
    try {
        objectService = acarisServiceFactory.getAcarisService().getObjectServicePort();
        log.info(method + "". AcarisObjectServiceInterface loaded correctly"");
    } catch (Exception e) {
        log.error(method + "". Exception loading interface "" + e);
        throw e;
    }
    return objectService;
}",java:S1172,
"public boolean list(String line){
    int index = 0;
    beeLine.info(beeLine.loc(""active-connections"", beeLine.getDatabaseConnections().size()));
    for (Iterator<DatabaseConnection> i = beeLine.getDatabaseConnections().iterator(); i.hasNext(); index++) {
        DatabaseConnection c = i.next();
        boolean closed = false;
        try {
            closed = c.getConnection().isClosed();
        } catch (Exception e) {
            closed = true;
        }
        beeLine.output(beeLine.getColorBuffer().pad("" #"" + index + """", 5).pad(closed ? beeLine.loc(""closed"") : beeLine.loc(""open""), 9).append(c.getUrl()));
    }
    return true;
}",java:S1172,
" void marshall(T val, XmlMarshallerContext context, String paramName, SdkField<T> sdkField, ValueToStringConverter.ValueToString<T> converter){
    context.xmlGenerator().xmlWriter().value(converter.convert(val, sdkField));
}",java:S1172,
"private ArrayList<ArrayList<Vertex>> getDupeSets4NonDepNodes(String transId, String fromAppId, Graph g, String version, String nType, ArrayList<Vertex> passedVertList, ArrayList<String> keyPropNamesArr, Loader loader){
    ArrayList<ArrayList<Vertex>> returnList = new ArrayList<ArrayList<Vertex>>();
    HashMap<String, ArrayList<String>> keyVals2VidHash = new HashMap<String, ArrayList<String>>();
    HashMap<String, Vertex> vtxHash = new HashMap<String, Vertex>();
    Iterator<Vertex> pItr = passedVertList.iterator();
    while (pItr.hasNext()) {
        try {
            Vertex tvx = pItr.next();
            String thisVid = tvx.id().toString();
            vtxHash.put(thisVid, tvx);
            String hKey = getNodeKeyValString(tvx, keyPropNamesArr);
            if (hKey.equals("""")) {
                continue;
            }
            if (keyVals2VidHash.containsKey(hKey)) {
                ArrayList<String> tmpVL = keyVals2VidHash.get(hKey);
                tmpVL.add(thisVid);
                keyVals2VidHash.put(hKey, tmpVL);
            } else {
                ArrayList<String> tmpVL = new ArrayList<String>();
                tmpVL.add(thisVid);
                keyVals2VidHash.put(hKey, tmpVL);
            }
        } catch (Exception e) {
            LOGGER.warn("" >>> Threw an error in getDupeSets4NonDepNodes - just absorb this error and move on. "", e);
        }
    }
    for (Map.Entry<String, ArrayList<String>> entry : keyVals2VidHash.entrySet()) {
        ArrayList<String> vidList = entry.getValue();
        try {
            if (!vidList.isEmpty() && vidList.size() > 1) {
                ArrayList<Vertex> vertList = new ArrayList<Vertex>();
                for (int i = 0; i < vidList.size(); i++) {
                    String tmpVid = vidList.get(i);
                    vertList.add(vtxHash.get(tmpVid));
                }
                returnList.add(vertList);
            }
        } catch (Exception e) {
            LOGGER.warn("" >>> Threw an error in getDupeSets4NonDepNodes - just absorb this error and move on. "", e);
        }
    }
    return returnList;
}",java:S1172,
"public void writeBool(boolean b, String tag) throws IOException{
    out.writeBool(b);
}",java:S1172,
"private TraitableBean makeTraitable(K core, TraitFactoryImpl builder, boolean logical, InternalMatch internalMatch){
    boolean needsWrapping = !(core instanceof TraitableBean);
    ClassDefinition coreDef = lookupClassDefinition(core);
    TraitableBean<K, ? extends TraitableBean> inner = needsWrapping ? builder.asTraitable(core, coreDef) : (TraitableBean<K, ? extends TraitableBean>) core;
    if (needsWrapping) {
        InternalFactHandle h = (InternalFactHandle) lookupFactHandle(core);
        WorkingMemoryEntryPoint ep = h != null ? h.getEntryPoint(workingMemory) : workingMemory.getEntryPoint(""DEFAULT"");
        ObjectTypeConfigurationRegistry reg = ep.getObjectTypeConfigurationRegistry();
        ObjectTypeConf coreConf = reg.getOrCreateObjectTypeConf(ep.getEntryPoint(), core);
        ObjectTypeConf innerConf = reg.getOrCreateObjectTypeConf(ep.getEntryPoint(), inner);
        if (coreConf.isTMSEnabled()) {
            innerConf.enableTMS();
        }
        if (inner._getFieldTMS() != null && inner._getFieldTMS().needsInit()) {
            inner._getFieldTMS().init(workingMemory);
        }
    } else {
        TraitFieldTMS ftms = inner._getFieldTMS();
        if (ftms != null) {
            FactHandle handle = lookupFactHandle(inner);
            if (handle == null) {
                handle = this.workingMemory.insert(inner, false, internalMatch.getRule(), internalMatch.getTuple().getTupleSink());
            }
            if (ftms.needsInit()) {
                ftms.init(workingMemory);
            }
        }
    }
    return inner;
}",java:S1172,
"private static String getClassName(@SuppressWarnings(""unused"") RelDataType type){
    return Object.class.getName();
}",java:S1172,
"public boolean registerResourceToBuild(String kBaseName, String resource){
    return true;
}",java:S1172,
"public static void premain(String argument, Instrumentation instrumentation){
    new AgentBuilder.Default().with(AgentBuilder.TypeStrategy.Default.REDEFINE).with(AgentBuilder.InitializationStrategy.NoOp.INSTANCE).type(nameStartsWith(""com.hazelcast"")).transform((builder, typeDescription, classLoader, module, domain) -> {
        builder = manifestMethodAsPlain(builder, typeDescription);
        int actualModifiers = typeDescription.getActualModifiers(false);
        int nonFinalModifiers = actualModifiers & ~Opcodes.ACC_FINAL;
        if (actualModifiers != nonFinalModifiers) {
            return builder.modifiers(nonFinalModifiers);
        } else {
            return builder;
        }
    }).installOn(instrumentation);
}",java:S1172,
"public void writeString(String s, String tag) throws IOException{
    out.writeString(s);
}",java:S1172,
"protected void buildSetter(ClassWriter cw, FieldDefinition field, String name, String type, String generic){
    MethodVisitor mv = cw.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, BuildUtils.setterName(name), ""("" + BuildUtils.getTypeDescriptor(type) + "")V"", generic == null ? null : ""("" + BuildUtils.getTypeDescriptor(type).replace("";"", ""<"" + BuildUtils.getTypeDescriptor(generic) + "">;"") + "")V"", null);
    mv.visitEnd();
}",java:S1172,
"public static void makeHar(JobContext context, String dir, String harFile) throws IOException{
    int lastSep = harFile.lastIndexOf(Path.SEPARATOR_CHAR);
    Path archivePath = new Path(harFile.substring(0, lastSep));
    final String[] args = { ""-archiveName"", harFile.substring(lastSep + 1, harFile.length()), ""-p"", dir, ""*"", archivePath.toString() };
    try {
        Configuration newConf = new Configuration();
        FileSystem fs = archivePath.getFileSystem(newConf);
        String hadoopTokenFileLocationEnvSetting = System.getenv(HCatConstants.SYSENV_HADOOP_TOKEN_FILE_LOCATION);
        if ((hadoopTokenFileLocationEnvSetting != null) && (!hadoopTokenFileLocationEnvSetting.isEmpty())) {
            newConf.set(HCatConstants.CONF_MAPREDUCE_JOB_CREDENTIALS_BINARY, hadoopTokenFileLocationEnvSetting);
        }
        final HadoopArchives har = new HadoopArchives(newConf);
        int rc = ToolRunner.run(har, args);
        if (rc != 0) {
            throw new Exception(""Har returned error code "" + rc);
        }
        fs.delete(new Path(dir), true);
    } catch (Exception e) {
        throw new HCatException(""Error creating Har ["" + harFile + ""] from ["" + dir + ""]"", e);
    }
}",java:S1172,
"private RelationshipsServicePort getRelationshipService(boolean forceLoading) throws Exception{
    String method = ""getRelationshipService"";
    log.debug(method + "". BEGIN"");
    try {
        relationshipService = acarisServiceFactory.getAcarisService().getRelationshipsServicePort();
        log.info(method + "". AcarisRelationshipServiceInterface loaded correctly"");
    } catch (Exception e) {
        log.error(method + "". Exception loading interface "" + e);
        throw e;
    }
    return relationshipService;
}",java:S1172,
"private List<OrganizationalPerson> getMembers(String groupId, String[] userIds, OrganizationalChartType type){
    List<OrganizationalPerson> personList = new ArrayList<>(userIds.length);
    for (String userId : userIds) {
        OrganizationalPerson person = loadOrganizationalPerson(userId, type);
        if (person != null) {
            personList.add(person);
        }
    }
    Collections.sort(personList, new OrganizationalPersonComparator());
    return personList;
}",java:S1172,
"public static BindingConverter<T, T> identity(final Class<T> type){
    return new BindingConverter<T, T>() {

        @Override
        public T toLeft(final T right) {
            return right;
        }

        @Override
        public T toRight(final T left) {
            return left;
        }
    };
}",java:S1172,
"private OfficialBookServicePort getOfficialBookService(boolean forceLoading) throws Exception{
    String method = ""getOfficialBookService"";
    log.debug(method + "". BEGIN"");
    try {
        officialBookService = acarisServiceFactory.getAcarisService().getOfficialBookServicePort();
        log.info(method + "". AcarisOfficialBookServiceInterface loaded correctly"");
    } catch (Exception e) {
        log.error(method + "". Exception loading interface "" + e);
        throw e;
    }
    return officialBookService;
}",java:S1172,
" void _onBeforeOpCodeExecuted(ScriptChunk chunk, boolean willExecute){
    onBeforeOpCodeExecuted(willExecute);
}",java:S1172,
"public void resolve(final Segment segment){
    initialSort();
    sortClassPool();
    resolved = true;
    entries.forEach(entry -> entry.resolve(this));
    others.forEach(entry -> entry.resolve(this));
}",java:S1172,
" Expression getIfTrue(Type type, final List<Expression> argValueList){
    return getDefaultValue(type);
}",java:S1172,
" void executeSubProgram(HepInstruction.SubProgram instruction, HepInstruction.SubProgram.State state){
    LOGGER.trace(""Entering subprogram"");
    for (; ; ) {
        int nTransformationsBefore = nTransformations;
        state.programState.execute();
        if (nTransformations == nTransformationsBefore) {
            break;
        }
    }
    LOGGER.trace(""Leaving subprogram"");
}",java:S1172,
"public static Function<Object, T> castTo(final Class<T> type){
    return new Function<Object, T>() {

        @SuppressWarnings(""unchecked"")
        @Override
        public T apply(final Object input) {
            return (T) input;
        }
    };
}",java:S1172,
"private void parseForThread(ThreadsInfo parentObj, String parentTag, String qName, Attributes attributes) throws SAXException{
    if (Constants.ELEMENT_DUMP.equals(qName)) {
        objects.push(parentObj);
    } else {
        throw new SAXException(String.format(""Element(%s) is not expected under thread!"", qName));
    }
    tags.push(qName);
}",java:S1172,
" void init(final RepresentationType representationType){
    ensureDomainModelQueryParamSupported();
    this.followLinks = Collections.unmodifiableList(getArg(RequestParameter.FOLLOW_LINKS));
    this.validateOnly = getArg(RequestParameter.VALIDATE_ONLY);
}",java:S1172,
"private void updateManyTraits(Object object, BitMask mask, Collection<Thing> originators, Class<?> modifiedClass, Collection<Thing> traits, InternalMatch internalMatch){
    for (Thing t : traits) {
        if (!originators.contains(t)) {
            InternalFactHandle h = (InternalFactHandle) lookupFactHandle(t);
            if (h != null) {
                NamedEntryPoint nep = (NamedEntryPoint) h.getEntryPoint(workingMemory);
                PropagationContext propagationContext = nep.getPctxFactory().createPropagationContext(nep.getReteEvaluator().getNextPropagationIdCounter(), PropagationContext.Type.MODIFICATION, internalMatch != null ? internalMatch.getRule() : null, internalMatch != null ? internalMatch.getTuple().getTupleSink() : null, h, nep.getEntryPoint(), mask, modifiedClass, null);
                nep.update(h, t, t, nep.getObjectTypeConfigurationRegistry().getObjectTypeConf(t), propagationContext);
            }
        }
    }
}",java:S1172,
"public boolean supportsJoinType(JoinRelType joinType){
    return true;
}",java:S1172,
"public static int eval(int x, int y){
    return 2;
}",java:S1172,
"public boolean filter(@SuppressWarnings(""unused"") Object propertyValueOfCurrentElement){
    return false;
}",java:S1172,
"public static final Atom getCenterVector(Atom[] atomSet, Atom centroid){
    double[] coords = new double[3];
    coords[0] = 0 - centroid.getX();
    coords[1] = 0 - centroid.getY();
    coords[2] = 0 - centroid.getZ();
    Atom shiftVec = new AtomImpl();
    shiftVec.setCoords(coords);
    return shiftVec;
}",java:S1172,
" void inferMixinSort(final Property property, final FacetedMethod facetedMethod){
    addFacet(new ActionSemanticsFacetAbstract(SemanticsOf.SAFE, facetedMethod) {
    });
    addFacet(ContributingFacetAbstract.createAsProperty(facetedMethod));
}",java:S1172,
"public Shuttle preVisit(FieldDeclaration fieldDeclaration){
    return this;
}",java:S1172,
"protected boolean allowDelete(final Item<Pair<K, V>> rowItem){
    return true;
}",java:S1172,
"public Optional<Field> fieldForGetter(final Class<?> type, final Method getterCandidate){
    return Optional.ofNullable(findFieldForGetter(getterCandidate));
}",java:S1172,
"public Boolean isPhaseTransition(Exchange rel, RelMetadataQuery mq){
    return true;
}",java:S1172,
"public void extractOperands(final OperandManager operandManager, final Segment segment, final int codeLength){
    final ByteCodeForm currentByteCodeForm = getByteCodeForm();
    currentByteCodeForm.setByteCodeOperands(this, operandManager, codeLength);
}",java:S1172,
"public static ErrorMessageFactory shouldAccept(Predicate<? super T> predicate, T value, PredicateDescription description){
    requireNonNull(description, ""The predicate description must not be null"");
    return new ShouldAccept(value, description);
}",java:S1172,
"private MatrixReport queryHourlyReportByDuration(String name, String domain, Date start, Date end){
    long startTime = start.getTime();
    long endTime = end.getTime();
    MatrixReportMerger merger = new MatrixReportMerger(new MatrixReport(domain));
    for (; startTime < endTime; startTime = startTime + TimeHelper.ONE_HOUR) {
        Date date = new Date(startTime);
        MatrixReport reportModel = m_reportService.queryReport(domain, date, new Date(date.getTime() + TimeHelper.ONE_HOUR));
        reportModel.accept(merger);
    }
    MatrixReport matrixReport = merger.getMatrixReport();
    new MatrixReportFilter().visitMatrixReport(matrixReport);
    matrixReport.setStartTime(start);
    matrixReport.setEndTime(end);
    return matrixReport;
}",java:S1172,
"protected String[] getQueryTypes(QueryDescr queryDescr, QueryImpl query){
    return queryDescr.getParameterTypes();
}",java:S1172,
"public boolean processAbduction(Match resultLeftTuple, DroolsQuery dquery, Object[] objects, ValueResolver valueResolver){
    return true;
}",java:S1172,
"protected void defaultClick(Driver driver, WebElement element){
    element.click();
}",java:S1172,
"public void onConsumerStop(QuartzConsumer quartzConsumer) throws Exception{
    if (jobAdded.get()) {
        pauseTrigger();
    }
    this.processor = null;
}",java:S1172,
"public Double getSelectivity(RelNode rel, RelMetadataQuery mq, @Nullable RexNode predicate){
    return RelMdUtil.guessSelectivity(predicate);
}",java:S1172,
"protected AttributeMap childHttpConfig(SdkClientConfiguration configuration){
    return childHttpConfig();
}",java:S1172,
"private void listenOn(InetSocketAddress address, BookieSocketAddress bookieAddress) throws InterruptedException{
    if (!conf.isDisableServerSocketBind()) {
        ServerBootstrap bootstrap = new ServerBootstrap();
        bootstrap.option(ChannelOption.ALLOCATOR, allocator);
        bootstrap.childOption(ChannelOption.ALLOCATOR, allocator);
        bootstrap.group(acceptorGroup, eventLoopGroup);
        bootstrap.childOption(ChannelOption.TCP_NODELAY, conf.getServerTcpNoDelay());
        bootstrap.childOption(ChannelOption.SO_LINGER, conf.getServerSockLinger());
        bootstrap.childOption(ChannelOption.RCVBUF_ALLOCATOR, new AdaptiveRecvByteBufAllocator(conf.getRecvByteBufAllocatorSizeMin(), conf.getRecvByteBufAllocatorSizeInitial(), conf.getRecvByteBufAllocatorSizeMax()));
        bootstrap.option(ChannelOption.WRITE_BUFFER_WATER_MARK, new WriteBufferWaterMark(conf.getServerWriteBufferLowWaterMark(), conf.getServerWriteBufferHighWaterMark()));
        if (eventLoopGroup instanceof IOUringEventLoopGroup) {
            bootstrap.channel(IOUringServerSocketChannel.class);
        } else if (eventLoopGroup instanceof EpollEventLoopGroup) {
            bootstrap.channel(EpollServerSocketChannel.class);
        } else {
            bootstrap.channel(NioServerSocketChannel.class);
        }
        bootstrap.childHandler(new ChannelInitializer<SocketChannel>() {

            @Override
            protected void initChannel(SocketChannel ch) throws Exception {
                synchronized (suspensionLock) {
                    while (suspended) {
                        suspensionLock.wait();
                    }
                }
                BookieSideConnectionPeerContextHandler contextHandler = new BookieSideConnectionPeerContextHandler();
                ChannelPipeline pipeline = ch.pipeline();
                pipeline.addLast(""consolidation"", new FlushConsolidationHandler(1024, true));
                pipeline.addLast(""bytebufList"", ByteBufList.ENCODER);
                pipeline.addLast(""lengthbaseddecoder"", new LengthFieldBasedFrameDecoder(maxFrameSize, 0, 4, 0, 4));
                pipeline.addLast(""bookieProtoDecoder"", new BookieProtoEncoding.RequestDecoder(registry));
                pipeline.addLast(""bookieProtoEncoder"", new BookieProtoEncoding.ResponseEncoder(registry));
                pipeline.addLast(""bookieAuthHandler"", new AuthHandler.ServerSideHandler(contextHandler.getConnectionPeer(), authProviderFactory));
                ChannelInboundHandler requestHandler = isRunning.get() ? new BookieRequestHandler(conf, requestProcessor, allChannels) : new RejectRequestHandler();
                pipeline.addLast(""bookieRequestHandler"", requestHandler);
                pipeline.addLast(""contextHandler"", contextHandler);
            }
        });
        LOG.info(""Binding bookie-rpc endpoint to {}"", address);
        Channel listen = bootstrap.bind(address.getAddress(), address.getPort()).sync().channel();
        if (listen.localAddress() instanceof InetSocketAddress) {
            if (conf.getBookiePort() == 0) {
                conf.setBookiePort(((InetSocketAddress) listen.localAddress()).getPort());
            }
        }
    }
    if (conf.isEnableLocalTransport()) {
        ServerBootstrap jvmBootstrap = new ServerBootstrap();
        jvmBootstrap.childOption(ChannelOption.ALLOCATOR, new PooledByteBufAllocator(true));
        jvmBootstrap.group(jvmEventLoopGroup, jvmEventLoopGroup);
        jvmBootstrap.childOption(ChannelOption.TCP_NODELAY, conf.getServerTcpNoDelay());
        jvmBootstrap.childOption(ChannelOption.SO_KEEPALIVE, conf.getServerSockKeepalive());
        jvmBootstrap.childOption(ChannelOption.SO_LINGER, conf.getServerSockLinger());
        jvmBootstrap.childOption(ChannelOption.RCVBUF_ALLOCATOR, new AdaptiveRecvByteBufAllocator(conf.getRecvByteBufAllocatorSizeMin(), conf.getRecvByteBufAllocatorSizeInitial(), conf.getRecvByteBufAllocatorSizeMax()));
        jvmBootstrap.option(ChannelOption.WRITE_BUFFER_WATER_MARK, new WriteBufferWaterMark(conf.getServerWriteBufferLowWaterMark(), conf.getServerWriteBufferHighWaterMark()));
        if (jvmEventLoopGroup instanceof DefaultEventLoopGroup) {
            jvmBootstrap.channel(LocalServerChannel.class);
        } else if (jvmEventLoopGroup instanceof IOUringEventLoopGroup) {
            jvmBootstrap.channel(IOUringServerSocketChannel.class);
        } else if (jvmEventLoopGroup instanceof EpollEventLoopGroup) {
            jvmBootstrap.channel(EpollServerSocketChannel.class);
        } else {
            jvmBootstrap.channel(NioServerSocketChannel.class);
        }
        jvmBootstrap.childHandler(new ChannelInitializer<LocalChannel>() {

            @Override
            protected void initChannel(LocalChannel ch) throws Exception {
                synchronized (suspensionLock) {
                    while (suspended) {
                        suspensionLock.wait();
                    }
                }
                BookieSideConnectionPeerContextHandler contextHandler = new BookieSideConnectionPeerContextHandler();
                ChannelPipeline pipeline = ch.pipeline();
                pipeline.addLast(""lengthbaseddecoder"", new LengthFieldBasedFrameDecoder(maxFrameSize, 0, 4, 0, 4));
                pipeline.addLast(""bookieProtoDecoder"", new BookieProtoEncoding.RequestDecoder(registry));
                pipeline.addLast(""bookieProtoEncoder"", new BookieProtoEncoding.ResponseEncoder(registry));
                pipeline.addLast(""bookieAuthHandler"", new AuthHandler.ServerSideHandler(contextHandler.getConnectionPeer(), authProviderFactory));
                ChannelInboundHandler requestHandler = isRunning.get() ? new BookieRequestHandler(conf, requestProcessor, allChannels) : new RejectRequestHandler();
                pipeline.addLast(""bookieRequestHandler"", requestHandler);
                pipeline.addLast(""contextHandler"", contextHandler);
            }
        });
        LOG.info(""Binding jvm bookie-rpc endpoint to {}"", bookieId.toString());
        jvmBootstrap.bind(new LocalAddress(bookieId.toString())).sync();
        LocalBookiesRegistry.registerLocalBookieAddress(bookieId);
    }
}",java:S1172,
"protected boolean shouldEmit(T val){
    return true;
}",java:S1172,
"public float readFloat(String tag) throws IOException{
    in.skipType();
    return in.readFloat();
}",java:S1172,
"public Timestamp deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException{
    if (!(json instanceof JsonPrimitive)) {
        throw new JsonParseException(""The date should be a string value"");
    }
    try {
        Date date = format.parse(json.getAsString());
        return new Timestamp(date.getTime());
    } catch (ParseException e) {
        throw new JsonParseException(e);
    }
}",java:S1172,
"public boolean isNull(RexFieldAccess ref){
    return false;
}",java:S1172,
"public TimetableType produce(Timetable timetable, boolean addExtension){
    TimetableType jaxbTimetable = tridentFactory.createTimetableType();
    populateFromModel(jaxbTimetable, timetable);
    jaxbTimetable.setComment(getNotEmptyString(timetable.getComment()));
    jaxbTimetable.setVersion(getNotEmptyString(timetable.getVersion()));
    for (LocalDate peculiarDay : timetable.getEffectiveDates()) {
        if (peculiarDay != null) {
            jaxbTimetable.getCalendarDay().add(toCalendar(peculiarDay));
        }
    }
    for (Period period : timetable.getEffectivePeriods()) {
        if (period != null) {
            PeriodType jaxbPeriod = tridentFactory.createPeriodType();
            jaxbPeriod.setStartOfPeriod(toCalendar(period.getStartDate()));
            jaxbPeriod.setEndOfPeriod(toCalendar(period.getEndDate()));
            jaxbTimetable.getPeriod().add(jaxbPeriod);
        }
    }
    if (timetable.getDayTypes() != null) {
        for (DayTypeEnum dayType : timetable.getDayTypes()) {
            if (dayType != null) {
                try {
                    jaxbTimetable.getDayType().add(DayTypeType.fromValue(dayType.name()));
                } catch (IllegalArgumentException e) {
                }
            }
        }
    }
    return jaxbTimetable;
}",java:S1172,
"public static Builder<T, B, R> builder(EnhancedType<T> itemType, EnhancedType<B> builderType, EnhancedType<R> attributeType){
    return new Builder<>(attributeType);
}",java:S1172,
"public boolean isElementEnabled(final T element){
    return true;
}",java:S1172,
"public boolean dropall(String line){
    if (beeLine.getDatabaseConnection() == null || beeLine.getDatabaseConnection().getUrl() == null) {
        return beeLine.error(beeLine.loc(""no-current-connection""));
    }
    try {
        if (!(beeLine.getConsoleReader().readLine(beeLine.loc(""really-drop-all"")).equals(""y""))) {
            return beeLine.error(""abort-drop-all"");
        }
        List<String> cmds = new LinkedList<String>();
        ResultSet rs = beeLine.getTables();
        try {
            while (rs.next()) {
                cmds.add(""DROP TABLE "" + rs.getString(""TABLE_NAME"") + beeLine.getOpts().getDelimiter());
            }
        } finally {
            try {
                rs.close();
            } catch (Exception e) {
                beeLine.error(e);
            }
        }
        return beeLine.runCommands(cmds) == cmds.size();
    } catch (Exception e) {
        return beeLine.error(e);
    }
}",java:S1172,
"public static Builder<T, B, R> builder(Class<T> itemClass, Class<B> builderClass, EnhancedType<R> attributeType){
    return new Builder<>(attributeType);
}",java:S1172,
"public Double getMaxRowCount(Values values, RelMetadataQuery mq){
    return (double) values.getTuples().size();
}",java:S1172,
"public Shuttle preVisit(FunctionExpression functionExpression){
    return this;
}",java:S1172,
"private ManagementServicePort getManagementService(boolean forceLoading) throws Exception{
    String method = ""getManagementService"";
    log.debug(method + "". BEGIN"");
    try {
        managementService = acarisServiceFactory.getAcarisService().getManagementServicePort();
        log.info(method + "". AcarisManagementServiceInterface loaded correctly"");
    } catch (Exception e) {
        log.error(method + "". Exception loading interface "" + e);
        throw e;
    }
    return managementService;
}",java:S1172,
"private static void ST_MakeGrid(final Geometry geom, final BigDecimal deltaX, final BigDecimal deltaY){
}",java:S1172,
"public Stream<SnapDataRequest> getRootStorageRequests(final WorldStateStorage worldStateStorage){
    return Stream.empty();
}",java:S1172,
"public boolean scan(String line) throws IOException{
    TreeSet<String> names = new TreeSet<String>();
    if (beeLine.getDrivers() == null) {
        beeLine.setDrivers(beeLine.scanDrivers());
    }
    beeLine.info(beeLine.loc(""drivers-found-count"", beeLine.getDrivers().size()));
    for (Iterator<Driver> i = beeLine.getDrivers().iterator(); i.hasNext(); ) {
        names.add(i.next().getClass().getName());
    }
    beeLine.output(beeLine.getColorBuffer().bold(beeLine.getColorBuffer().pad(beeLine.loc(""compliant""), 10).getMono()).bold(beeLine.getColorBuffer().pad(beeLine.loc(""jdbc-version""), 8).getMono()).bold(beeLine.getColorBuffer(beeLine.loc(""driver-class"")).getMono()));
    for (Iterator<String> i = names.iterator(); i.hasNext(); ) {
        String name = i.next().toString();
        try {
            Driver driver = (Driver) Class.forName(name).newInstance();
            ColorBuffer msg = beeLine.getColorBuffer().pad(driver.jdbcCompliant() ? ""yes"" : ""no"", 10).pad(driver.getMajorVersion() + ""."" + driver.getMinorVersion(), 8).append(name);
            if (driver.jdbcCompliant()) {
                beeLine.output(msg);
            } else {
                beeLine.output(beeLine.getColorBuffer().red(msg.getMono()));
            }
        } catch (Throwable t) {
            beeLine.output(beeLine.getColorBuffer().red(name));
        }
    }
    return true;
}",java:S1172,
"public void registerTaskRejected(String host){
    numRejectedTasks++;
}",java:S1172,
"public int readInt(String tag) throws IOException{
    in.skipType();
    return in.readInt();
}",java:S1172,
"private void setupXframeFilter(Builder b, Map<String, String> params){
    FilterHolder holder = new FilterHolder();
    holder.setClassName(QuotingInputFilter.class.getName());
    holder.setInitParameters(params);
    ServletHandler handler = webAppContext.getServletHandler();
    handler.addFilterWithMapping(holder, ""/*"", FilterMapping.ALL);
}",java:S1172,
"private JsonRepresentation getArrayEnsured(final String path, final JsonNode node){
    if (representsNull(node)) {
        return null;
    }
    return new JsonRepresentation(node).ensureArray();
}",java:S1172,
"public static Builder<T> builder(Class<? extends T> clzz){
    return new Builder<>();
}",java:S1172,
"private List<RouteSection> createRouteSections(Context context, Referential referential, GtfsImportParameters configuration, JourneyPattern journeyPattern, VehicleJourney vehicleJourney, Iterable<GtfsShape> gtfsShapes){
    List<RouteSection> sections = new ArrayList<>();
    GeometryFactory factory = new GeometryFactory(new PrecisionModel(10), 4326);
    List<OrderedCoordinate> coordinates = new ArrayList<>();
    List<LineSegment> segments = new ArrayList<>();
    Coordinate previous = null;
    String shapeId = null;
    for (GtfsShape gtfsShape : gtfsShapes) {
        if (gtfsShape.getShapePtLon() == null || gtfsShape.getShapePtLat() == null) {
            log.error(""line "" + gtfsShape.getId() + "" missing coordinates for shape "" + gtfsShape.getShapeId());
            return sections;
        }
        if (shapeId == null) {
            shapeId = gtfsShape.getShapeId();
        }
        OrderedCoordinate current = new OrderedCoordinate(gtfsShape.getShapePtLon().doubleValue(), gtfsShape.getShapePtLat().doubleValue(), gtfsShape.getShapePtSequence());
        if (previous != null) {
            if (Math.abs(current.x - previous.x) < narrow && Math.abs(current.y - previous.y) < narrow) {
                continue;
            }
            coordinates.add(current);
        } else {
            coordinates.add(current);
        }
        previous = current;
    }
    if (coordinates.size() < 2) {
        log.warn(""no segments found"");
        return sections;
    }
    previous = null;
    Collections.sort(coordinates, COORDINATE_SORTER);
    for (OrderedCoordinate current : coordinates) {
        if (previous != null) {
            LineSegment segment = new LineSegment(previous, current);
            segments.add(segment);
        }
        previous = current;
    }
    int segmentRank = 0;
    previous = null;
    String prefix = journeyPattern.objectIdPrefix();
    StopArea previousLocation = null;
    ScheduledStopPoint previousScheduledStopPoint = null;
    for (StopPoint stop : journeyPattern.getStopPoints()) {
        StopArea location = stop.getScheduledStopPoint().getContainedInStopAreaRef().getObject();
        Coordinate point = new Coordinate(location.getLongitude().doubleValue(), location.getLatitude().doubleValue());
        double distance_min = Double.MAX_VALUE;
        int rank = 0;
        for (int i = segmentRank; i < segments.size(); i++) {
            double distance = segments.get(i).distance(point);
            if (distance < distance_min) {
                distance_min = distance;
                rank = i;
            }
        }
        Coordinate projection = null;
        boolean lastSegmentIncluded = false;
        double factor = segments.get(rank).projectionFactor(point);
        int intFactor = (int) (factor * 100.);
        if (factor <= 0.05) {
            projection = segments.get(rank).getCoordinate(0);
            intFactor = 0;
        } else if (factor >= 0.95) {
            projection = segments.get(rank).getCoordinate(1);
            lastSegmentIncluded = true;
            intFactor = 100;
        } else {
            projection = segments.get(rank).project(point);
        }
        if (previous != null) {
            List<Coordinate> coords = new ArrayList<>();
            coords.add(previous);
            for (int i = segmentRank; i < rank; i++) {
                coords.add(segments.get(i).getCoordinate(1));
            }
            coords.add(projection);
            if (lastSegmentIncluded)
                rank++;
            String routeSectionId = prefix + "":"" + RouteSection.ROUTE_SECTION_KEY + "":"" + journeyPattern.objectIdSuffix() + ""_"" + shapeId + ""_"" + previousLocation.objectIdSuffix() + ""_"" + location.objectIdSuffix() + ""_"" + intFactor;
            RouteSection section = ObjectFactory.getRouteSection(referential, routeSectionId);
            if (!section.isFilled()) {
                Coordinate[] inputCoords = new Coordinate[2];
                section.setFromScheduledStopPoint(previousScheduledStopPoint);
                inputCoords[0] = new Coordinate(previousLocation.getLongitude().doubleValue(), previousLocation.getLatitude().doubleValue());
                section.setToScheduledStopPoint(stop.getScheduledStopPoint());
                inputCoords[1] = new Coordinate(location.getLongitude().doubleValue(), location.getLatitude().doubleValue());
                section.setProcessedGeometry(factory.createLineString(coords.toArray(new Coordinate[0])));
                section.setInputGeometry(factory.createLineString(inputCoords));
                section.setNoProcessing(false);
                try {
                    double distance = section.getProcessedGeometry().getLength();
                    distance *= (Math.PI / 180) * 6378137;
                    section.setDistance(BigDecimal.valueOf(distance));
                } catch (NumberFormatException e) {
                    log.error(shapeId + "" : problem with section between "" + previousLocation.getName() + ""("" + previousLocation.getObjectId() + "" and "" + location.getName() + ""("" + location.getObjectId());
                    log.error(""coords ("" + coords.size() + "") :"");
                    for (Coordinate coordinate : coords) {
                        log.error(""lat = "" + coordinate.y + "" , lon = "" + coordinate.x);
                    }
                    sections.clear();
                    return sections;
                }
            }
            section.setFilled(true);
            sections.add(section);
        }
        previous = projection;
        previousLocation = location;
        previousScheduledStopPoint = stop.getScheduledStopPoint();
        segmentRank = rank;
    }
    return sections;
}",java:S1172,
" static String columnClassName(Type hiveType, JdbcColumnAttributes columnAttributes) throws SQLException{
    int columnType = hiveTypeToSqlType(hiveType);
    switch(columnType) {
        case Types.NULL:
            return ""null"";
        case Types.BOOLEAN:
            return Boolean.class.getName();
        case Types.CHAR:
        case Types.VARCHAR:
            return String.class.getName();
        case Types.TINYINT:
            return Byte.class.getName();
        case Types.SMALLINT:
            return Short.class.getName();
        case Types.INTEGER:
            return Integer.class.getName();
        case Types.BIGINT:
            return Long.class.getName();
        case Types.DATE:
            return Date.class.getName();
        case Types.FLOAT:
            return Float.class.getName();
        case Types.DOUBLE:
            return Double.class.getName();
        case Types.TIMESTAMP:
            return Timestamp.class.getName();
        case Types.TIMESTAMP_WITH_TIMEZONE:
            return TimestampTZ.class.getName();
        case Types.DECIMAL:
            return BigInteger.class.getName();
        case Types.BINARY:
            return byte[].class.getName();
        case Types.OTHER:
        case Types.JAVA_OBJECT:
            {
                switch(hiveType) {
                    case INTERVAL_YEAR_MONTH_TYPE:
                        return HiveIntervalYearMonth.class.getName();
                    case INTERVAL_DAY_TIME_TYPE:
                        return HiveIntervalDayTime.class.getName();
                    default:
                        return String.class.getName();
                }
            }
        case Types.ARRAY:
        case Types.STRUCT:
            return String.class.getName();
        default:
            throw new SQLException(""Invalid column type: "" + columnType);
    }
}",java:S1172,
"private DefeasibilityStatus checkDefeater(List<? extends FactHandle> premise){
    return DefeasibilityStatus.DEFEATEDLY;
}",java:S1172,
"public ChouetteArea.AreaCentroid produce(StopArea area, boolean addExtension){
    ChouetteArea.AreaCentroid jaxbAreaCentroid = tridentFactory.createChouettePTNetworkTypeChouetteAreaAreaCentroid();
    populateFromModel(jaxbAreaCentroid, area);
    jaxbAreaCentroid.setObjectId(area.objectIdPrefix() + "":AreaCentroid:"" + area.objectIdSuffix());
    jaxbAreaCentroid.setComment(getNotEmptyString(area.getComment()));
    jaxbAreaCentroid.setName(area.getName());
    if (area.hasAddress()) {
        AddressType jaxbAddress = tridentFactory.createAddressType();
        jaxbAddress.setCountryCode(getNotEmptyString(area.getCountryCode()));
        jaxbAddress.setStreetName(getNotEmptyString(area.getStreetName()));
        jaxbAreaCentroid.setAddress(jaxbAddress);
    }
    jaxbAreaCentroid.setContainedIn(getNonEmptyObjectId(area));
    if (area.hasCoordinates()) {
        LongLatTypeEnum longLatType = area.getLongLatType();
        jaxbAreaCentroid.setLatitude(area.getLatitude());
        jaxbAreaCentroid.setLongitude(area.getLongitude());
        try {
            jaxbAreaCentroid.setLongLatType(LongLatTypeType.fromValue(longLatType.name()));
        } catch (IllegalArgumentException e) {
        }
    } else {
        log.error(""missing coordinates for StopArea "" + area.getObjectId() + "" "" + area.getName());
        jaxbAreaCentroid.setLatitude(BigDecimal.ZERO);
        jaxbAreaCentroid.setLongitude(BigDecimal.ZERO);
        jaxbAreaCentroid.setLongLatType(LongLatTypeType.WGS_84);
    }
    if (area.hasProjection()) {
        ProjectedPointType jaxbProjectedPoint = tridentFactory.createProjectedPointType();
        jaxbProjectedPoint.setProjectionType(area.getProjectionType());
        jaxbProjectedPoint.setX(area.getX());
        jaxbProjectedPoint.setY(area.getY());
        jaxbAreaCentroid.setProjectedPoint(jaxbProjectedPoint);
    }
    return jaxbAreaCentroid;
}",java:S1172,
" static Builder<T> builder(Class<? extends T> responseClass){
    return DefaultWaiter.builder();
}",java:S1172,
"public void export(BibDatabaseContext databaseContext, Path file, List<BibEntry> entries, List<Path> fileDirForDatabase) throws Exception{
    export(databaseContext, file, entries);
}",java:S1172,
"public static int eval(Short x){
    return -1;
}",java:S1172,
"public void writeFloat(float f, String tag) throws IOException{
    out.writeFloat(f);
}",java:S1172,
"public Intent getIntent(final MethodFacade method){
    return intent;
}",java:S1172,
"private void processXmlTransient(final ProcessMethodContext processMethodContext, final XmlAccessType accessType){
    val xmlTransientIfAny = processMethodContext.synthesizeOnMethod(XmlTransient.class);
    if (!xmlTransientIfAny.isPresent()) {
        return;
    }
    val facetHolder = processMethodContext.getFacetHolder();
    addFacet(new XmlTransientFacetDefault(facetHolder));
}",java:S1172,
"protected void handleQTake(String[] args){
    try {
        println(getQueue().take());
    } catch (InterruptedException e) {
        currentThread().interrupt();
        e.printStackTrace();
    }
}",java:S1172,
"protected void updateRecord(Data key, CacheRecord record, long expiryTime, long now, UUID origin){
    record.setExpirationTime(expiryTime);
    invalidateEntry(key, origin);
}",java:S1172,
"public void fireAfterFunctionRemoved(final InternalKnowledgePackage pkg, final String function){
    if (hasListeners()) {
        AfterFunctionRemovedEvent event = new AfterFunctionRemovedEventImpl(this.kBase, function);
        notifyAllListeners(event, (l, e) -> l.afterFunctionRemoved(e));
    }
}",java:S1172,
"public PTNetworkType produce(Network ptNetwork, boolean addExtension){
    PTNetworkType jaxbPTNetwork = tridentFactory.createPTNetworkType();
    populateFromModel(jaxbPTNetwork, ptNetwork);
    jaxbPTNetwork.setName(ptNetwork.getName());
    jaxbPTNetwork.setRegistration(getRegistration(ptNetwork.getRegistrationNumber()));
    jaxbPTNetwork.setDescription(getNotEmptyString(ptNetwork.getDescription()));
    jaxbPTNetwork.setSourceIdentifier(getNotEmptyString(ptNetwork.getSourceIdentifier()));
    jaxbPTNetwork.setSourceName(getNotEmptyString(ptNetwork.getSourceName()));
    jaxbPTNetwork.setComment(getNotEmptyString(ptNetwork.getComment()));
    if (ptNetwork.getVersionDate() != null) {
        jaxbPTNetwork.setVersionDate(toCalendar(ptNetwork.getVersionDate()));
    } else {
        jaxbPTNetwork.setVersionDate(toCalendar(LocalDateTime.now()));
    }
    try {
        PTNetworkSourceTypeEnum ptNetworkSourceType = ptNetwork.getSourceType();
        if (ptNetworkSourceType != null) {
            jaxbPTNetwork.setSourceType(org.trident.schema.trident.SourceTypeType.fromValue(ptNetworkSourceType.name()));
        }
    } catch (IllegalArgumentException e) {
    }
    return jaxbPTNetwork;
}",java:S1172,
"public static StackItem wrapDerived(byte[] bytes, Type type, boolean derived){
    return new StackItem(ScriptData.of(bytes), type, true);
}",java:S1172,
"public static org.apache.axis.encoding.Serializer getSerializer(java.lang.String mechType, java.lang.Class _javaType, javax.xml.namespace.QName _xmlType){
    return new org.apache.axis.encoding.ser.BeanSerializer(_javaType, _xmlType, typeDesc);
}",java:S1172,
"protected String getTargetEntity(Optional<URI> uri){
    return TARGET_ENTITY;
}",java:S1172,
"public void hintMapEvent(Address caller, String mapName, EntryEventType eventType, int numberOfEntriesAffected, int partitionId){
    Collection<PartitionAccumulatorRegistry> partitionAccumulatorRegistries = getPartitionAccumulatorRegistries(mapName);
    for (PartitionAccumulatorRegistry accumulatorRegistry : partitionAccumulatorRegistries) {
        Accumulator accumulator = accumulatorRegistry.getOrCreate(partitionId);
        QueryCacheEventData singleEventData = newQueryCacheEventDataBuilder(false).withPartitionId(partitionId).withEventType(eventType.getType()).build();
        accumulator.accumulate(singleEventData);
    }
}",java:S1172,
"private DrlxParseResult parseOOPathExpr(OOPathExpr ooPathExpr, Class<?> patternType, String bindingId, Expression drlxExpr, boolean hasBind, String expression){
    Type exprType = null;
    if (hasBind) {
        final ExpressionTyper expressionTyper = new ExpressionTyper(context, patternType, bindingId, false, new ExpressionTyperContext());
        TypedExpressionResult typedExpressionResult = expressionTyper.toTypedExpression(ooPathExpr);
        Optional<TypedExpression> typedExpression = typedExpressionResult.getTypedExpression();
        if (typedExpression.isEmpty()) {
            return new DrlxParseFail();
        }
        exprType = typedExpression.get().getType();
    }
    return new SingleDrlxParseSuccess(patternType, bindingId, drlxExpr, exprType).setIsPredicate(true);
}",java:S1172,
"protected void initializeRecordStore(String mapName, RecordStore recordStore){
    recordStore.reset();
}",java:S1172,
"private List<String> ordered(final List<String> propertyIds){
    return Arrays.asList(""timestamp"", ""target"", ""logicalMemberIdentifier"", ""username"", ""duration"", ""interactionId"", ""sequence"");
}",java:S1172,
"private static Atom[] getAllNonHAtomArray(Structure s, boolean hetAtoms, AtomIterator iter){
    List<Atom> atoms = new ArrayList<>();
    while (iter.hasNext()) {
        Atom a = iter.next();
        if (a.getElement() == Element.H)
            continue;
        Group g = a.getGroup();
        if (g.isWater())
            continue;
        if (!hetAtoms && g.getType().equals(GroupType.HETATM))
            continue;
        atoms.add(a);
    }
    return atoms.toArray(new Atom[0]);
}",java:S1172,
"public T relativeAfter(long duration){
    return (T) this;
}",java:S1172,
"private void processEvent(DependencyReport report, MessageTree tree, Event event){
    String type = event.getType();
    if (m_exceptions.contains(type)) {
        long current = event.getTimestamp() / 1000 / 60;
        int min = (int) (current % (60));
        Segment segment = report.findOrCreateSegment(min);
        Index index = segment.findOrCreateIndex(""Exception"");
        index.incTotalCount();
        index.incErrorCount();
    }
}",java:S1172,
"protected void handleInstances(String[] args){
    Collection<DistributedObject> distributedObjects = hazelcast.getDistributedObjects();
    for (DistributedObject distributedObject : distributedObjects) {
        println(distributedObject);
    }
}",java:S1172,
"public Set<ImmutableBitSet> getUniqueKeys(Union rel, RelMetadataQuery mq, boolean ignoreNulls){
    if (!rel.all) {
        return ImmutableSet.of(ImmutableBitSet.range(rel.getRowType().getFieldCount()));
    }
    return ImmutableSet.of();
}",java:S1172,
"protected Object parseUsingJaxb(Element element, ParserContext parserContext, Binder<Node> binder){
    try {
        return binder.unmarshal(element);
    } catch (JAXBException e) {
        throw new BeanDefinitionStoreException(""Failed to parse JAXB element"", e);
    }
}",java:S1172,
"public boolean brief(String line){
    beeLine.info(""verbose: off"");
    return set(""set verbose false"");
}",java:S1172,
"private static Boolean isUdf(@SuppressWarnings(""unused"") SqlOperator operator){
    return false;
}",java:S1172,
"private void rollbackFromDropOnDataNodes(ConfigNodeProcedureEnv env){
    LOGGER.info(""DropPipePluginProcedure: rollbackFromDropOnDataNodes({})"", pluginName);
}",java:S1172,
"private DefeasibilityStatus checkDefeasible(List<? extends FactHandle> premise){
    return DefeasibilityStatus.DEFEASIBLY;
}",java:S1172,
"private static IndexesStats createStats(Node node, String mapName, boolean global, InMemoryFormat inMemoryFormat, boolean statisticsEnabled){
    if (statisticsEnabled) {
        if (global) {
            return inMemoryFormat.equals(NATIVE) ? new HDGlobalIndexesStats() : new GlobalIndexesStats();
        } else {
            return new PartitionIndexesStats();
        }
    } else {
        return IndexesStats.EMPTY;
    }
}",java:S1172,
"public void startVector(ArrayList v, String tag) throws IOException{
    out.writeVectorHeader(v.size());
}",java:S1172,
"protected boolean callReplaceSync(K key, Data keyData, V newValue, Data newValueData, Data oldValueData, Data expiryPolicyData){
    CompletableFuture<Boolean> future = doReplaceOnServer(keyData, newValueData, oldValueData, expiryPolicyData, true, null);
    try {
        return future.get();
    } catch (Throwable e) {
        throw rethrowAllowedTypeFirst(e, CacheException.class);
    }
}",java:S1172,
"protected void convert(Context context, GtfsTrip gtfsTrip, VehicleJourney vehicleJourney){
    if (gtfsTrip.getTripShortName() != null) {
        vehicleJourney.setPrivateCode(gtfsTrip.getTripShortName());
    }
    if (StringUtils.trimToNull(gtfsTrip.getTripHeadSign()) != null) {
        vehicleJourney.setPublishedJourneyName(gtfsTrip.getTripHeadSign());
    }
    if (gtfsTrip.getWheelchairAccessible() != null) {
        switch(gtfsTrip.getWheelchairAccessible()) {
            case NoInformation:
                vehicleJourney.setMobilityRestrictedSuitability(null);
                break;
            case NoAllowed:
                vehicleJourney.setMobilityRestrictedSuitability(Boolean.FALSE);
                break;
            case Allowed:
                vehicleJourney.setMobilityRestrictedSuitability(Boolean.TRUE);
                break;
        }
    }
    vehicleJourney.setFilled(true);
}",java:S1172,
"public void validate(Context context, String filenameInfo, String checkPointName){
    ValidationReporter validationReporter = ValidationReporter.Factory.getInstance();
    validationReporter.reportSuccess(context, checkPointName);
}",java:S1172,
"public void removeFromIndex(PdfIndexer indexer, BibEntry entry, List<LinkedFile> linkedFiles){
    for (LinkedFile file : linkedFiles) {
        enqueueTask(() -> indexer.removeFromIndex(file.getLink()));
    }
}",java:S1172,
"protected ActionsPanel<T> getActions(final IModel<T> model){
    return null;
}",java:S1172,
"public void startMap(TreeMap m, String tag) throws IOException{
    out.writeMapHeader(m.size());
}",java:S1172,
"private List<Object> evaluateObject(ValueResolver valueResolver, BaseTuple leftBaseTuple, XpathChunk chunk, List<Object> list, Object object){
    Object result = chunk.evaluate(object);
    if (!chunk.lazy && result instanceof ReactiveObject) {
        ((ReactiveObject) result).addTuple(leftBaseTuple);
    }
    if (chunk.iterate && result instanceof Iterable) {
        for (Object value : (Iterable<?>) result) {
            if (!chunk.lazy && value instanceof ReactiveObject) {
                ((ReactiveObject) value).addTuple(leftBaseTuple);
            }
            if (value != null) {
                list.add(value);
            }
        }
    } else if (result != null) {
        list.add(result);
    }
    return list;
}",java:S1172,
"private InputSplit[] getSplitsInternal(JobConf jobConf, int numSplits) throws IOException{
    if (UserGroupInformation.getCurrentUser().hasKerberosCredentials()) {
        TableMapReduceUtil.initCredentials(jobConf);
    }
    String hbaseTableName = jobConf.get(HBaseSerDe.HBASE_TABLE_NAME);
    Connection conn = ConnectionFactory.createConnection(HBaseConfiguration.create(jobConf));
    TableName tableName = TableName.valueOf(hbaseTableName);
    initializeTable(conn, tableName);
    String hbaseColumnsMapping = jobConf.get(HBaseSerDe.HBASE_COLUMNS_MAPPING);
    boolean doColumnRegexMatching = jobConf.getBoolean(HBaseSerDe.HBASE_COLUMNS_REGEX_MATCHING, true);
    try {
        if (hbaseColumnsMapping == null) {
            throw new IOException(HBaseSerDe.HBASE_COLUMNS_MAPPING + "" required for HBase Table."");
        }
        ColumnMappings columnMappings = null;
        try {
            columnMappings = HBaseSerDe.parseColumnsMapping(hbaseColumnsMapping, doColumnRegexMatching);
        } catch (SerDeException e) {
            throw new IOException(e);
        }
        int iKey = columnMappings.getKeyIndex();
        int iTimestamp = columnMappings.getTimestampIndex();
        ColumnMapping keyMapping = columnMappings.getKeyMapping();
        Scan scan = createFilterScan(jobConf, iKey, iTimestamp, HiveHBaseInputFormatUtil.getStorageFormatOfKey(keyMapping.mappingSpec, jobConf.get(HBaseSerDe.HBASE_TABLE_DEFAULT_STORAGE_TYPE, ""string"")));
        List<String> addedFamilies = new ArrayList<String>();
        for (ColumnMapping colMap : columnMappings) {
            if (colMap.hbaseRowKey || colMap.hbaseTimestamp) {
                continue;
            }
            if (colMap.qualifierName == null) {
                scan.addFamily(colMap.familyNameBytes);
                addedFamilies.add(colMap.familyName);
            } else {
                if (!addedFamilies.contains(colMap.familyName)) {
                    scan.addColumn(colMap.familyNameBytes, colMap.qualifierNameBytes);
                }
            }
        }
        setScan(scan);
        Job job = new Job(jobConf);
        JobContext jobContext = ShimLoader.getHadoopShims().newJobContext(job);
        Path[] tablePaths = FileInputFormat.getInputPaths(jobContext);
        List<org.apache.hadoop.mapreduce.InputSplit> splits = super.getSplits(jobContext);
        InputSplit[] results = new InputSplit[splits.size()];
        for (int i = 0; i < splits.size(); i++) {
            results[i] = new HBaseSplit((TableSplit) splits.get(i), tablePaths[0]);
        }
        return results;
    } finally {
        closeTable();
        conn.close();
    }
}",java:S1172,
"protected boolean isMatchedHiddenFile(GenericFile<T> file, boolean isDirectory){
    String name = file.getFileNameOnly();
    if (name.startsWith(""."")) {
        return false;
    }
    return true;
}",java:S1172,
"private void parseStopPointsInJourneyPattern(Context context, Referential referential, org.rutebanken.netex.model.JourneyPattern_VersionStructure netexJourneyPattern, mobi.chouette.model.JourneyPattern chouetteJourneyPattern, List<StopPoint> routeStopPoints) throws Exception{
    List<PointInLinkSequence_VersionedChildStructure> pointsInLinkSequence = netexJourneyPattern.getPointsInSequence().getPointInJourneyPatternOrStopPointInJourneyPatternOrTimingPointInJourneyPattern();
    for (int i = 0; i < pointsInLinkSequence.size(); i++) {
        PointInLinkSequence_VersionedChildStructure pointInSequence = pointsInLinkSequence.get(i);
        if (!(pointInSequence instanceof StopPointInJourneyPattern)) {
            continue;
        }
        StopPointInJourneyPattern pointInPattern = (StopPointInJourneyPattern) pointInSequence;
        StopPoint stopPointInJourneyPattern = ObjectFactory.getStopPoint(referential, pointInPattern.getId());
        ScheduledStopPointRefStructure scheduledStopPointRef = pointInPattern.getScheduledStopPointRef().getValue();
        ScheduledStopPoint scheduledStopPoint = ObjectFactory.getScheduledStopPoint(referential, scheduledStopPointRef.getRef());
        stopPointInJourneyPattern.setScheduledStopPoint(scheduledStopPoint);
        stopPointInJourneyPattern.setPosition(pointInPattern.getOrder().intValue());
        stopPointInJourneyPattern.setObjectVersion(NetexParserUtils.getVersion(pointInPattern.getVersion()));
        if (pointInPattern.isForAlighting() != null && !pointInPattern.isForAlighting()) {
            stopPointInJourneyPattern.setForAlighting(AlightingPossibilityEnum.forbidden);
        } else if (Boolean.TRUE.equals(pointInPattern.isRequestStop())) {
            stopPointInJourneyPattern.setForAlighting(AlightingPossibilityEnum.request_stop);
        } else {
            stopPointInJourneyPattern.setForAlighting(AlightingPossibilityEnum.normal);
        }
        if (pointInPattern.isForBoarding() != null && !pointInPattern.isForBoarding()) {
            stopPointInJourneyPattern.setForBoarding(BoardingPossibilityEnum.forbidden);
        } else if (Boolean.TRUE.equals(pointInPattern.isRequestStop())) {
            stopPointInJourneyPattern.setForBoarding(BoardingPossibilityEnum.request_stop);
        } else {
            stopPointInJourneyPattern.setForBoarding(BoardingPossibilityEnum.normal);
        }
        chouetteJourneyPattern.addStopPoint(stopPointInJourneyPattern);
        stopPointInJourneyPattern.setRoute(chouetteJourneyPattern.getRoute());
        if (pointInPattern.getDestinationDisplayRef() != null) {
            String destinationDisplayId = pointInPattern.getDestinationDisplayRef().getRef();
            DestinationDisplay destinationDisplay = ObjectFactory.getDestinationDisplay(referential, destinationDisplayId);
            String lineNumber = referential.getLines().values().iterator().next().getNumber();
            if (destinationDisplay.getFrontText() != null && destinationDisplay.getFrontText().startsWith(lineNumber + "" "")) {
                String modifiedDestinationDisplayId = destinationDisplayId + ""-NOLINENUMBER"";
                DestinationDisplay modifiedDestinationDisplay = referential.getSharedDestinationDisplays().get(modifiedDestinationDisplayId);
                if (modifiedDestinationDisplay == null) {
                    modifiedDestinationDisplay = ObjectFactory.getDestinationDisplay(referential, modifiedDestinationDisplayId);
                    modifiedDestinationDisplay.setName(destinationDisplay.getName() == null ? """" : destinationDisplay.getName() + "" (stripped number)"");
                    modifiedDestinationDisplay.setFrontText(destinationDisplay.getFrontText().substring(lineNumber.length() + 1));
                    modifiedDestinationDisplay.setSideText(destinationDisplay.getSideText());
                    modifiedDestinationDisplay.getVias().addAll(destinationDisplay.getVias());
                }
                stopPointInJourneyPattern.setDestinationDisplay(modifiedDestinationDisplay);
            } else {
                stopPointInJourneyPattern.setDestinationDisplay(destinationDisplay);
            }
        }
        if (pointInPattern.getBookingArrangements() != null) {
            BookingArrangementsStructure netexBookingArrangement = pointInPattern.getBookingArrangements();
            BookingArrangement bookingArrangement = new BookingArrangement();
            if (netexBookingArrangement.getBookingNote() != null) {
                bookingArrangement.setBookingNote(netexBookingArrangement.getBookingNote().getValue());
            }
            bookingArrangement.setBookingAccess(NetexParserUtils.toBookingAccess(netexBookingArrangement.getBookingAccess()));
            bookingArrangement.setBookWhen(NetexParserUtils.toPurchaseWhen(netexBookingArrangement.getBookWhen()));
            bookingArrangement.setBuyWhen(netexBookingArrangement.getBuyWhen().stream().map(NetexParserUtils::toPurchaseMoment).collect(Collectors.toList()));
            bookingArrangement.setBookingMethods(netexBookingArrangement.getBookingMethods().stream().map(NetexParserUtils::toBookingMethod).collect(Collectors.toList()));
            bookingArrangement.setLatestBookingTime(netexBookingArrangement.getLatestBookingTime());
            bookingArrangement.setMinimumBookingPeriod(netexBookingArrangement.getMinimumBookingPeriod());
            bookingArrangement.setBookingContact(contactStructureParser.parse(netexBookingArrangement.getBookingContact()));
            stopPointInJourneyPattern.setBookingArrangement(bookingArrangement);
        }
        chouetteJourneyPattern.addStopPoint(stopPointInJourneyPattern);
    }
    List<StopPoint> patternStopPoints = chouetteJourneyPattern.getStopPoints();
    if (CollectionUtils.isNotEmpty(patternStopPoints)) {
        chouetteJourneyPattern.getStopPoints().sort(Comparator.comparingInt(StopPoint::getPosition));
        chouetteJourneyPattern.setDepartureStopPoint(patternStopPoints.get(0));
        chouetteJourneyPattern.setArrivalStopPoint(patternStopPoints.get(patternStopPoints.size() - 1));
    }
    Route chouetteRoute = chouetteJourneyPattern.getRoute();
    chouetteRoute.getStopPoints().forEach(stopPoint -> stopPoint.setPosition(chouetteRoute.getStopPoints().indexOf(stopPoint)));
    chouetteRoute.getStopPoints().sort(Comparator.comparingInt(StopPoint::getPosition));
    chouetteRoute.setFilled(true);
}",java:S1172,
"protected BitMask setNodeConstraintsPropertyReactiveMask(BitMask mask, ObjectType objectType, List<String> accessibleProperties){
    return mask;
}",java:S1172,
"public Double getMinRowCount(Join rel, RelMetadataQuery mq){
    return 0D;
}",java:S1172,
"private void addLinkedFileFromURL(BibDatabaseContext databaseContext, URL url, BibEntry entry, Path targetDirectory){
    LinkedFile newLinkedFile = new LinkedFile(url, """");
    if (!entry.getFiles().contains(newLinkedFile)) {
        LinkedFileViewModel onlineFile = new LinkedFileViewModel(newLinkedFile, entry, databaseContext, Globals.TASK_EXECUTOR, dialogService, preferences);
        onlineFile.download();
    } else {
        dialogService.notify(Localization.lang(""Full text document for entry %0 already linked."", entry.getCitationKey().orElse(Localization.lang(""undefined""))));
    }
}",java:S1172,
"private void addCallProject(String ip, String app, Type type){
    String projectName = app;
    TypeDetailInfo all = m_callProjectsInfo.get(ALL_SERVER);
    if (all == null) {
        all = new TypeDetailInfo(m_reportDuration, ALL_SERVER);
        m_callProjectsInfo.put(ALL_SERVER, all);
    }
    TypeDetailInfo info = m_callProjectsInfo.get(projectName);
    if (info == null) {
        info = new TypeDetailInfo(m_reportDuration, projectName);
        m_callProjectsInfo.put(projectName, info);
    }
    info.mergeType(type);
    all.mergeType(type);
}",java:S1172,
"private Pair<Boolean, Set<String>> buildOperations(Payload payload, Model model, Set<String> defaultValue){
    String operations = payload.getOperations();
    Set<String> ops = new HashSet<String>();
    boolean filter = false;
    if (operations.length() > 0) {
        filter = true;
        String[] op = operations.split("";"");
        for (int i = 0; i < op.length; i++) {
            ops.add(op[i]);
        }
    } else {
        ops.addAll(defaultValue);
    }
    return new Pair<Boolean, Set<String>>(filter, ops);
}",java:S1172,
"private boolean stopScript(String line){
    try {
        beeLine.getScriptOutputFile().close();
    } catch (Exception e) {
        beeLine.handleException(e);
    }
    beeLine.output(beeLine.loc(""script-closed"", beeLine.getScriptOutputFile()));
    beeLine.setScriptOutputFile(null);
    return true;
}",java:S1172,
"private static final int onBreak(Frame frame){
    if (verbose) {
        logger.info(""Continuing with "" + (onBreakReturn == Debugger.CONTINUE ? ""continue"" : ""step-over""));
    }
    return onBreakReturn;
}",java:S1172,
"protected boolean identifierNeedsQuote(String val){
    return true;
}",java:S1172,
"public Shuttle preVisit(BlockStatement blockStatement){
    return this;
}",java:S1172,
"public void deleteContext(ServerContext context, TProtocol in, TProtocol out){
    getSessionManager().removeCurrSession();
    if (context != null && factory != null) {
        ((JudgableServerContext) context).whenDisconnect();
    }
}",java:S1172,
"public static ErrorMessageFactory shouldNotMatch(T actual, Predicate<? super T> predicate, PredicateDescription predicateDescription){
    requireNonNull(predicateDescription, ""The predicate description must not be null"");
    return new ShouldNotMatch(actual, predicateDescription);
}",java:S1172,
"private List<String> makeBasicArgs(String execute, String srcFile, String otherFiles, String statusdir, String completedUrl, boolean enablelog, Boolean enableJobReconnect) throws URISyntaxException, IOException, InterruptedException{
    ArrayList<String> args = new ArrayList<String>();
    ArrayList<String> allFiles = new ArrayList<String>();
    if (TempletonUtils.isset(srcFile)) {
        allFiles.add(TempletonUtils.hadoopFsFilename(srcFile, appConf, runAs));
    }
    if (TempletonUtils.isset(otherFiles)) {
        String[] ofs = TempletonUtils.hadoopFsListAsArray(otherFiles, appConf, runAs);
        allFiles.addAll(Arrays.asList(ofs));
    }
    args.addAll(makeLauncherArgs(appConf, statusdir, completedUrl, allFiles, enablelog, enableJobReconnect, JobType.HIVE));
    if (appConf.hiveArchive() != null && !appConf.hiveArchive().equals("""")) {
        args.add(ARCHIVES);
        args.add(appConf.hiveArchive());
    }
    String extras = appConf.get(AppConfig.HIVE_EXTRA_FILES);
    if (extras != null && extras.length() > 0) {
        boolean foundFiles = false;
        for (int i = 0; i < args.size(); i++) {
            if (FILES.equals(args.get(i))) {
                String value = args.get(i + 1);
                args.set(i + 1, value + "","" + extras);
                foundFiles = true;
            }
        }
        if (!foundFiles) {
            args.add(FILES);
            args.add(extras);
        }
        String[] extraFiles = appConf.getStrings(AppConfig.HIVE_EXTRA_FILES);
        StringBuilder extraFileNames = new StringBuilder();
        for (String file : extraFiles) {
            Path p = new Path(file);
            extraFileNames.append(p.getName()).append("","");
        }
        addDef(args, JobSubmissionConstants.HADOOP_CLASSPATH_EXTRAS, extraFileNames.toString());
    }
    return args;
}",java:S1172,
"public void registerRegionInGroupSuite(SceneGroup group, SceneSuite suite){
    suite.sceneRegions.stream().map(region -> new EntityRegion(this.getScene(), region)).forEach(this::registerRegion);
}",java:S1172,
"public void visitTableSwitchInsn(final int min, final int max, final Label dflt, final Label... labels){
    bcCodes.add(TABLESWITCH);
    bcLabel.add(dflt);
    bcLabelRelativeOffsets.add(byteCodeOffset);
    bcCaseValue.add(min);
    final int count = labels.length;
    bcCaseCount.add(count);
    for (int i = 0; i < count; i++) {
        bcLabel.add(labels[i]);
        bcLabelRelativeOffsets.add(byteCodeOffset);
    }
    final int padding = byteCodeOffset % 4 == 0 ? 0 : 4 - (byteCodeOffset % 4);
    byteCodeOffset += (padding + 12 + 4 * labels.length);
    updateRenumbering();
}",java:S1172,
"public static RexNode swapColumnTableReferences(final RexBuilder rexBuilder, final RexNode node, final Map<RexTableInputRef, ? extends @Nullable Set<RexTableInputRef>> ec, @Nullable final Map<RelTableRef, RelTableRef> tableMapping){
    RexShuttle visitor = new RexShuttle() {

        @Override
        public RexNode visitTableInputRef(RexTableInputRef inputRef) {
            if (ec != null) {
                Set<RexTableInputRef> s = ec.get(inputRef);
                if (s != null) {
                    inputRef = s.iterator().next();
                }
            }
            if (tableMapping != null) {
                RexTableInputRef inputRefFinal = inputRef;
                inputRef = RexTableInputRef.of(requireNonNull(tableMapping.get(inputRef.getTableRef()), () -> ""tableMapping.get(...) for "" + inputRefFinal.getTableRef()), inputRef.getIndex(), inputRef.getType());
            }
            return inputRef;
        }
    };
    return visitor.apply(node);
}",java:S1172,
"private void check3AccessPoint2(Context context, int i, AccessPoint accessPoint, int j, AccessPoint accessPoint2, ValidationParameters parameters){
    if (!accessPoint.hasCoordinates())
        return;
    long distanceMin = parameters.getInterAccessPointDistanceMin();
    if (!accessPoint2.hasCoordinates())
        return;
    if (accessPoint.getName().equals(accessPoint2.getName()))
        return;
    double distance = distance(accessPoint, accessPoint2);
    if (distance < distanceMin) {
        DataLocation location = buildLocation(context, accessPoint);
        DataLocation targetLocation = buildLocation(context, accessPoint2);
        ValidationReporter reporter = ValidationReporter.Factory.getInstance();
        reporter.addCheckPointReportError(context, ACCESS_POINT_2, ACCESS_POINT_2, location, Integer.toString((int) distance), Integer.toString((int) distanceMin), targetLocation);
    }
}",java:S1172,
"private void processNewBinding(Optional<NewBinding> optNewBinding, MethodCallExpr accumulateDSL){
    optNewBinding.ifPresent(newBinding -> {
        final List<Expression> allExpressions = context.getExpressions();
        final MethodCallExpr newBindingExpression = newBinding.bindExpression;
        if (newBinding.patternBinding.size() == 1) {
            new PatternToReplace(context, newBinding.patternBinding).findFromPattern().ifPresent(pattern -> addBindAsLastChainCall(newBindingExpression, pattern));
            String binding = newBinding.patternBinding.iterator().next();
            composeTwoBindings(binding, newBindingExpression);
        } else if (newBinding.patternBinding.size() == 2) {
            String binding = newBinding.patternBinding.iterator().next();
            composeTwoBindings(binding, newBindingExpression);
        } else {
            final MethodCallExpr lastPattern = DrlxParseUtil.findLastPattern(allExpressions).orElseThrow(() -> new RuntimeException(""Need the last pattern to add the binding""));
            final MethodCallExpr replacedBinding = replaceBindingWithPatternBinding(newBindingExpression, lastPattern);
            addBindAsLastChainCall(replacedBinding, lastPattern);
        }
    });
}",java:S1172,
"public RelDistribution distribution(RelNode rel, RelMetadataQuery mq){
    return RelDistributions.SINGLETON;
}",java:S1172,
"private void handleAtomicNumberDec(String[] args){
    println(getAtomicNumber().decrementAndGet());
}",java:S1172,
"protected void resolve(final ClassConstantPool pool){
    resolved = true;
}",java:S1172,
"public synchronized NodePK updateFolderHeader(NodeDetail nd, String alertType) throws WebSitesException{
    try {
        return getWebSiteService().updateFolder(nd, sessionTopic.getNodePK());
    } catch (Exception re) {
        throw new WebSitesException(""WebSiteSessionController.updateFolderHeader()"", SilverpeasException.ERROR, ""webSites.EX_UPDATE_FOLDER_HEADER_FAILED"", re);
    }
}",java:S1172,
"protected Schema getSchemaForSigner(Message message, ValidatorErrorHandler errorHandler) throws XmlSignatureException, SAXException, IOException{
    Schema schema;
    String schemaResourceUri = getSchemaResourceUri(message);
    if (schemaResourceUri == null) {
        schema = null;
    } else {
        schema = getSchema(message);
    }
    return schema;
}",java:S1172,
"private static FullBlock createGenesis(Net n){
    FullBlock genesis = new FullBlockBean();
    genesis.setVersion(BitcoinJ.BLOCK_VERSION_GENESIS);
    genesis.setDifficultyTarget(0x1d07fff8L);
    genesis.setPrevBlockHash(Sha256Hash.ZERO_HASH);
    genesis.setTime(System.currentTimeMillis() / 1000);
    Tx coinbase = new TxBean(genesis);
    try {
        byte[] bytes = Utils.HEX.decode(""04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73"");
        TxInput input = new TxInputBean(coinbase);
        TxOutPoint outPoint = new TxOutPointBean(input);
        outPoint.setHash(Sha256Hash.ZERO_HASH);
        outPoint.setIndex(TxOutPoint.UNCONNECTED);
        input.setScriptBytes(bytes);
        input.setSequenceNumber(TxInput.NO_SEQUENCE);
        input.setOutpoint(outPoint);
        coinbase.getInputs().add(input);
        ByteArrayOutputStream scriptPubKeyBytes = new ByteArrayOutputStream();
        ScriptChunk.writeBytes(scriptPubKeyBytes, Utils.HEX.decode(""04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f""));
        scriptPubKeyBytes.write(ScriptOpCodes.OP_CHECKSIG);
        TxOutput output = new TxOutputBean(coinbase);
        output.setScriptBytes(scriptPubKeyBytes.toByteArray());
        output.setValue(Coin.FIFTY_COINS);
        coinbase.getOutputs().add(output);
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
    genesis.getTransactions().add(coinbase);
    return genesis;
}",java:S1172,
"private void addStats(Context context, ActionReporter reporter, Context validationContext, Referential referential){
    Line line = referential.getLines().values().iterator().next();
    reporter.addObjectReport(context, line.getObjectId(), ActionReporter.OBJECT_TYPE.LINE, NamingUtil.getName(line), ActionReporter.OBJECT_STATE.OK, IO_TYPE.INPUT);
    reporter.setStatToObjectReport(context, line.getObjectId(), ActionReporter.OBJECT_TYPE.LINE, ActionReporter.OBJECT_TYPE.LINE, 1);
}",java:S1172,
"public static StackItem forBytes(byte[] bytes, Type type, boolean derived, StackItem... derivedFrom){
    return new StackItem(ScriptData.of(bytes), Type.BYTES, derived, derivedFrom);
}",java:S1172,
"public boolean config(String line){
    try {
        Properties props = beeLine.getOpts().toProperties();
        Set keys = new TreeSet(props.keySet());
        for (Iterator i = keys.iterator(); i.hasNext(); ) {
            String key = (String) i.next();
            beeLine.output(beeLine.getColorBuffer().green(beeLine.getColorBuffer().pad(key.substring(beeLine.getOpts().PROPERTY_PREFIX.length()), 20).getMono()).append(props.getProperty(key)));
        }
    } catch (Exception e) {
        return beeLine.error(e);
    }
    return true;
}",java:S1172,
"private void buildExceptionDashboard(Model model, Payload payload, long date){
    model.setReportStart(new Date(payload.getDate()));
    model.setReportEnd(new Date(payload.getDate() + TimeHelper.ONE_HOUR - 1));
    int minuteCount = payload.getMinuteCounts();
    int minute = model.getMinute();
    TopReport report = queryTopReport(payload);
    List<String> excludeDomains = Arrays.asList(Constants.FRONT_END);
    TopMetric topMetric = new TopMetric(minuteCount, payload.getTopCounts(), m_configManager, excludeDomains);
    Date end = new Date(payload.getDate() + TimeHelper.ONE_MINUTE * minute);
    Date start = new Date(end.getTime() - TimeHelper.ONE_MINUTE * minuteCount);
    topMetric.setStart(start).setEnd(end);
    if (minuteCount > minute) {
        Payload lastPayload = new Payload();
        Date lastHour = new Date(payload.getDate() - TimeHelper.ONE_HOUR);
        lastPayload.setDate(new SimpleDateFormat(""yyyyMMddHH"").format(lastHour));
        TopReport lastReport = queryTopReport(lastPayload);
        topMetric.visitTopReport(lastReport);
        model.setLastTopReport(lastReport);
    }
    topMetric.visitTopReport(report);
    model.setTopReport(report);
    model.setTopMetric(topMetric);
}",java:S1172,
"public static ScannableTable eval(boolean b){
    return new ScannableTable() {

        @Override
        public Enumerable<@Nullable Object[]> scan(DataContext root) {
            final Enumerable<String> enumerable = Processes.processLines(""git"", ""log"", ""--pretty=raw"");
            return new AbstractEnumerable<@Nullable Object[]>() {

                @Override
                public Enumerator<@Nullable Object[]> enumerator() {
                    final Enumerator<String> e = enumerable.enumerator();
                    return new Enumerator<@Nullable Object[]>() {

                        @Nullable
                        private Object @Nullable [] objects;

                        private final StringBuilder b = new StringBuilder();

                        @Override
                        @Nullable
                        public Object[] current() {
                            if (objects == null) {
                                throw new NoSuchElementException();
                            }
                            return objects;
                        }

                        @Override
                        public boolean moveNext() {
                            if (!e.moveNext()) {
                                objects = null;
                                return false;
                            }
                            objects = new Object[9];
                            for (; ; ) {
                                final String line = e.current();
                                if (line.length() == 0) {
                                    break;
                                }
                                if (line.startsWith(""commit "")) {
                                    objects[0] = line.substring(""commit "".length());
                                } else if (line.startsWith(""tree "")) {
                                    objects[1] = line.substring(""tree "".length());
                                } else if (line.startsWith(""parent "")) {
                                    if (objects[2] == null) {
                                        objects[2] = line.substring(""parent "".length());
                                    } else {
                                        objects[3] = line.substring(""parent "".length());
                                    }
                                } else if (line.startsWith(""author "")) {
                                    objects[4] = line.substring(""author "".length(), line.length() - TS_OFF.length() - 1);
                                    objects[5] = Long.parseLong(line.substring(line.length() - TS_OFF.length(), line.length() - OFF.length() - 1)) * 1000;
                                } else if (line.startsWith(""committer "")) {
                                    objects[6] = line.substring(""committer "".length(), line.length() - TS_OFF.length() - 1);
                                    objects[7] = Long.parseLong(line.substring(line.length() - TS_OFF.length(), line.length() - OFF.length() - 1)) * 1000;
                                }
                                if (!e.moveNext()) {
                                    return true;
                                }
                            }
                            for (; ; ) {
                                if (!e.moveNext()) {
                                    objects[8] = b.toString();
                                    b.setLength(0);
                                    return true;
                                }
                                final String line = e.current();
                                if (line.length() == 0) {
                                    objects[8] = b.toString();
                                    b.setLength(0);
                                    return true;
                                }
                                b.append(line.substring(""    "".length())).append(""\n"");
                            }
                        }

                        @Override
                        public void reset() {
                            throw new UnsupportedOperationException();
                        }

                        @Override
                        public void close() {
                            e.close();
                        }
                    };
                }
            };
        }

        @Override
        public RelDataType getRowType(RelDataTypeFactory typeFactory) {
            return typeFactory.builder().add(""commit"", SqlTypeName.CHAR, 40).add(""tree"", SqlTypeName.CHAR, 40).add(""parent"", SqlTypeName.CHAR, 40).add(""parent2"", SqlTypeName.CHAR, 40).add(""author"", SqlTypeName.VARCHAR).add(""author_timestamp"", SqlTypeName.TIMESTAMP).add(""committer"", SqlTypeName.VARCHAR).add(""commit_timestamp"", SqlTypeName.TIMESTAMP).add(""message"", SqlTypeName.VARCHAR).build();
        }

        @Override
        public Statistic getStatistic() {
            return Statistics.of(1000d, ImmutableList.of(ImmutableBitSet.of(0)));
        }

        @Override
        public Schema.TableType getJdbcTableType() {
            return Schema.TableType.TABLE;
        }

        @Override
        public boolean isRolledUp(String column) {
            return false;
        }

        @Override
        public boolean rolledUpColumnValidInsideAgg(String column, SqlCall call, @Nullable SqlNode parent, @Nullable CalciteConnectionConfig config) {
            return true;
        }
    };
}",java:S1172,
"private void check3RouteSection2(Context context, JourneyPattern jp, ValidationParameters parameters){
    prepareCheckPoint(context, ROUTE_SECTION_2_3);
    ValidationReporter reporter = ValidationReporter.Factory.getInstance();
    List<ScheduledStopPoint> scheduledStopPointsOnJourneyPattern = jp.getStopPoints().stream().map(e -> e.getScheduledStopPoint()).collect(Collectors.toList());
    for (RouteSection rs : jp.getRouteSections()) {
        DataLocation location = buildLocation(context, rs);
        ScheduledStopPoint from = rs.getFromScheduledStopPoint();
        if (from != null && !scheduledStopPointsOnJourneyPattern.contains(from)) {
            DataLocation targetLocation = buildLocation(context, from);
            reporter.addCheckPointReportError(context, ROUTE_SECTION_2_3, location, null, null, targetLocation);
        }
        ScheduledStopPoint to = rs.getToScheduledStopPoint();
        if (to != null && !scheduledStopPointsOnJourneyPattern.contains(to)) {
            DataLocation targetLocation = buildLocation(context, to);
            reporter.addCheckPointReportError(context, ROUTE_SECTION_2_3, location, null, null, targetLocation);
        }
    }
}",java:S1172,
"private synchronized void removedLedgerFromEntryLogMapCache(Long ledgerId, RemovalCause cause){
    numOfWriteActiveLedgers.dec();
    if (cause.equals(RemovalCause.EXPIRED)) {
        numOfWriteLedgersRemovedCacheExpiry.inc();
    } else if (cause.equals(RemovalCause.SIZE)) {
        numOfWriteLedgersRemovedCacheMaxSize.inc();
    }
}",java:S1172,
"private void setPartOfDayFromHour(int hour){
    setAfternoon(true);
    setMorning(true);
}",java:S1172,
"private void logDataLossMsg(HCatFieldSchema fieldSchema, Object pigOjb, String msg){
    String key = getColumnTypeKey(fieldSchema);
    if (!msgCount.containsKey(key)) {
        msgCount.put(key, 0);
        LOG.warn(msg + "" "" + ""Will write NULL instead.  Only 1 such message per type/column is emitted."");
    }
    msgCount.put(key, msgCount.get(key) + 1);
}",java:S1172,
"protected void convert(Context context, GtfsRoute gtfsRoute, Line line){
    line.setName(AbstractConverter.getNonEmptyTrimedString(gtfsRoute.getRouteLongName()));
    line.setNumber(AbstractConverter.getNonEmptyTrimedString(gtfsRoute.getRouteShortName()));
    line.setPublishedName(AbstractConverter.getNonEmptyTrimedString(gtfsRoute.getRouteLongName()));
    if (line.getName() == null) {
        line.setName(line.getNumber());
    }
    line.setTransportModeName(gtfsRoute.getRouteType().getTransportMode());
    line.setTransportSubModeName(gtfsRoute.getRouteType().getSubMode());
    String[] token = line.getObjectId().split("":"");
    line.setRegistrationNumber(token[2]);
    line.setComment(gtfsRoute.getRouteDesc());
    line.setColor(toHexa(gtfsRoute.getRouteColor()));
    line.setTextColor(toHexa(gtfsRoute.getRouteTextColor()));
    line.setUrl(AbstractConverter.toString(gtfsRoute.getRouteUrl()));
    line.setFilled(true);
}",java:S1172,
"public MapOperationProvider getOperationProvider(String mapName){
    return INSTANCE;
}",java:S1172,
"public T getGlobal(String name, Class<T> clazz){
    return (T) globals.get(name);
}",java:S1172,
"public static Map<K, V> toMap(String json, Class<K> classK, Class<V> classV){
    if (Strings.isNullOrEmpty(json)) {
        return Collections.emptyMap();
    }
    try {
        return objectMapper.readValue(json, new TypeReference<Map<K, V>>() {
        });
    } catch (Exception e) {
        log.error(""json to map exception!"", e);
    }
    return Collections.emptyMap();
}",java:S1172,
"private void addVariable(PatternDescr patternRelated, MethodCallExpr when, AccumulateDescr.AccumulateFunctionCallDescr accFuncCallDescr){
    String identifierDeclaration = ofNullable(accFuncCallDescr).map(AccumulateDescr.AccumulateFunctionCallDescr::getBind).orElseThrow(() -> new InvalidNamedConsequenceException(""Cannot find function identifier""));
    when.addArgument(context.getVarExpr(identifierDeclaration));
}",java:S1172,
"public Shuttle preVisit(ForStatement forStatement){
    return this;
}",java:S1172,
"protected MethodSpec.Builder applyVisitSubTypeMethodSpecUpdates(TypeSpec.Builder typeBuilder, MethodSpec.Builder methodBuilder, MemberModel event){
    ClassName eventSubType = poetExt.getModelClass(event.getShape().getShapeName());
    String javadocs = new DocumentationBuilder().description(""Invoked when a {@link $T} is encountered. If this is not overridden, the event will "" + ""be given to {@link #visitDefault($T)}."").param(""event"", ""Event being visited"").build();
    return methodBuilder.addModifiers(Modifier.DEFAULT).addStatement(""visitDefault(event)"").addJavadoc(javadocs, eventSubType, eventStreamBaseClass);
}",java:S1172,
"public static ErrorMessageFactory shouldMatch(T actual, Predicate<? super T> predicate, PredicateDescription predicateDescription){
    requireNonNull(predicateDescription, ""The predicate description must not be null"");
    return new ShouldMatch(actual, predicateDescription);
}",java:S1172,
"private EventReport getHourlyGraphReport(Model model, Payload payload){
    String domain = payload.getDomain();
    String ipAddress = payload.getIpAddress();
    String name = payload.getName();
    if (name == null || name.length() == 0) {
        name = ""*"";
    }
    ModelRequest request = new ModelRequest(domain, payload.getDate()).setProperty(""type"", payload.getType()).setProperty(""name"", name).setProperty(""ip"", ipAddress);
    ModelResponse<EventReport> response = m_service.invoke(request);
    EventReport report = response.getModel();
    return report;
}",java:S1172,
"protected synchronized boolean setTimeoutFailure(Env env){
    if (state == ProcedureState.WAITING_TIMEOUT) {
        long timeDiff = System.currentTimeMillis() - lastUpdate;
        setFailure(""ProcedureExecutor"", new ProcedureTimeoutException(""Operation timed out after "" + timeDiff + "" ms.""));
        return true;
    }
    return false;
}",java:S1172,
"protected void verifyRequest(String appid, ChannelHandlerContext ctx, HttpRequest request, HttpResponse response, URL requestUri) throws IOException{
    SecretKey tokenSecret = secretManager.retrieveTokenSecret(appid);
    if (null == tokenSecret) {
        LOG.info(""Request for unknown token "" + appid);
        throw new IOException(""could not find jobid"");
    }
    String enc_str = SecureShuffleUtils.buildMsgFrom(requestUri);
    String urlHashStr = request.headers().get(SecureShuffleUtils.HTTP_HEADER_URL_HASH);
    if (urlHashStr == null) {
        LOG.info(""Missing header hash for "" + appid);
        throw new IOException(""fetcher cannot be authenticated"");
    }
    if (LOG.isDebugEnabled()) {
        int len = urlHashStr.length();
        LOG.debug(""verifying request. enc_str="" + enc_str + ""; hash=..."" + urlHashStr.substring(len - len / 2, len - 1));
    }
    SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret);
    String reply = SecureShuffleUtils.generateHash(urlHashStr.getBytes(Charsets.UTF_8), tokenSecret);
    response.headers().add(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply);
    response.headers().add(ShuffleHeader.HTTP_HEADER_NAME, ShuffleHeader.DEFAULT_HTTP_HEADER_NAME);
    response.headers().add(ShuffleHeader.HTTP_HEADER_VERSION, ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION);
    if (LOG.isDebugEnabled()) {
        int len = reply.length();
        LOG.debug(""Fetcher request verified. enc_str="" + enc_str + "";reply="" + reply.substring(len - len / 2, len - 1));
    }
}",java:S1172,
" void sendReadTo(int bookieIndex, BookieId to, ReadLACAndEntryRequest entry) throws InterruptedException{
    if (LOG.isDebugEnabled()) {
        LOG.debug(""Calling Read LAC and Entry with {} and long polling interval {} on Bookie {} - Parallel {}"", prevEntryId, timeOutInMillis, to, parallelRead);
    }
    clientCtx.getBookieClient().readEntryWaitForLACUpdate(to, lh.getId(), BookieProtocol.LAST_ADD_CONFIRMED, prevEntryId, timeOutInMillis, true, this, new ReadLastConfirmedAndEntryContext(bookieIndex, to));
    this.numResponsesPending++;
}",java:S1172,
"protected void runTestHelper(String tname, String fname, String fpath, boolean expectSuccess){
    long startTime = System.currentTimeMillis();
    qt.getConf().set(HCONF_TEST_BLOBSTORE_PATH_UNIQUE, testBlobstorePathUnique);
    try {
        System.err.println(""Begin query: "" + fname);
        qt.setInputFile(fpath);
        qt.cliInit();
        try {
            qt.executeClient();
            if (!expectSuccess) {
                qt.failedQuery(null, 0, fname, debugHint);
            }
        } catch (CommandProcessorException e) {
            if (expectSuccess) {
                qt.failedQuery(e.getCause(), e.getResponseCode(), fname, debugHint);
            }
        }
        QTestProcessExecResult result = qt.checkCliDriverResults();
        if (result.getReturnCode() != 0) {
            String message = Strings.isNullOrEmpty(result.getCapturedOutput()) ? debugHint : ""\r\n"" + result.getCapturedOutput();
            qt.failedDiff(result.getReturnCode(), fname, message);
        }
    } catch (Exception e) {
        qt.failedWithException(e, fname, debugHint);
    }
    long elapsedTime = System.currentTimeMillis() - startTime;
    System.err.println(""Done query: "" + fname + "" elapsedTime="" + elapsedTime / 1000 + ""s"");
    assertTrue(""Test passed"", true);
}",java:S1172,
"public List<TRegionReplicaSet> getPartitionInfo(String deviceName, Filter globalTimeFilter){
    return dataPartition.getDataRegionReplicaSet(deviceName, null);
}",java:S1172,
"protected void implementNotNullReset(AggContext info, AggResetContext reset){
    BlockBuilder block = reset.currentBlock();
    List<Expression> accumulator = reset.accumulator();
    for (int i = 0; i < getStateSize(); i++) {
        Expression exp = accumulator.get(i);
        block.add(Expressions.statement(Expressions.assign(exp, RexImpTable.getDefaultValue(exp.getType()))));
    }
}",java:S1172,
"public Shuttle preVisit(UnaryExpression unaryExpression){
    return this;
}",java:S1172,
"private Pair<LineChart, PieChart> buildHourlyGraph(StateReport report, String domain, String key, String ip){
    LineChart linechart = new LineChart();
    StateHourlyGraphVisitor builder = new StateHourlyGraphVisitor(ip, m_serverFilterConfigManager.getUnusedDomains(), key, 60);
    builder.visitStateReport(report);
    linechart.setStart(report.getStartTime()).setSize(60).setTitle(key).setStep(TimeHelper.ONE_MINUTE);
    linechart.add(key, builder.getData());
    StateDistirbutionVisitor visitor = new StateDistirbutionVisitor(key);
    visitor.visitStateReport(report);
    Map<String, Double> distributes = visitor.getDistribute();
    PieChart piechart = buildPiechart(distributes);
    return new Pair<LineChart, PieChart>(linechart, piechart);
}",java:S1172,
"public Integer splitCount(RelNode rel, RelMetadataQuery mq){
    return 1;
}",java:S1172,
"public void registerTaskRequest(String[] requestedHosts, String[] requestedRacks){
    numRequestedAllocations.incrementAndGet();
    if (requestedHosts != null && requestedHosts.length != 0) {
        numRequestsWithLocation.incrementAndGet();
    } else {
        numRequestsWithoutLocation.incrementAndGet();
    }
}",java:S1172,
"protected ObjectStore createObjectStore(EntryPointId entryPoint, RuleBaseConfiguration conf, ReteEvaluator reteEvaluator){
    boolean useClassAwareStore = isEqualityBehaviour || conf.getOption(KieBaseMutabilityOption.KEY).isMutabilityEnabled();
    return useClassAwareStore ? new ClassAwareObjectStore(isEqualityBehaviour, this.lock) : new IdentityObjectStore();
}",java:S1172,
"private void check4Line3(Context context, Line line1, ValidationParameters parameters){
    if (line1.getGroupOfLines().size() == 0) {
        DataLocation location = buildLocation(context, line1);
        ValidationReporter reporter = ValidationReporter.Factory.getInstance();
        reporter.addCheckPointReportError(context, L4_LINE_3, ""1"", location);
    } else if (line1.getGroupOfLines().size() > 1) {
        DataLocation location = buildLocation(context, line1);
        ValidationReporter reporter = ValidationReporter.Factory.getInstance();
        reporter.addCheckPointReportError(context, L4_LINE_3, ""2"", location);
    }
}",java:S1172,
"public Double getMinRowCount(Filter rel, RelMetadataQuery mq){
    return 0d;
}",java:S1172,
"public static synchronized TemplateRegistry getInvokerTemplateRegistry(ClassLoader cl){
    if (!INVOKER_REGISTRY.contains(""invokers"")) {
        InputStream javaInvokersMvelStream = JavaRuleBuilderHelper.class.getResourceAsStream(JAVA_INVOKERS_MVEL);
        INVOKER_REGISTRY.addNamedTemplate(""invokers"", TemplateCompiler.compileTemplate(javaInvokersMvelStream));
        try {
            javaInvokersMvelStream.close();
        } catch (IOException ex) {
            logger.debug(""Failed to close stream!"", ex);
        }
        TemplateRuntime.execute(INVOKER_REGISTRY.getNamedTemplate(""invokers""), null, INVOKER_REGISTRY);
    }
    return INVOKER_REGISTRY;
}",java:S1172,
"private void buildPieCharts(Model model, Payload payload, StorageReport report){
    PieChartVisitor visitor = new PieChartVisitor();
    visitor.visitStorageReport(report);
    model.setDistributionChart(visitor.getPiechartJson());
}",java:S1172,
"private void parseForRuntime(RuntimeInfo parentObj, String parentTag, String qName, Attributes attributes) throws SAXException{
    if (Constants.ELEMENT_USER_DIR.equals(qName) || Constants.ELEMENT_JAVA_CLASSPATH.equals(qName)) {
        objects.push(parentObj);
    } else {
        throw new SAXException(String.format(""Element(%s) is not expected under runtime!"", qName));
    }
    tags.push(qName);
}",java:S1172,
"private TransactionReport queryHourlyReportsByDuration(String name, String domain, Date start, Date endDate) throws DalException{
    long startTime = start.getTime();
    long endTime = endDate.getTime();
    double duration = (endTime - startTime) * 1.0 / TimeHelper.ONE_DAY;
    HistoryTransactionReportMerger dailyMerger = new HistoryTransactionReportMerger(new TransactionReport(domain)).setDuration(duration);
    TransactionReportHourlyGraphCreator graphCreator = new TransactionReportHourlyGraphCreator(dailyMerger.getTransactionReport(), 10);
    for (; startTime < endTime; startTime = startTime + TimeHelper.ONE_HOUR) {
        TransactionReport report = m_reportService.queryReport(domain, new Date(startTime), new Date(startTime + TimeHelper.ONE_HOUR));
        graphCreator.createGraph(report);
        report.accept(dailyMerger);
    }
    TransactionReport dailyreport = dailyMerger.getTransactionReport();
    Date date = dailyreport.getStartTime();
    Date end = new Date(TaskHelper.tomorrowZero(date).getTime() - 1000);
    dailyreport.setStartTime(TaskHelper.todayZero(date));
    dailyreport.setEndTime(end);
    new TransactionReportCountFilter(m_serverConfigManager.getMaxTypeThreshold(), m_atomicMessageConfigManager.getMaxNameThreshold(domain), m_serverConfigManager.getTypeNameLengthLimit()).visitTransactionReport(dailyreport);
    return dailyreport;
}",java:S1172,
"protected Date getTimeBefore(Date endTime){
    return null;
}",java:S1172,
"public void serializeTo32(int[] array, int offset){
    assert (v[1] == 0);
    assert (v[2] == 0);
    assert (v[3] == 0);
    array[0] = v[0];
}",java:S1172,
"public static boolean areEntriesOfLedgerStoredInTheBookie(long ledgerId, BookieId bookieAddress, LedgerMetadata ledgerMetadata){
    Collection<? extends List<BookieId>> ensemblesOfSegments = ledgerMetadata.getAllEnsembles().values();
    Iterator<? extends List<BookieId>> ensemblesOfSegmentsIterator = ensemblesOfSegments.iterator();
    List<BookieId> ensemble;
    int segmentNo = 0;
    while (ensemblesOfSegmentsIterator.hasNext()) {
        ensemble = ensemblesOfSegmentsIterator.next();
        if (ensemble.contains(bookieAddress)) {
            if (areEntriesOfSegmentStoredInTheBookie(ledgerMetadata, bookieAddress, segmentNo)) {
                return true;
            }
        }
        segmentNo++;
    }
    return false;
}",java:S1172,
"private boolean checkAuthPlugin(AuthMessage am, final Channel src){
    if (!am.hasAuthPluginName() || !am.getAuthPluginName().equals(authProviderFactory.getPluginName())) {
        LOG.error(""Received message from incompatible auth plugin. Local = {},"" + "" Remote = {}, Channel = {}"", authProviderFactory.getPluginName(), am.getAuthPluginName());
        return false;
    }
    return true;
}",java:S1172,
"public boolean dbinfo(String line){
    if (!(beeLine.assertConnection())) {
        return false;
    }
    beeLine.showWarnings();
    int padlen = 50;
    String[] m = new String[] { ""allProceduresAreCallable"", ""allTablesAreSelectable"", ""dataDefinitionCausesTransactionCommit"", ""dataDefinitionIgnoredInTransactions"", ""doesMaxRowSizeIncludeBlobs"", ""getCatalogSeparator"", ""getCatalogTerm"", ""getDatabaseProductName"", ""getDatabaseProductVersion"", ""getDefaultTransactionIsolation"", ""getDriverMajorVersion"", ""getDriverMinorVersion"", ""getDriverName"", ""getDriverVersion"", ""getExtraNameCharacters"", ""getIdentifierQuoteString"", ""getMaxBinaryLiteralLength"", ""getMaxCatalogNameLength"", ""getMaxCharLiteralLength"", ""getMaxColumnNameLength"", ""getMaxColumnsInGroupBy"", ""getMaxColumnsInIndex"", ""getMaxColumnsInOrderBy"", ""getMaxColumnsInSelect"", ""getMaxColumnsInTable"", ""getMaxConnections"", ""getMaxCursorNameLength"", ""getMaxIndexLength"", ""getMaxProcedureNameLength"", ""getMaxRowSize"", ""getMaxSchemaNameLength"", ""getMaxStatementLength"", ""getMaxStatements"", ""getMaxTableNameLength"", ""getMaxTablesInSelect"", ""getMaxUserNameLength"", ""getNumericFunctions"", ""getProcedureTerm"", ""getSchemaTerm"", ""getSearchStringEscape"", ""getSQLKeywords"", ""getStringFunctions"", ""getSystemFunctions"", ""getTimeDateFunctions"", ""getURL"", ""getUserName"", ""isCatalogAtStart"", ""isReadOnly"", ""nullPlusNonNullIsNull"", ""nullsAreSortedAtEnd"", ""nullsAreSortedAtStart"", ""nullsAreSortedHigh"", ""nullsAreSortedLow"", ""storesLowerCaseIdentifiers"", ""storesLowerCaseQuotedIdentifiers"", ""storesMixedCaseIdentifiers"", ""storesMixedCaseQuotedIdentifiers"", ""storesUpperCaseIdentifiers"", ""storesUpperCaseQuotedIdentifiers"", ""supportsAlterTableWithAddColumn"", ""supportsAlterTableWithDropColumn"", ""supportsANSI92EntryLevelSQL"", ""supportsANSI92FullSQL"", ""supportsANSI92IntermediateSQL"", ""supportsBatchUpdates"", ""supportsCatalogsInDataManipulation"", ""supportsCatalogsInIndexDefinitions"", ""supportsCatalogsInPrivilegeDefinitions"", ""supportsCatalogsInProcedureCalls"", ""supportsCatalogsInTableDefinitions"", ""supportsColumnAliasing"", ""supportsConvert"", ""supportsCoreSQLGrammar"", ""supportsCorrelatedSubqueries"", ""supportsDataDefinitionAndDataManipulationTransactions"", ""supportsDataManipulationTransactionsOnly"", ""supportsDifferentTableCorrelationNames"", ""supportsExpressionsInOrderBy"", ""supportsExtendedSQLGrammar"", ""supportsFullOuterJoins"", ""supportsGroupBy"", ""supportsGroupByBeyondSelect"", ""supportsGroupByUnrelated"", ""supportsIntegrityEnhancementFacility"", ""supportsLikeEscapeClause"", ""supportsLimitedOuterJoins"", ""supportsMinimumSQLGrammar"", ""supportsMixedCaseIdentifiers"", ""supportsMixedCaseQuotedIdentifiers"", ""supportsMultipleResultSets"", ""supportsMultipleTransactions"", ""supportsNonNullableColumns"", ""supportsOpenCursorsAcrossCommit"", ""supportsOpenCursorsAcrossRollback"", ""supportsOpenStatementsAcrossCommit"", ""supportsOpenStatementsAcrossRollback"", ""supportsOrderByUnrelated"", ""supportsOuterJoins"", ""supportsPositionedDelete"", ""supportsPositionedUpdate"", ""supportsSchemasInDataManipulation"", ""supportsSchemasInIndexDefinitions"", ""supportsSchemasInPrivilegeDefinitions"", ""supportsSchemasInProcedureCalls"", ""supportsSchemasInTableDefinitions"", ""supportsSelectForUpdate"", ""supportsStoredProcedures"", ""supportsSubqueriesInComparisons"", ""supportsSubqueriesInExists"", ""supportsSubqueriesInIns"", ""supportsSubqueriesInQuantifieds"", ""supportsTableCorrelationNames"", ""supportsTransactions"", ""supportsUnion"", ""supportsUnionAll"", ""usesLocalFilePerTable"", ""usesLocalFiles"" };
    for (int i = 0; i < m.length; i++) {
        try {
            beeLine.output(beeLine.getColorBuffer().pad(m[i], padlen).append("""" + beeLine.getReflector().invoke(beeLine.getDatabaseMetaData(), m[i], new Object[0])));
        } catch (Exception e) {
            beeLine.output(beeLine.getColorBuffer().pad(m[i], padlen), false);
            beeLine.handleException(e);
        }
    }
    return true;
}",java:S1172,
"public Shuttle preVisit(MemberExpression memberExpression){
    return this;
}",java:S1172,
"private boolean stopRecording(String line){
    try {
        beeLine.getRecordOutputFile().close();
    } catch (Exception e) {
        beeLine.handleException(e);
    }
    beeLine.setRecordOutputFile(null);
    beeLine.output(beeLine.loc(""record-closed"", beeLine.getRecordOutputFile()));
    return true;
}",java:S1172,
"private void parseForConfig(ClientConfig parentObj, String parentTag, String qName, Attributes attributes) throws SAXException{
    if (Constants.ENTITY_SERVERS.equals(qName) || Constants.ENTITY_PROPERTIES.equals(qName)) {
        objects.push(parentObj);
    } else if (Constants.ENTITY_SERVER.equals(qName)) {
        Server server = maker.buildServer(attributes);
        linker.onServer(parentObj, server);
        objects.push(server);
    } else if (Constants.ENTITY_DOMAIN.equals(qName)) {
        Domain domain = maker.buildDomain(attributes);
        linker.onDomain(parentObj, domain);
        objects.push(domain);
    } else if (Constants.ENTITY_BIND.equals(qName)) {
        Bind bind = maker.buildBind(attributes);
        linker.onBind(parentObj, bind);
        objects.push(bind);
    } else if (Constants.ENTITY_PROPERTY.equals(qName)) {
        Property property = maker.buildProperty(attributes);
        linker.onProperty(parentObj, property);
        objects.push(property);
    } else {
        throw new SAXException(String.format(""Element(%s) is not expected under config!"", qName));
    }
    tags.push(qName);
}",java:S1172,
"private static String getFormattedDb(HiveConf conf, CliSessionState ss){
    if (!HiveConf.getBoolVar(conf, HiveConf.ConfVars.CLIPRINTCURRENTDB)) {
        return """";
    }
    String currDb = SessionState.get().getCurrentDatabase();
    if (currDb == null) {
        return """";
    }
    return "" ("" + currDb + "")"";
}",java:S1172,
" void inferMixinSort(final Collection collection, final FacetedMethod facetedMethod){
    addFacet(new ActionSemanticsFacetAbstract(SemanticsOf.SAFE, facetedMethod) {
    });
    addFacet(ContributingFacetAbstract.createAsCollection(facetedMethod));
}",java:S1172,
"protected CompletableFuture<Boolean> callRemoveAsync(K key, Data keyData, Data oldValueData, boolean withCompletionEvent, BiConsumer<Boolean, Throwable> callback){
    return addCallback(doRemoveOnServer(keyData, oldValueData, withCompletionEvent), callback);
}",java:S1172,
"private void check4Line4(Context context, Line line1, ValidationParameters parameters){
    if (line1.getRoutes().size() == 1)
        return;
    if (line1.getRoutes().size() == 2) {
        Route r1 = line1.getRoutes().get(0);
        Route r2 = line1.getRoutes().get(1);
        if (r1.getOppositeRoute() == r2 && r2.getOppositeRoute() == r1)
            return;
    }
    DataLocation location = buildLocation(context, line1);
    ValidationReporter reporter = ValidationReporter.Factory.getInstance();
    if (line1.getRoutes().size() == 0) {
        reporter.addCheckPointReportError(context, L4_LINE_4, ""1"", location);
    } else {
        reporter.addCheckPointReportError(context, L4_LINE_4, ""2"", location, Integer.toString(line1.getRoutes().size()));
    }
}",java:S1172,
"protected static void processRequest(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException{
    response.setContentType(""text/html;charset=UTF-8"");
    try {
        Thread.sleep(60000);
    } catch (InterruptedException ignore) {
    }
    try (PrintWriter out = response.getWriter()) {
        out.println(""OK"");
    }
}",java:S1172,
"public boolean quit(String line){
    beeLine.setExit(true);
    close(null);
    return true;
}",java:S1172,
"public boolean execute(Player owner, QuestData questData, QuestData.QuestAcceptCondition condition, String paramStr, int... params){
    return false;
}",java:S1172,
"public AbstractFieldPanel<T> setRequired(final boolean required){
    return this;
}",java:S1172,
"public static JavaSparkContext getSparkContext(DataContext root){
    return (JavaSparkContext) SparkHandlerImpl.instance().sparkContext();
}",java:S1172,
"public static long getGachaRecordsMaxPage(int ownerId, int page, int gachaType, int pageSize){
    long count = DatabaseManager.getGameDatastore().find(GachaRecord.class).filter(Filters.eq(""ownerId"", ownerId), Filters.eq(""gachaType"", gachaType)).count();
    return count / 10 + (count % 10 > 0 ? 1 : 0);
}",java:S1172,
"public double[][] initSumOfDistances(int nse1, int nse2, int winSize, int winSizeComb1, Atom[] ca1, Atom[] ca2){
    double d;
    double[][] mat = new double[nse1][nse2];
    for (int ise1 = 0; ise1 < nse1; ise1++) {
        for (int ise2 = 0; ise2 < nse2; ise2++) {
            mat[ise1][ise2] = -1.0;
            if (ise1 > nse1 - winSize || ise2 > nse2 - winSize)
                continue;
            d = 0.0;
            for (int is1 = 0; is1 < winSize - 2; is1++) for (int is2 = is1 + 2; is2 < winSize; is2++) {
                d += Math.abs(dist1[ise1 + is1][ise1 + is2] - dist2[ise2 + is1][ise2 + is2]);
            }
            mat[ise1][ise2] = d / winSizeComb1;
        }
    }
    return mat;
}",java:S1172,
"public static ByteBuf fromEnvelopedBuf(ByteBuf src, StatsLogger statsLogger) throws IOException{
    byte version = src.readByte();
    if (version != CURRENT_VERSION) {
        throw new IOException(String.format(""Version mismatch while reading. Received: %d,"" + "" Required: %d"", version, CURRENT_VERSION));
    }
    int flags = src.readInt();
    int codecCode = flags & COMPRESSION_CODEC_MASK;
    int originDataLen = src.readInt();
    int actualDataLen = src.readInt();
    ByteBuf compressedBuf = src.slice(src.readerIndex(), actualDataLen);
    ByteBuf decompressedBuf;
    try {
        if (Type.NONE.code() == codecCode && originDataLen != actualDataLen) {
            throw new IOException(""Inconsistent data length found for a non-compressed entry : compressed = "" + originDataLen + "", actual = "" + actualDataLen);
        }
        CompressionCodec codec = CompressionUtils.getCompressionCodec(Type.of(codecCode));
        decompressedBuf = codec.decompress(compressedBuf, originDataLen);
    } finally {
        compressedBuf.release();
    }
    return decompressedBuf;
}",java:S1172,
"public static ScannableTable eval(boolean b){
    return new ScannableTable() {

        @Override
        public Enumerable<@Nullable Object[]> scan(DataContext root) {
            return Processes.processLines(""du"", ""-ak"").select(a0 -> {
                final String[] fields = a0.split(""\t"");
                return new Object[] { Long.valueOf(fields[0]), fields[1] };
            });
        }

        @Override
        public RelDataType getRowType(RelDataTypeFactory typeFactory) {
            return typeFactory.builder().add(""size_k"", SqlTypeName.BIGINT).add(""path"", SqlTypeName.VARCHAR).build();
        }

        @Override
        public Statistic getStatistic() {
            return Statistics.of(1000d, ImmutableList.of(ImmutableBitSet.of(1)));
        }

        @Override
        public Schema.TableType getJdbcTableType() {
            return Schema.TableType.TABLE;
        }

        @Override
        public boolean isRolledUp(String column) {
            return false;
        }

        @Override
        public boolean rolledUpColumnValidInsideAgg(String column, SqlCall call, @Nullable SqlNode parent, @Nullable CalciteConnectionConfig config) {
            return true;
        }
    };
}",java:S1172,
"public ServerContext createContext(TProtocol in, TProtocol out){
    Socket socket = ((TSocket) ((TElasticFramedTransport) out.getTransport()).getSocket()).getSocket();
    JudgableServerContext context = null;
    getSessionManager().registerSession(new ClientSession(socket));
    if (factory != null) {
        context = factory.newServerContext(out, socket);
        if (!context.whenConnect()) {
            return context;
        }
    }
    return context;
}",java:S1172,
"private boolean skipElement(String uri, String localName, String qName, Attributes attributes){
    return elementsToSkip.contains(new QName(uri, localName));
}",java:S1172,
"protected void handlePartitions(String[] args){
    Set<Partition> partitions = client.getPartitionService().getPartitions();
    Map<Member, Integer> partitionCounts = new HashMap<Member, Integer>();
    for (Partition partition : partitions) {
        Member owner = partition.getOwner();
        if (owner != null) {
            Integer count = partitionCounts.get(owner);
            int newCount = 1;
            if (count != null) {
                newCount = count + 1;
            }
            partitionCounts.put(owner, newCount);
        }
        println(partition);
    }
    Set<Entry<Member, Integer>> entries = partitionCounts.entrySet();
    for (Entry<Member, Integer> entry : entries) {
        println(entry.getKey() + "":"" + entry.getValue());
    }
}",java:S1172,
"protected MethodSpec.Builder applyOnSubTypeMethodSpecUpdates(TypeSpec.Builder typeBuilder, MethodSpec.Builder methodBuilder, MemberModel event){
    ClassName eventSubType = poetExt.getModelClass(event.getShape().getShapeName());
    String javadocs = new DocumentationBuilder().description(""Callback to invoke when a {@link $T} is visited."").param(""c"", ""Callback to process the event."").returns(""This builder for method chaining."").build();
    return methodBuilder.addModifiers(Modifier.ABSTRACT).addJavadoc(javadocs, eventSubType);
}",java:S1172,
" SqlResult execute(DmlPlan plan, QueryId queryId, List<Object> arguments, long timeout){
    List<Object> args = prepareArguments(plan.getParameterMetadata(), arguments);
    JobConfig jobConfig = new JobConfig().setArgument(SQL_ARGUMENTS_KEY_NAME, args).setArgument(KEY_SQL_QUERY_TEXT, plan.getQuery()).setArgument(KEY_SQL_UNBOUNDED, plan.isInfiniteRows()).setTimeoutMillis(timeout);
    Job job = hazelcastInstance.getJet().newLightJob(plan.getDag(), jobConfig);
    job.join();
    return UpdateSqlResultImpl.createUpdateCountResult(0);
}",java:S1172,
"public void setPartitionId(BuildContext context, RuleBasePartitionId partitionId){
    this.partitionId = partitionId;
}",java:S1172,
"private void updateInterchanges(Context context, VehicleJourney oldValue, VehicleJourney newValue, List<Interchange> oldValueInterchanges, List<Interchange> newValueInterchanges, String method) throws Exception{
    Referential cache = (Referential) context.get(CACHE);
    Collection<Interchange> addedInterchange = CollectionUtil.substract(newValueInterchanges, oldValueInterchanges, NeptuneIdentifiedObjectComparator.INSTANCE);
    List<Interchange> interchanges = null;
    for (Interchange item : addedInterchange) {
        Interchange interchange = cache.getInterchanges().get(item.getObjectId());
        if (interchange == null) {
            if (interchanges == null) {
                interchanges = interchangeDAO.findByObjectId(UpdaterUtils.getObjectIds(addedInterchange));
                for (Interchange object : interchanges) {
                    cache.getInterchanges().put(object.getObjectId(), object);
                }
            }
            interchange = cache.getInterchanges().get(item.getObjectId());
        }
        if (interchange == null) {
            interchange = ObjectFactory.getInterchange(cache, item.getObjectId());
        }
        BeanUtils.setProperty(interchange, method, oldValue);
        oldValueInterchanges.add(interchange);
    }
    Collection<Pair<Interchange, Interchange>> modifiedInterchange = CollectionUtil.intersection(oldValueInterchanges, newValueInterchanges, NeptuneIdentifiedObjectComparator.INSTANCE);
    for (Pair<Interchange, Interchange> pair : modifiedInterchange) {
        interchangeUpdater.update(context, pair.getLeft(), pair.getRight());
    }
    Collection<Interchange> removedInterchange = CollectionUtil.substract(oldValueInterchanges, newValueInterchanges, NeptuneIdentifiedObjectComparator.INSTANCE);
    for (Interchange interchange : removedInterchange) {
        BeanUtils.setProperty(interchange, method, oldValue);
        oldValueInterchanges.remove(interchange);
    }
}",java:S1172,
"public Shuttle preVisit(BinaryExpression binaryExpression){
    return this;
}",java:S1172,
"public Double getMinRowCount(Minus rel, RelMetadataQuery mq){
    return 0d;
}",java:S1172,
"public synchronized void handleGetCompoundDataReq(GetCompoundDataReq req){
    player.sendPacket(new PacketGetCompoundDataRsp(unlocked, getCompoundQueueData()));
}",java:S1172,
"public void writeInt(int i, String tag) throws IOException{
    out.writeInt(i);
}",java:S1172,
"public RelDistribution distribution(Values values, RelMetadataQuery mq){
    return values(values.getRowType(), values.getTuples());
}",java:S1172,
" void executeProgram(HepProgram instruction, HepProgram.State state){
    state.init();
    state.instructionStates.forEach(instructionState -> {
        instructionState.execute();
        int delta = nTransformations - nTransformationsLastGC;
        if (delta > graphSizeLastGC) {
            collectGarbage();
        }
    });
}",java:S1172,
"public org.rutebanken.netex.model.DeadRun produce(Context context, mobi.chouette.model.DeadRun chouetteDeadRun, Line line){
    ExportableData exportableData = (ExportableData) context.get(Constant.EXPORTABLE_DATA);
    ExportableNetexData exportableNetexData = (ExportableNetexData) context.get(Constant.EXPORTABLE_NETEX_DATA);
    org.rutebanken.netex.model.DeadRun deadRun = netexFactory.createDeadRun();
    NetexProducerUtils.populateId(chouetteDeadRun, deadRun);
    JourneyPattern journeyPattern = chouetteDeadRun.getJourneyPattern();
    JourneyPatternRefStructure journeyPatternRefStruct = netexFactory.createJourneyPatternRefStructure();
    NetexProducerUtils.populateReference(journeyPattern, journeyPatternRefStruct, true);
    deadRun.setJourneyPatternRef(netexFactory.createJourneyPatternRef(journeyPatternRefStruct));
    if (chouetteDeadRun.getTimetables().size() > 0) {
        DayTypeRefs_RelStructure dayTypeStruct = netexFactory.createDayTypeRefs_RelStructure();
        deadRun.setDayTypes(dayTypeStruct);
        for (Timetable t : chouetteDeadRun.getTimetables()) {
            if (exportableData.getTimetables().contains(t)) {
                DayTypeRefStructure dayTypeRefStruct = netexFactory.createDayTypeRefStructure();
                NetexProducerUtils.populateReference(t, dayTypeRefStruct, false);
                dayTypeStruct.getDayTypeRef().add(netexFactory.createDayTypeRef(dayTypeRefStruct));
            }
        }
    }
    if (CollectionUtils.isNotEmpty(chouetteDeadRun.getDeadRunAtStops())) {
        List<DeadRunAtStop> deadRunAtStops = chouetteDeadRun.getDeadRunAtStops();
        deadRunAtStops.sort(Comparator.comparingInt(o -> o.getStopPoint().getPosition()));
        TimetabledPassingTimes_RelStructure passingTimesStruct = netexFactory.createTimetabledPassingTimes_RelStructure();
        for (int i = 0; i < deadRunAtStops.size(); i++) {
            DeadRunAtStop deadRunAtStop = deadRunAtStops.get(i);
            TimetabledPassingTime timetabledPassingTime = netexFactory.createTimetabledPassingTime();
            NetexProducerUtils.populateId(deadRunAtStop, timetabledPassingTime);
            StopPoint stopPoint = deadRunAtStop.getStopPoint();
            StopPointInJourneyPatternRefStructure pointInPatternRefStruct = netexFactory.createStopPointInJourneyPatternRefStructure();
            NetexProducerUtils.populateReference(stopPoint, pointInPatternRefStruct, true);
            timetabledPassingTime.setPointInJourneyPatternRef(netexFactory.createStopPointInJourneyPatternRef(pointInPatternRefStruct));
            LocalTime departureTime = deadRunAtStop.getDepartureTime();
            LocalTime arrivalTime = deadRunAtStop.getArrivalTime();
            if (arrivalTime != null) {
                if (arrivalTime.equals(departureTime)) {
                    if (!(i + 1 < deadRunAtStops.size())) {
                        NetexTimeConversionUtil.populatePassingTimeUtc(timetabledPassingTime, true, deadRunAtStop);
                    }
                } else {
                    NetexTimeConversionUtil.populatePassingTimeUtc(timetabledPassingTime, true, deadRunAtStop);
                }
            }
            if (departureTime != null) {
                if ((i + 1 < deadRunAtStops.size())) {
                    NetexTimeConversionUtil.populatePassingTimeUtc(timetabledPassingTime, false, deadRunAtStop);
                    timetabledPassingTime.setDepartureTime(departureTime);
                    if (deadRunAtStop.getDepartureDayOffset() > 0) {
                        timetabledPassingTime.setDepartureDayOffset(BigInteger.valueOf(deadRunAtStop.getDepartureDayOffset()));
                    }
                }
            }
            passingTimesStruct.getTimetabledPassingTime().add(timetabledPassingTime);
        }
        deadRun.setPassingTimes(passingTimesStruct);
    }
    return deadRun;
}",java:S1172,
"private void tryCodecs(final String name, final int[] band, final BHSDCodec defaultCodec, final BandData bandData, final BandAnalysisResults results, final byte[] encoded, final BHSDCodec[] potentialCodecs) throws Pack200Exception{
    for (final BHSDCodec potential : potentialCodecs) {
        if (potential.equals(defaultCodec)) {
            return;
        }
        if (potential.isDelta()) {
            if (potential.largest() >= bandData.largestDelta && potential.smallest() <= bandData.smallestDelta && potential.largest() >= bandData.largest && potential.smallest() <= bandData.smallest) {
                final byte[] encoded2 = potential.encode(band);
                results.numCodecsTried++;
                final byte[] specifierEncoded = defaultCodec.encode(CodecEncoding.getSpecifier(potential, null));
                final int saved = encoded.length - encoded2.length - specifierEncoded.length;
                if (saved > results.saved) {
                    results.betterCodec = potential;
                    results.encodedBand = encoded2;
                    results.saved = saved;
                }
            }
        } else if (potential.largest() >= bandData.largest && potential.smallest() <= bandData.smallest) {
            final byte[] encoded2 = potential.encode(band);
            results.numCodecsTried++;
            final byte[] specifierEncoded = defaultCodec.encode(CodecEncoding.getSpecifier(potential, null));
            final int saved = encoded.length - encoded2.length - specifierEncoded.length;
            if (saved > results.saved) {
                results.betterCodec = potential;
                results.encodedBand = encoded2;
                results.saved = saved;
            }
        }
        if (timeToStop(results)) {
            return;
        }
    }
}",java:S1172,
"public boolean readBool(String tag) throws IOException{
    in.skipType();
    return in.readBool();
}",java:S1172,
"protected Expression implementNotNullResult(AggContext info, AggResultContext result){
    return result.accumulator().get(0);
}",java:S1172,
"public PackageDescr parse(boolean isEditor, final Reader drl, final Reader dsl) throws DroolsParserException, IOException{
    final StringBuilder text = getDRLText(drl);
    return parse(text.toString(), dsl);
}",java:S1172,
"public static String formatDate(DataContext ctx, String fmtString, int date){
    return internalFormatDatetime(fmtString, internalToDate(date));
}",java:S1172,
"protected RelNode makeRel(RelOptCluster cluster, RelTraitSet traitSet, RelBuilder relBuilder, RelNode input, RexProgram program){
    return LogicalCalc.create(input, program);
}",java:S1172,
"public static int eval(int x){
    return 1;
}",java:S1172,
"protected void onUpdateRecord(Data key, R record, Object value, Data oldDataValue){
    compositeCacheRSMutationObserver.onUpdate(key, oldDataValue, value);
}",java:S1172,
"public static Element getElementFromHillIndex(int index){
    throw new UnsupportedOperationException(""Not implemented, yet!"");
}",java:S1172,
"public CompanyType produce(Company company, boolean addExtension){
    CompanyType jaxbCompany = tridentFactory.createCompanyType();
    populateFromModel(jaxbCompany, company);
    jaxbCompany.setName(company.getName());
    jaxbCompany.setRegistration(getRegistration(company.getRegistrationNumber()));
    jaxbCompany.setCode(getNotEmptyString(company.getCode()));
    jaxbCompany.setEmail(getNotEmptyString(company.getEmail()));
    jaxbCompany.setFax(getNotEmptyString(company.getFax()));
    jaxbCompany.setOperatingDepartmentName(getNotEmptyString(company.getOperatingDepartmentName()));
    jaxbCompany.setOrganisationalUnit(getNotEmptyString(company.getOrganisationalUnit()));
    jaxbCompany.setPhone(getNotEmptyString(company.getPhone()));
    jaxbCompany.setShortName(getNotEmptyString(company.getShortName()));
    return jaxbCompany;
}",java:S1172,
" static Comparator<T> getComparator(boolean ascending, T dummy){
    Comparator<T> comp;
    if (ascending) {
        comp = new Comparator<T>() {

            public int compare(T o1, T o2) {
                return o1.compareTo(o2);
            }
        };
    } else {
        comp = new Comparator<T>() {

            public int compare(T o1, T o2) {
                return o2.compareTo(o1);
            }
        };
    }
    return comp;
}",java:S1172,
"protected void buildHardSetter(ClassVisitor cw, FieldDefinition field, String proxyName, ClassDefinition trait, ClassDefinition core, String setterName, int accessMode){
    MethodVisitor mv = cw.visitMethod(accessMode, setterName, ""("" + Type.getDescriptor(field.getType()) + "")V"", null, null);
    mv.visitCode();
    if (core.isFullTraiting()) {
        helpSet(core, field, mv, proxyName);
    }
    TraitFactoryImpl.invokeInjector(mv, proxyName, core, field, false, 1);
    mv.visitInsn(RETURN);
    mv.visitMaxs(0, 0);
    mv.visitEnd();
}",java:S1172,
"protected LeftTupleSinkPropagator addTupleSink(final LeftTupleSinkPropagator sinkPropagator, final LeftTupleSink tupleSink, final BuildContext context){
    if (sinkPropagator instanceof EmptyLeftTupleSinkAdapter) {
        return new SingleLeftTupleSinkAdapter(this.getPartitionId(), tupleSink);
    }
    if (sinkPropagator instanceof SingleLeftTupleSinkAdapter) {
        CompositeLeftTupleSinkAdapter sinkAdapter = new CompositeLeftTupleSinkAdapter(this.getPartitionId());
        sinkAdapter.addTupleSink(sinkPropagator.getSinks()[0]);
        sinkAdapter.addTupleSink(tupleSink);
        return sinkAdapter;
    }
    ((CompositeLeftTupleSinkAdapter) sinkPropagator).addTupleSink(tupleSink);
    return sinkPropagator;
}",java:S1172,
"private void markAsRunAway(Transaction parent, DefaultTaggedTransaction transaction){
    if (!transaction.hasChildren()) {
        transaction.addData(""RunAway"");
    }
    transaction.setStatus(Message.SUCCESS);
    transaction.setStandalone(true);
    transaction.complete();
}",java:S1172,
"public boolean rehash(String line){
    try {
        if (!(beeLine.assertConnection())) {
            return false;
        }
        if (beeLine.getDatabaseConnection() != null) {
            beeLine.getDatabaseConnection().setCompletions(false);
        }
        return true;
    } catch (Exception e) {
        return beeLine.error(e);
    }
}",java:S1172,
"public static int lastWithSymbol(String symbol, List<E> rows, List<String> symbols, int startIndex){
    for (int i = startIndex; i >= 0; i--) {
        if (symbol.equals(symbols.get(i))) {
            return i;
        }
    }
    return -1;
}",java:S1172,
"public FactHandle getFactHandle(int i){
    if (factHandles == null) {
        this.factHandles = this.tuple.toFactHandles();
    }
    return null;
}",java:S1172,
"public Optional<T> getActivityHandlerAs(ActivityType type, Class<T> clazz){
    return getActivityHandler(type).map(x -> (T) x);
}",java:S1172,
"public Double getMaxRowCount(RelSubset rel, RelMetadataQuery mq){
    Util.discard(Bug.CALCITE_1048_FIXED);
    for (RelNode node : rel.getRels()) {
        if (node instanceof Sort) {
            Sort sort = (Sort) node;
            if (sort.fetch instanceof RexLiteral) {
                return (double) RexLiteral.intValue(sort.fetch);
            }
        }
    }
    return Double.POSITIVE_INFINITY;
}",java:S1172,
"protected URI getDefaultResponseAction(Object endpoint, MessageAddressingProperties requestMap){
    URI requestAction = requestMap.getAction();
    if (requestAction != null) {
        return URI.create(requestAction.toString() + getOutputActionSuffix());
    } else {
        return null;
    }
}",java:S1172,
"public boolean mismatchIsMissingToken(TokenStream input, int[] follow){
    if (follow == null) {
        return false;
    }
    return false;
}",java:S1172,
"private void check3RouteSection1(Context context, ValidationReport report, List<JourneyPattern> beans, int jpRank, RouteSection rs, ValidationParameters parameters){
    if (beans.size() <= 1)
        return;
    prepareCheckPoint(context, ROUTE_SECTION_1);
    for (int i = jpRank + 1; i < beans.size(); i++) {
        JourneyPattern jp2 = beans.get(i);
        String modeKey = jp2.getRoute().getLine().getTransportModeName().toString();
        TransportModeParameters mode = getModeParameters(parameters, modeKey, log);
        if (mode == null) {
            log.error(""no parameters for mode "" + modeKey);
            mode = getModeParameters(parameters, MODE_OTHER, log);
            if (mode == null) {
                log.error(""no parameters for mode "" + MODE_OTHER);
                mode = modeDefault;
            }
        }
        double distanceMax = mode.getInterStopAreaDistanceMax();
        if (distanceMax <= 0) {
            return;
        }
        List<RouteSection> lstRouteSection = jp2.getRouteSections();
        for (int j = 0; j < lstRouteSection.size(); j++) {
            RouteSection rs2 = lstRouteSection.get(j);
            if (rs.equals(rs2)) {
                StopArea fromStopArea = rs.getFromScheduledStopPoint().getContainedInStopAreaRef().getObject();
                StopArea toStopArea = rs.getToScheduledStopPoint().getContainedInStopAreaRef().getObject();
                if (fromStopArea == null || toStopArea == null) {
                    continue;
                }
                double distance = distance(fromStopArea, toStopArea);
                if (distance > distanceMax) {
                    DataLocation location = buildLocation(context, rs2);
                    DataLocation targetLocation = buildLocation(context, fromStopArea);
                    ValidationReporter reporter = ValidationReporter.Factory.getInstance();
                    reporter.addCheckPointReportError(context, ROUTE_SECTION_1, location, null, null, targetLocation);
                }
            }
        }
    }
}",java:S1172,
"private void encodeWithPopulationCodec(final String name, final int[] band, final BHSDCodec defaultCodec, final BandData bandData, final BandAnalysisResults results) throws Pack200Exception{
    results.numCodecsTried += 3;
    final Map<Integer, Integer> distinctValues = bandData.distinctValues;
    final List<Integer> favored = new ArrayList<>();
    distinctValues.forEach((k, v) -> {
        if (v.intValue() > 2 || distinctValues.size() < 256) {
            favored.add(k);
        }
    });
    if (distinctValues.size() > 255) {
        favored.sort((arg0, arg1) -> distinctValues.get(arg1).compareTo(distinctValues.get(arg0)));
    }
    final Map<Integer, Integer> favoredToIndex = new HashMap<>();
    for (int i = 0; i < favored.size(); ++i) {
        favoredToIndex.put(favored.get(i), Integer.valueOf(i));
    }
    final IntList unfavoured = new IntList();
    final int[] tokens = new int[band.length];
    for (int i = 0; i < band.length; ++i) {
        final Integer favouredIndex = favoredToIndex.get(Integer.valueOf(band[i]));
        if (favouredIndex == null) {
            tokens[i] = 0;
            unfavoured.add(band[i]);
        } else {
            tokens[i] = favouredIndex.intValue() + 1;
        }
    }
    favored.add(favored.get(favored.size() - 1));
    final int[] favouredBand = integerListToArray(favored);
    final int[] unfavouredBand = unfavoured.toArray();
    final BandAnalysisResults favouredResults = analyseBand(TEXT_EXCEPTION, favouredBand, defaultCodec);
    final BandAnalysisResults unfavouredResults = analyseBand(TEXT_EXCEPTION, unfavouredBand, defaultCodec);
    int tdefL = 0;
    int l = 0;
    Codec tokenCodec = null;
    byte[] tokensEncoded;
    final int k = favored.size() - 1;
    if (k < 256) {
        tdefL = 1;
        tokensEncoded = Codec.BYTE1.encode(tokens);
    } else {
        final BandAnalysisResults tokenResults = analyseBand(TEXT_EXCEPTION, tokens, defaultCodec);
        tokenCodec = tokenResults.betterCodec;
        tokensEncoded = tokenResults.encodedBand;
        if (tokenCodec == null) {
            tokenCodec = defaultCodec;
        }
        l = ((BHSDCodec) tokenCodec).getL();
        final int h = ((BHSDCodec) tokenCodec).getH();
        final int s = ((BHSDCodec) tokenCodec).getS();
        final int b = ((BHSDCodec) tokenCodec).getB();
        final int d = ((BHSDCodec) tokenCodec).isDelta() ? 1 : 0;
        if (s == 0 && d == 0) {
            boolean canUseTDefL = true;
            if (b > 1) {
                final BHSDCodec oneLowerB = new BHSDCodec(b - 1, h);
                if (oneLowerB.largest() >= k) {
                    canUseTDefL = false;
                }
            }
            if (canUseTDefL) {
                switch(l) {
                    case 4:
                        tdefL = 1;
                        break;
                    case 8:
                        tdefL = 2;
                        break;
                    case 16:
                        tdefL = 3;
                        break;
                    case 32:
                        tdefL = 4;
                        break;
                    case 64:
                        tdefL = 5;
                        break;
                    case 128:
                        tdefL = 6;
                        break;
                    case 192:
                        tdefL = 7;
                        break;
                    case 224:
                        tdefL = 8;
                        break;
                    case 240:
                        tdefL = 9;
                        break;
                    case 248:
                        tdefL = 10;
                        break;
                    case 252:
                        tdefL = 11;
                        break;
                    default:
                        break;
                }
            }
        }
    }
    final byte[] favouredEncoded = favouredResults.encodedBand;
    final byte[] unfavouredEncoded = unfavouredResults.encodedBand;
    final Codec favouredCodec = favouredResults.betterCodec;
    final Codec unfavouredCodec = unfavouredResults.betterCodec;
    int specifier = 141 + (favouredCodec == null ? 1 : 0) + (4 * tdefL) + (unfavouredCodec == null ? 2 : 0);
    final IntList extraBandMetadata = new IntList(3);
    if (favouredCodec != null) {
        IntStream.of(CodecEncoding.getSpecifier(favouredCodec, null)).forEach(extraBandMetadata::add);
    }
    if (tdefL == 0) {
        IntStream.of(CodecEncoding.getSpecifier(tokenCodec, null)).forEach(extraBandMetadata::add);
    }
    if (unfavouredCodec != null) {
        IntStream.of(CodecEncoding.getSpecifier(unfavouredCodec, null)).forEach(extraBandMetadata::add);
    }
    final int[] extraMetadata = extraBandMetadata.toArray();
    final byte[] extraMetadataEncoded = Codec.UNSIGNED5.encode(extraMetadata);
    if (defaultCodec.isSigned()) {
        specifier = -1 - specifier;
    } else {
        specifier = specifier + defaultCodec.getL();
    }
    final byte[] firstValueEncoded = defaultCodec.encode(new int[] { specifier });
    final int totalBandLength = firstValueEncoded.length + favouredEncoded.length + tokensEncoded.length + unfavouredEncoded.length;
    if (totalBandLength + extraMetadataEncoded.length < results.encodedBand.length) {
        results.saved += results.encodedBand.length - (totalBandLength + extraMetadataEncoded.length);
        final byte[] encodedBand = new byte[totalBandLength];
        System.arraycopy(firstValueEncoded, 0, encodedBand, 0, firstValueEncoded.length);
        System.arraycopy(favouredEncoded, 0, encodedBand, firstValueEncoded.length, favouredEncoded.length);
        System.arraycopy(tokensEncoded, 0, encodedBand, firstValueEncoded.length + favouredEncoded.length, tokensEncoded.length);
        System.arraycopy(unfavouredEncoded, 0, encodedBand, firstValueEncoded.length + favouredEncoded.length + tokensEncoded.length, unfavouredEncoded.length);
        results.encodedBand = encodedBand;
        results.extraMetadata = extraMetadata;
        if (l != 0) {
            results.betterCodec = new PopulationCodec(favouredCodec, l, unfavouredCodec);
        } else {
            results.betterCodec = new PopulationCodec(favouredCodec, tokenCodec, unfavouredCodec);
        }
    }
}",java:S1172,
"private void initializeReferencedStopAreas(Referential cache, Collection<StopPoint> stopPoints, Collection<RoutePoint> routePoints){
    Set<String> stopPointReferencedStopAreasObjectIds = stopPoints.stream().map(StopPoint::getScheduledStopPoint).distinct().filter(Objects::nonNull).map(ScheduledStopPoint::getContainedInStopAreaRef).filter(Objects::nonNull).map(ObjectReference::getObject).filter(Objects::nonNull).map(NeptuneIdentifiedObject::getObjectId).filter(Objects::nonNull).collect(Collectors.toSet());
    List<StopArea> referencedStopAreas = stopAreaDAO.findByObjectId(stopPointReferencedStopAreasObjectIds);
    for (StopArea referencedStopArea : referencedStopAreas) {
        cache.getStopAreas().put(referencedStopArea.getObjectId(), referencedStopArea);
        for (ScheduledStopPoint scheduledStopPoint : referencedStopArea.getContainedScheduledStopPoints()) {
            cache.getScheduledStopPoints().put(scheduledStopPoint.getObjectId(), scheduledStopPoint);
        }
    }
}",java:S1172,
"public void force(boolean metadata) throws IOException{
    long pos = 0;
    try {
        pos = FutureUtils.result(logWriter.flushAndCommit());
    } catch (IOException ioe) {
        throw ioe;
    } catch (Exception ex) {
        LOG.error(""unexpected exception in AppendOnlyStreamWriter.force "", ex);
        throw new UnexpectedException(""unexpected exception in AppendOnlyStreamWriter.force"", ex);
    }
    synchronized (syncPos) {
        syncPos[0] = pos;
    }
}",java:S1172,
"public Shuttle preVisit(ForEachStatement forEachStatement){
    return this;
}",java:S1172,
"private static void execYarnKillCommand(Logger logger, String tenantCode, String appId, String commandFile, String cmd){
    try {
        StringBuilder sb = new StringBuilder();
        sb.append(""#!/bin/sh\n"");
        sb.append(""BASEDIR=$(cd `dirname $0`; pwd)\n"");
        sb.append(""cd $BASEDIR\n"");
        if (CommonUtils.getSystemEnvPath() != null) {
            sb.append(""source "").append(CommonUtils.getSystemEnvPath()).append(""\n"");
        }
        sb.append(""\n\n"");
        sb.append(cmd);
        File f = new File(commandFile);
        if (!f.exists()) {
            org.apache.commons.io.FileUtils.writeStringToFile(new File(commandFile), sb.toString(), StandardCharsets.UTF_8);
        }
        String runCmd = String.format(""%s %s"", Constants.SH, commandFile);
        runCmd = OSUtils.getSudoCmd(tenantCode, runCmd);
        log.info(""kill cmd:{}"", runCmd);
        OSUtils.exeCmd(runCmd);
    } catch (Exception e) {
        log.error(String.format(""Kill yarn application app id [%s] failed: [%s]"", appId, e.getMessage()));
    }
}",java:S1172,
"protected boolean match(TextCheck textCheck, String actualText, String expectedText){
    return match(actualText, expectedText);
}",java:S1172,
"public boolean requiresLeftActivation(final BuildUtils utils, final RuleConditionElement rce){
    return false;
}",java:S1172,
"private static int processLocalCmd(String cmd, CommandProcessor proc, CliSessionState ss){
    int ret = 0;
    if (proc != null) {
        String firstToken = cmd.trim().split(""\\s+"")[0];
        String cmd1 = cmd.trim().substring(firstToken.length()).trim();
        if (proc instanceof ResetProcessor || proc instanceof CompileProcessor || proc instanceof ReloadProcessor || proc instanceof CryptoProcessor || proc instanceof AddResourceProcessor || proc instanceof ListResourceProcessor || proc instanceof LlapClusterResourceProcessor || proc instanceof LlapCacheResourceProcessor) {
            if (cmd1.trim().split(""\\s+"").length < 1) {
                ret = -1;
            }
        }
        if (proc instanceof SetProcessor) {
            if (!cmd1.contains(""="")) {
                ret = -1;
            }
        }
        if (proc instanceof DfsProcessor) {
            String[] argv = cmd1.trim().split(""\\s+"");
            if (""-put"".equals(firstToken) || ""-test"".equals(firstToken) || ""-copyFromLocal"".equals(firstToken) || ""-moveFromLocal"".equals(firstToken)) {
                if (argv.length < 3) {
                    ret = -1;
                }
            } else if (""-get"".equals(firstToken) || ""-copyToLocal"".equals(firstToken) || ""-moveToLocal"".equals(firstToken)) {
                if (argv.length < 3) {
                    ret = -1;
                }
            } else if (""-mv"".equals(firstToken) || ""-cp"".equals(firstToken)) {
                if (argv.length < 3) {
                    ret = -1;
                }
            } else if (""-rm"".equals(firstToken) || ""-rmr"".equals(firstToken) || ""-cat"".equals(firstToken) || ""-mkdir"".equals(firstToken) || ""-touchz"".equals(firstToken) || ""-stat"".equals(firstToken) || ""-text"".equals(firstToken)) {
                if (argv.length < 2) {
                    ret = -1;
                }
            }
        }
    }
    return ret;
}",java:S1172,
"public AnnotationOperationResponse createEuropeanaAnnotationLd(String motivation, Long annotationNr, String europeanaLdStr, String apikey) throws IOException{
    String url = getAnnotationServiceUri();
    url += ""/"" + WebAnnotationFields.PAR_CHAR;
    String resApiKey = getApiKey();
    if (apikey != null) {
        resApiKey = apikey;
    }
    url += WebAnnotationFields.PARAM_WSKEY + EQUALS + resApiKey + AND;
    url += WebAnnotationFields.USER_TOKEN + EQUALS + ""tester1"" + AND;
    if (annotationNr != null)
        url += WebAnnotationFields.IDENTIFIER + EQUALS + annotationNr + AND;
    url += WebAnnotationFields.INDEX_ON_CREATE + EQUALS + ""true"";
    String json = getJSONResultWithBodyAndHeader(url, europeanaLdStr, authorizationHeaderName, regularUserAuthorizationValue);
    AnnotationOperationResponse aor = new AnnotationOperationResponse();
    aor.setSuccess(""true"");
    aor.setAction(""create:/annotation.jsonld"");
    aor.setJson(json);
    return aor;
}",java:S1172,
"public JsonElement serialize(Timestamp src, Type arg1, JsonSerializationContext arg2){
    String dateFormatAsString = format.format(new Date(src.getTime()));
    return new JsonPrimitive(dateFormatAsString);
}",java:S1172,
"public static boolean isCompatible(int major, int minor, int revision){
    if (major != droolsMajorVersion) {
        return false;
    }
    return minor == 0 ? droolsMinorVersion == 0 : droolsMinorVersion > 0;
}",java:S1172,
"private BackOfficeServicePort getBackOfficeService(boolean forceLoading) throws Exception{
    String method = ""getBackOfficeService"";
    log.debug(method + "". BEGIN"");
    try {
        backOfficeService = acarisServiceFactory.getAcarisService().getBackOfficeServicePort();
        log.info(method + "". backOfficeService loaded correctly"");
    } catch (Exception e) {
        log.error(method + "". Exception loading interface "" + e);
        throw e;
    }
    return backOfficeService;
}",java:S1172,
"public static ScannableTable dummyTableFuncWithTwoParams(final long param1, final long param2){
    return new ScannableTable() {

        @Override
        public RelDataType getRowType(RelDataTypeFactory typeFactory) {
            return typeFactory.builder().add(""N"", SqlTypeName.BIGINT).build();
        }

        @Override
        public Enumerable<@Nullable Object[]> scan(DataContext root) {
            return new AbstractEnumerable<Object[]>() {

                @Override
                public Enumerator<Object[]> enumerator() {
                    return new Enumerator<Object[]>() {

                        @Override
                        public Object[] current() {
                            return new Object[] {};
                        }

                        @Override
                        public boolean moveNext() {
                            return false;
                        }

                        @Override
                        public void reset() {
                        }

                        @Override
                        public void close() {
                        }
                    };
                }
            };
        }

        @Override
        public Statistic getStatistic() {
            return Statistics.UNKNOWN;
        }

        @Override
        public Schema.TableType getJdbcTableType() {
            return Schema.TableType.TABLE;
        }

        @Override
        public boolean isRolledUp(String column) {
            return false;
        }

        @Override
        public boolean rolledUpColumnValidInsideAgg(String column, SqlCall call, @Nullable SqlNode parent, @Nullable CalciteConnectionConfig config) {
            return true;
        }
    };
}",java:S1172,
"public static Component fromXML(String xml){
    return null;
}",java:S1172,
"private MultifilingServicePort getMultifilingService(boolean forceLoading) throws Exception{
    String method = ""getMultifilingService"";
    log.debug(method + "". BEGIN"");
    try {
        multifilingService = acarisServiceFactory.getAcarisService().getMultifilingServicePort();
        log.info(method + "". AcarisMultifilingServiceInterface loaded correctly"");
    } catch (Exception e) {
        log.error(method + "". Exception loading interface "" + e);
        throw e;
    }
    return multifilingService;
}",java:S1172,
"private Node createGroupColorRegion(BibEntryTableViewModel entry, List<AbstractGroup> matchedGroups){
    List<Color> groupColors = matchedGroups.stream().flatMap(group -> OptionalUtil.toStream(group.getColor())).collect(Collectors.toList());
    if (!groupColors.isEmpty()) {
        HBox container = new HBox();
        container.setSpacing(2);
        container.setMinWidth(10);
        container.setAlignment(Pos.CENTER_LEFT);
        container.setPadding(new Insets(0, 2, 0, 2));
        groupColors.stream().distinct().forEach(groupColor -> {
            Rectangle groupRectangle = new Rectangle();
            groupRectangle.getStyleClass().add(""groupColumnBackground"");
            groupRectangle.setWidth(3);
            groupRectangle.setHeight(18);
            groupRectangle.setFill(groupColor);
            groupRectangle.setStrokeWidth(1);
            container.getChildren().add(groupRectangle);
        });
        String matchedGroupsString = matchedGroups.stream().distinct().map(AbstractGroup::getName).collect(Collectors.joining("", ""));
        Tooltip tooltip = new Tooltip(Localization.lang(""Entry is contained in the following groups:"") + ""\n"" + matchedGroupsString);
        Tooltip.install(container, tooltip);
        return container;
    }
    return new Pane();
}",java:S1172,
"protected void triggerMouseOverPosition(int pos, int mouseY){
    if (selectionLocked)
        return;
    List<AlignedPosition> apos = parent.getAligMap();
    if (pos > apos.size() - 1)
        return;
    for (AlignmentPositionListener li : alignmentPositionListeners) {
        li.mouseOverPosition(apos.get(pos));
    }
}",java:S1172,
"public boolean closeall(String line){
    if (close(null)) {
        while (close(null)) {
        }
        return true;
    }
    return false;
}",java:S1172,
"public static ErrorMessageFactory shouldNotAccept(Predicate<? super T> predicate, T value, PredicateDescription description){
    requireNonNull(description, ""The predicate description must not be null"");
    return new ShouldNotAccept(value, description);
}",java:S1172,
"private void addEvents(TezTaskAttemptID taskAttemptID, Collection<TezEvent> events){
    if (events != null && !events.isEmpty()) {
        eventsToSend.addAll(events);
    }
}",java:S1172,
"public static ByteBuf fromEnvelopedBuf(ByteBuf src, StatsLogger statsLogger) throws IOException{
    byte version = src.readByte();
    if (version != CURRENT_VERSION) {
        throw new IOException(String.format(""Version mismatch while reading. Received: %d,"" + "" Required: %d"", version, CURRENT_VERSION));
    }
    int flags = src.readInt();
    int codecCode = flags & COMPRESSION_CODEC_MASK;
    int originDataLen = src.readInt();
    int actualDataLen = src.readInt();
    ByteBuf compressedBuf = src.slice(src.readerIndex(), actualDataLen);
    ByteBuf decompressedBuf;
    try {
        if (Type.NONE.code() == codecCode && originDataLen != actualDataLen) {
            throw new IOException(""Inconsistent data length found for a non-compressed entry : compressed = "" + originDataLen + "", actual = "" + actualDataLen);
        }
        CompressionCodec codec = CompressionUtils.getCompressionCodec(Type.of(codecCode));
        decompressedBuf = codec.decompress(compressedBuf, originDataLen);
    } finally {
        ReferenceCountUtil.release(compressedBuf);
    }
    return decompressedBuf;
}",java:S1172,
"protected JAXBContext jaxbContextForList(@NonNull final DomainObjectList list){
    return JaxbUtils.jaxbContextFor(DomainObjectList.class, true);
}",java:S1172,
"public Object shed(TraitType trait, TypeWrapper rangeWrapper, TypeWrapper asWrapper, WorkingMemory workingMemory){
    if (this.defaultValuesByTraits != null) {
        this.defaultValuesByTraits.removeMember(trait._getTypeCode());
    }
    this.rangeTypes.remove(rangeWrapper);
    if (!isExplicitlySet) {
        this.value = getDefault();
    }
    Class<?> klass = asWrapper.getKlass();
    if (this.value == null || klass.isInstance(this.value)) {
        return this.value;
    } else if (this.value instanceof TraitableBean) {
        return ((TraitableBean) this.value).getTrait(klass.getName());
    } else if (this.value instanceof TraitProxyImpl) {
        return ((TraitProxyImpl) this.value).getObject().getTrait(klass.getName());
    } else {
        throw new IllegalStateException(""Logical field shed : illegal value for a field : "" + this.value + "", class expected "" + klass.getName());
    }
}",java:S1172,
"private void handleFallOnGround(GameSession session, GameEntity entity, MotionState motionState){
    if (session.getPlayer().inGodmode()) {
        return;
    }
    int maxDelay = 200;
    long actualDelay = System.currentTimeMillis() - cachedLandingTimeMillisecond;
    Grasscutter.getLogger().trace(""MOTION_FALL_ON_GROUND received after "" + actualDelay + ""/"" + maxDelay + ""ms."" + (actualDelay > maxDelay ? "" Discard"" : """"));
    if (actualDelay > maxDelay) {
        return;
    }
    float currentHP = entity.getFightProperty(FightProperty.FIGHT_PROP_CUR_HP);
    float maxHP = entity.getFightProperty(FightProperty.FIGHT_PROP_MAX_HP);
    float damageFactor = 0;
    if (cachedLandingSpeed < -23.5) {
        damageFactor = 0.33f;
    }
    if (cachedLandingSpeed < -25) {
        damageFactor = 0.5f;
    }
    if (cachedLandingSpeed < -26.5) {
        damageFactor = 0.66f;
    }
    if (cachedLandingSpeed < -28) {
        damageFactor = 1f;
    }
    float damage = maxHP * damageFactor;
    float newHP = currentHP - damage;
    if (newHP < 0) {
        newHP = 0;
    }
    if (damageFactor > 0) {
        Grasscutter.getLogger().debug(currentHP + ""/"" + maxHP + ""\tLandingSpeed: "" + cachedLandingSpeed + ""\tDamageFactor: "" + damageFactor + ""\tDamage: "" + damage + ""\tNewHP: "" + newHP);
    } else {
        Grasscutter.getLogger().trace(currentHP + ""/"" + maxHP + ""\tLandingSpeed: 0\tNo damage"");
    }
    entity.setFightProperty(FightProperty.FIGHT_PROP_CUR_HP, newHP);
    entity.getWorld().broadcastPacket(new PacketEntityFightPropUpdateNotify(entity, FightProperty.FIGHT_PROP_CUR_HP));
    if (newHP == 0) {
        session.getPlayer().getStaminaManager().killAvatar(session, entity, PlayerDieTypeOuterClass.PlayerDieType.PLAYER_DIE_TYPE_FALL);
    }
    cachedLandingSpeed = 0;
}",java:S1172,
"public Double getMinRowCount(Intersect rel, RelMetadataQuery mq){
    return 0d;
}",java:S1172,
"public Optional<Path> findExistingFile(LinkedFile flEntry, BibEntry entry, String targetFileName){
    Path targetFilePath = flEntry.findIn(databaseContext, filePreferences).get().getParent().resolve(targetFileName);
    Path oldFilePath = flEntry.findIn(databaseContext, filePreferences).get();
    Optional<Path> matchedByDiffCase = Optional.empty();
    try (Stream<Path> stream = Files.list(oldFilePath.getParent())) {
        matchedByDiffCase = stream.filter(name -> name.toString().equalsIgnoreCase(targetFilePath.toString())).findFirst();
    } catch (IOException e) {
        LOGGER.error(""Could not get the list of files in target directory"", e);
    }
    return matchedByDiffCase;
}",java:S1172,
"public static ObjectLoader createDefault(final MetaModelContext mmc){
    return request -> ChainOfResponsibility.named(""ObjectLoader"", handlers).handle(Objects.requireNonNull(request));
}",java:S1172,
"private void parseForMemory(MemoryInfo parentObj, String parentTag, String qName, Attributes attributes) throws SAXException{
    if (Constants.ENTITY_GC.equals(qName)) {
        GcInfo gc = maker.buildGc(attributes);
        linker.onGc(parentObj, gc);
        objects.push(gc);
    } else {
        throw new SAXException(String.format(""Element(%s) is not expected under memory!"", qName));
    }
    tags.push(qName);
}",java:S1172,
"private void handleHelp(String command){
    boolean silentBefore = silent;
    silent = false;
    println(""Commands:"");
    printGeneralCommands();
    printQueueCommands();
    printSetCommands();
    printLockCommands();
    printMapCommands();
    printMulitiMapCommands();
    printListCommands();
    printAtomicLongCommands();
    printExecutorServiceCommands();
    silent = silentBefore;
}",java:S1172,
"private static void ST_MakeGridPoints(final Geometry geom, final BigDecimal deltaX, final BigDecimal deltaY){
}",java:S1172,
"public RelNode convert(Sort sort, CassandraFilter filter){
    final RelTraitSet traitSet = sort.getTraitSet().replace(CassandraRel.CONVENTION).replace(sort.getCollation());
    return new CassandraSort(sort.getCluster(), traitSet, convert(sort.getInput(), traitSet.replace(RelCollations.EMPTY)), sort.getCollation());
}",java:S1172,
"protected MethodSpec.Builder operationBody(MethodSpec.Builder builder, OperationModel opModel){
    return builder.addModifiers(DEFAULT).addStatement(""throw new $T()"", UnsupportedOperationException.class);
}",java:S1172,
"private void parseForMessage(MessageInfo parentObj, String parentTag, String qName, Attributes attributes) throws SAXException{
    objects.push(parentObj);
    tags.push(qName);
}",java:S1172,
"public String describeFlags(char flags){
    return ""<NONE>"";
}",java:S1172,
"public Double getMinRowCount(Values values, RelMetadataQuery mq){
    return (double) values.getTuples().size();
}",java:S1172,
"public boolean save(String line) throws IOException{
    beeLine.info(beeLine.loc(""saving-options"", beeLine.getOpts().getPropertiesFile()));
    beeLine.getOpts().save();
    return true;
}",java:S1172,
"public static Builder<T, B, R> builder(Class<T> itemClass, Class<B> builderClass, Class<R> attributeClass){
    return new Builder<>(EnhancedType.of(attributeClass));
}",java:S1172,
"private void createJourneyFrequencies(Context context, Referential referential, GtfsImporter importer, GtfsImportParameters configuration, GtfsTrip gtfsTrip, VehicleJourney vehicleJourney){
    int count = 0;
    for (GtfsFrequency frequency : importer.getFrequencyByTrip().values(gtfsTrip.getTripId())) {
        vehicleJourney.setJourneyCategory(JourneyCategoryEnum.Frequency);
        String timeBandObjectId = AbstractConverter.composeObjectId(configuration, Timeband.TIMETABLE_KEY, gtfsTrip.getTripId() + ""-"" + count++, log);
        Timeband timeband = ObjectFactory.getTimeband(referential, timeBandObjectId);
        timeband.setName(getTimebandName(frequency));
        timeband.setStartTime(frequency.getStartTime().getTime());
        timeband.setEndTime(frequency.getEndTime().getTime());
        JourneyFrequency journeyFrequency = new JourneyFrequency();
        journeyFrequency.setExactTime(frequency.getExactTimes());
        journeyFrequency.setFirstDepartureTime(frequency.getStartTime().getTime());
        journeyFrequency.setLastDepartureTime(frequency.getEndTime().getTime());
        journeyFrequency.setScheduledHeadwayInterval(Duration.ofSeconds(frequency.getHeadwaySecs()));
        journeyFrequency.setTimeband(timeband);
        journeyFrequency.setVehicleJourney(vehicleJourney);
        List<VehicleJourneyAtStop> vjass = vehicleJourney.getVehicleJourneyAtStops();
        VehicleJourneyAtStop firstVjas = vjass.get(0);
        LocalTime firstArrivalTime = firstVjas.getArrivalTime();
        LocalTime firstDepartureTime = firstVjas.getDepartureTime();
        for (VehicleJourneyAtStop vjas : vjass) {
            LocalTime arrivalTime = TimeUtil.toLocalTime(TimeUtil.subtract(vjas.getArrivalTime(), firstArrivalTime).toMillis());
            LocalTime departureTime = TimeUtil.toLocalTime(TimeUtil.subtract(vjas.getDepartureTime(), firstDepartureTime).toMillis());
            vjas.setArrivalTime(arrivalTime);
            vjas.setDepartureTime(departureTime);
        }
    }
}",java:S1172,
"public static String formatTimestamp(DataContext ctx, String fmtString, long timestamp){
    return internalFormatDatetime(fmtString, internalToTimestamp(timestamp));
}",java:S1172,
" void executeBeginGroup(HepInstruction.BeginGroup instruction, HepInstruction.BeginGroup.State state){
    checkArgument(state.programState.group == null);
    state.programState.group = state.endGroup;
    LOGGER.trace(""Entering group"");
}",java:S1172,
"public static void combinerUnsupported(T ignored, T ignored2){
    throw new UnsupportedOperationException(""parallelStream() is not supported"");
}",java:S1172,
"protected void parseJsonObject(JSONObject jo, Annotation annoLd, int bnodeCount, String profile) throws JsonParseException{
    try {
        if (jo.has(JsonLdCommon.CONTEXT)) {
            Object context = jo.get(JsonLdCommon.CONTEXT);
            if (context instanceof String) {
            } else if (context instanceof JSONObject) {
                JSONObject contextObject = (JSONObject) context;
                for (int i = 0; i < contextObject.names().length(); i++) {
                    String name = contextObject.names().getString(i).toLowerCase();
                    addNamespacePrefix(contextObject.getString(name), name);
                }
            } else if (context instanceof JSONObject) {
            }
            jo.remove(JsonLdCommon.CONTEXT);
        }
        if (jo.names() != null && jo.names().length() > 0) {
            for (int i = 0; i < jo.names().length(); i++) {
                String property = jo.names().getString(i);
                handleProperty(annoLd, jo, property);
            }
        }
    } catch (JSONException e) {
        logger.error(""There were JSON problems when parsing the JSON-LD String"", e);
        e.printStackTrace();
    }
}",java:S1172,
"public void unregisterChildWatcher(String path, Watcher watcher, boolean removeFromServer){
    Set<Watcher> watchers = childWatches.get(path);
    if (null == watchers) {
        logger.warn(""No watchers found on path {} while unregistering child watcher {}."", path, watcher);
        return;
    }
    synchronized (watchers) {
        if (watchers.remove(watcher)) {
            allWatchesGauge.decrement();
        } else {
            logger.warn(""Remove a non-registered child watcher {} from path {}"", watcher, path);
        }
        if (watchers.isEmpty()) {
            childWatches.remove(path, watchers);
        }
    }
}",java:S1172,
"public ChouettePTNetworkType.ConnectionLink produce(ConnectionLink connectionLink, boolean addExtension){
    ChouettePTNetworkType.ConnectionLink jaxbConnectionLink = tridentFactory.createChouettePTNetworkTypeConnectionLink();
    populateFromModel(jaxbConnectionLink, connectionLink);
    jaxbConnectionLink.setComment(getNotEmptyString(connectionLink.getComment()));
    jaxbConnectionLink.setName(connectionLink.getName());
    if (connectionLink.getStartOfLink() != null)
        jaxbConnectionLink.setStartOfLink(connectionLink.getStartOfLink().getObjectId());
    if (connectionLink.getEndOfLink() != null)
        jaxbConnectionLink.setEndOfLink(connectionLink.getEndOfLink().getObjectId());
    jaxbConnectionLink.setLinkDistance(connectionLink.getLinkDistance());
    if (connectionLink.getMobilityRestrictedSuitable() != null) {
        jaxbConnectionLink.setMobilityRestrictedSuitability(connectionLink.getMobilityRestrictedSuitable().booleanValue());
    }
    if (connectionLink.getLiftAvailable() != null) {
        jaxbConnectionLink.setLiftAvailability(connectionLink.getLiftAvailable().booleanValue());
    }
    if (connectionLink.getStairsAvailable() != null) {
        jaxbConnectionLink.setStairsAvailability(connectionLink.getStairsAvailable().booleanValue());
    }
    if (connectionLink.getDefaultDuration() != null) {
        jaxbConnectionLink.setDefaultDuration(toDuration(connectionLink.getDefaultDuration()));
    }
    if (connectionLink.getFrequentTravellerDuration() != null) {
        jaxbConnectionLink.setFrequentTravellerDuration(toDuration(connectionLink.getFrequentTravellerDuration()));
    }
    if (connectionLink.getOccasionalTravellerDuration() != null) {
        jaxbConnectionLink.setOccasionalTravellerDuration(toDuration(connectionLink.getOccasionalTravellerDuration()));
    }
    if (connectionLink.getMobilityRestrictedTravellerDuration() != null) {
        jaxbConnectionLink.setMobilityRestrictedTravellerDuration(toDuration(connectionLink.getMobilityRestrictedTravellerDuration()));
    }
    try {
        ConnectionLinkTypeEnum linkType = connectionLink.getLinkType();
        if (linkType != null) {
            jaxbConnectionLink.setLinkType(ConnectionLinkTypeType.fromValue(linkType.name()));
        }
    } catch (IllegalArgumentException e) {
    }
    ConnectionLinkExtensionType connectionLinkExtension = tridentFactory.createConnectionLinkExtensionType();
    AccessibilitySuitabilityDetails details = extractAccessibilitySuitabilityDetails(connectionLink.getUserNeeds());
    if (details != null) {
        connectionLinkExtension.setAccessibilitySuitabilityDetails(details);
        jaxbConnectionLink.setConnectionLinkExtension(connectionLinkExtension);
    }
    return jaxbConnectionLink;
}",java:S1172,
"private Map<String, StorageAlertInfo> prepareBlankAlert(long start, long end, int minuteCounts, String type){
    Map<String, StorageAlertInfo> results = new LinkedHashMap<String, StorageAlertInfo>();
    for (long s = start; s <= end; s += TimeHelper.ONE_MINUTE) {
        String title = m_sdf.format(new Date(s));
        StorageAlertInfo blankAlertInfo = makeAlertInfo(type, new Date(start));
        results.put(title, blankAlertInfo);
    }
    return results;
}",java:S1172,
"private String extractSqlStringFromException(final Throwable ex){
    return null;
}",java:S1172,
"private int ascertainParentFingerprint(DeterministicKey parentKey, int parentFingerprint) throws IllegalArgumentException{
    if (parentFingerprint != 0) {
        if (parent != null)
            checkArgument(parent.getFingerprint() == parentFingerprint, ""parent fingerprint mismatch"", Integer.toHexString(parent.getFingerprint()), Integer.toHexString(parentFingerprint));
        return parentFingerprint;
    } else
        return 0;
}",java:S1172,
"protected Map<K, R> prepareResult(Collection<Entry<Data, Data>> entries, boolean shouldInvalidate){
    if (CollectionUtil.isEmpty(entries)) {
        return emptyMap();
    }
    Map<K, R> result = createHashMap(entries.size());
    for (Entry<Data, Data> entry : entries) {
        K key = toObject(entry.getKey());
        result.put(key, toObject(entry.getValue()));
    }
    return result;
}",java:S1172,
"private Throwable translateExceptionIfPossible(final Throwable ex, final PlatformTransactionManager txManager){
    if (ex instanceof DataAccessException) {
        return ex;
    }
    if (ex instanceof RuntimeException) {
        val translatedEx = persistenceExceptionTranslators.stream().map(translator -> translator.translateExceptionIfPossible((RuntimeException) ex)).filter(_NullSafe::isPresent).findFirst().orElse(null);
        if (translatedEx != null) {
            return translatedEx;
        }
    }
    return ex;
}",java:S1172,
"public ChouetteRoute produce(Route route, Collection<Route> exportableRoutes, boolean addExtension){
    ChouetteRoute jaxbRoute = tridentFactory.createChouettePTNetworkTypeChouetteLineDescriptionChouetteRoute();
    populateFromModel(jaxbRoute, route);
    jaxbRoute.setComment(getNotEmptyString(route.getComment()));
    jaxbRoute.setName(route.getName());
    jaxbRoute.setNumber(route.getNumber());
    jaxbRoute.setPublishedName(route.getPublishedName());
    try {
        PTDirectionEnum direction = route.getDirection();
        if (direction != null) {
            jaxbRoute.setDirection(PTDirectionType.fromValue(direction.name()));
        }
    } catch (IllegalArgumentException e) {
    }
    if (hasOppositeRoute(route, log) && exportableRoutes.contains(route.getOppositeRoute())) {
        jaxbRoute.setWayBackRouteId(route.getOppositeRoute().getObjectId());
    }
    if (route.getWayBack() != null) {
        RouteExtension castorRouteExtension = new RouteExtension();
        castorRouteExtension.setWayBack(route.getWayBack());
        jaxbRoute.setRouteExtension(castorRouteExtension);
    }
    return jaxbRoute;
}",java:S1172,
"protected void postInit(NodeEngine nodeEngine, Properties properties, boolean metricsEnabled){
    if (metricsEnabled) {
        ((NodeEngineImpl) nodeEngine).getMetricsRegistry().registerDynamicMetricsProvider(this);
    }
}",java:S1172,
"public void produce(Context context, ExportableData exportableData, ExportableNetexData exportableNetexData){
    for (Timetable timetable : exportableData.getTimetables()) {
        String netexDaytypeId = NetexProducerUtils.generateNetexId(timetable);
        if (!exportableNetexData.getSharedDayTypes().containsKey(netexDaytypeId)) {
            DayType dayType = netexFactory.createDayType();
            NetexProducerUtils.populateId(timetable, dayType);
            List<DayOfWeekEnumeration> dayOfWeekEnumerations = NetexProducerUtils.toDayOfWeekEnumeration(timetable.getDayTypes());
            if (!dayOfWeekEnumerations.isEmpty()) {
                dayType.setProperties(createPropertiesOfDay_RelStructure(dayOfWeekEnumerations));
            }
            exportableNetexData.getSharedDayTypes().put(netexDaytypeId, dayType);
            DayTypeRefStructure dayTypeRef = netexFactory.createDayTypeRefStructure();
            NetexProducerUtils.populateReference(timetable, dayTypeRef, true);
            int counter = 0;
            for (int i = 0; i < timetable.getPeriods().size(); i++) {
                counter++;
                Period p = timetable.getPeriods().get(i);
                String operatingPeriodId = NetexProducerUtils.translateObjectId(netexDaytypeId, ""OperatingPeriod"") + ""-"" + counter;
                OperatingPeriod operatingPeriod = new OperatingPeriod().withVersion(dayType.getVersion()).withId(operatingPeriodId).withFromDate(p.getStartDate().atStartOfDay()).withToDate(p.getEndDate().atStartOfDay());
                if (!exportableNetexData.getSharedOperatingPeriods().containsKey(operatingPeriodId)) {
                    exportableNetexData.getSharedOperatingPeriods().put(operatingPeriodId, operatingPeriod);
                }
                OperatingPeriodRefStructure operatingPeriodRef = netexFactory.createOperatingPeriodRefStructure();
                NetexProducerUtils.populateReference(operatingPeriod, operatingPeriodRef, true);
                DayTypeAssignment dayTypeAssignment = netexFactory.createDayTypeAssignment().withId(NetexProducerUtils.translateObjectId(netexDaytypeId, ""DayTypeAssignment"") + ""-"" + counter).withVersion(NETEX_DEFAULT_OBJECT_VERSION).withOrder(BigInteger.ONE).withDayTypeRef(netexFactory.createDayTypeRef(dayTypeRef)).withOperatingPeriodRef(operatingPeriodRef);
                exportableNetexData.getSharedDayTypeAssignments().add(dayTypeAssignment);
            }
            for (CalendarDay day : timetable.getCalendarDays()) {
                counter++;
                DayTypeAssignment dayTypeAssignment = netexFactory.createDayTypeAssignment().withId(NetexProducerUtils.translateObjectId(netexDaytypeId, ""DayTypeAssignment"") + ""-"" + counter).withVersion(NETEX_DEFAULT_OBJECT_VERSION).withOrder(BigInteger.ONE).withDayTypeRef(netexFactory.createDayTypeRef(dayTypeRef)).withDate(day.getDate().atStartOfDay());
                if (day.getIncluded() != null && !day.getIncluded()) {
                    dayTypeAssignment.setIsAvailable(day.getIncluded());
                }
                exportableNetexData.getSharedDayTypeAssignments().add(dayTypeAssignment);
            }
        }
    }
}",java:S1172,
"public boolean isCheckable(final T element){
    return true;
}",java:S1172,
"public boolean load(String line) throws IOException{
    beeLine.getOpts().load();
    beeLine.info(beeLine.loc(""loaded-options"", beeLine.getOpts().getPropertiesFile()));
    return true;
}",java:S1172,
"public static String formatTime(DataContext ctx, String fmtString, int time){
    return internalFormatDatetime(fmtString, internalToTime(time));
}",java:S1172,
" byte[] getOptionsAsProperties(final Object options) throws IOException{
    return ByteUtils.EMPTY_BYTE_ARRAY;
}",java:S1172,
"private void convert(Context context, GtfsAgency gtfsAgency, Company company, OrganisationTypeEnum organisationType){
    company.setName(AbstractConverter.getNonEmptyTrimedString(gtfsAgency.getAgencyName()));
    company.setUrl(AbstractConverter.toString(gtfsAgency.getAgencyUrl()));
    company.setPhone(AbstractConverter.getNonEmptyTrimedString(gtfsAgency.getAgencyPhone()));
    String[] token = company.getObjectId().split("":"");
    company.setRegistrationNumber(token[2]);
    company.setTimeZone(AbstractConverter.toString(gtfsAgency.getAgencyTimezone()));
    company.setOrganisationType(organisationType);
    company.setFilled(true);
}",java:S1172,
"public Shuttle preVisit(GotoStatement gotoStatement){
    return this;
}",java:S1172,
"public static boolean mkdir(FileSystem fs, Path f, Configuration conf) throws IOException{
    LOG.info(""Creating directory if it doesn't exist: "" + f);
    return fs.mkdirs(f);
}",java:S1172,
" void layout(final Graphics2D g, final int min_y, final int max_y){
    width = LIFELINE_WIDTH;
    x_left = participant.getX_middle() - LIFELINE_WIDTH / 2;
    x_right = x_left + width;
    y_top = startAt != null ? startAt.y_bottom : min_y;
    y_bottom = endAt != null ? endAt.y_bottom : max_y;
    height = y_bottom - y_top;
}",java:S1172,
"public static GotoStatement break_(LabelTarget labelTarget){
    return new GotoStatement(GotoExpressionKind.Break, null, null);
}",java:S1172,
"protected Object createResult(AccumulateNode accNode, Object key, Object result){
    return result;
}",java:S1172,
"public RawClient createRawClientFor(SalesforceEndpoint endpoint) throws SalesforceException{
    return new DefaultRawClient(httpClient, """", session, loginConfig);
}",java:S1172,
" String inprogressZNodeName(long logSegmentId, long firstTxId, long logSegmentSeqNo){
    if (DistributedLogConstants.LOGSEGMENT_NAME_VERSION == conf.getLogSegmentNameVersion()) {
        return String.format(""%s_%018d"", DistributedLogConstants.INPROGRESS_LOGSEGMENT_PREFIX, logSegmentSeqNo);
    } else {
        return DistributedLogConstants.INPROGRESS_LOGSEGMENT_PREFIX + ""_"" + Long.toString(firstTxId, 16);
    }
}",java:S1172,
"public PTAccessPointType produce(AccessPoint accessPoint, boolean addExtension){
    PTAccessPointType jaxbAccessPoint = tridentFactory.createPTAccessPointType();
    populateFromModel(jaxbAccessPoint, accessPoint);
    jaxbAccessPoint.setComment(getNotEmptyString(accessPoint.getComment()));
    jaxbAccessPoint.setName(accessPoint.getName());
    if (accessPoint.getType() != null) {
        AccessPointTypeEnum type = accessPoint.getType();
        jaxbAccessPoint.setType(type.name());
    }
    jaxbAccessPoint.setOpeningTime(toCalendar(accessPoint.getOpeningTime()));
    jaxbAccessPoint.setClosingTime(toCalendar(accessPoint.getClosingTime()));
    if (accessPoint.hasAddress()) {
        AddressType castorAddress = tridentFactory.createAddressType();
        castorAddress.setCountryCode(getNotEmptyString(accessPoint.getCountryCode()));
        castorAddress.setStreetName(getNotEmptyString(accessPoint.getStreetName()));
        jaxbAccessPoint.setAddress(castorAddress);
    }
    jaxbAccessPoint.setContainedIn(accessPoint.getContainedIn().getObjectId());
    if (accessPoint.hasCoordinates()) {
        LongLatTypeEnum longLatType = accessPoint.getLongLatType();
        try {
            jaxbAccessPoint.setLongLatType(LongLatTypeType.fromValue(longLatType.name()));
            jaxbAccessPoint.setLatitude(accessPoint.getLatitude());
            jaxbAccessPoint.setLongitude(accessPoint.getLongitude());
        } catch (IllegalArgumentException e) {
        }
    } else {
        log.error(""missing coordinates for AccessPoint "" + accessPoint.getObjectId() + "" "" + accessPoint.getName());
        jaxbAccessPoint.setLatitude(BigDecimal.ZERO);
        jaxbAccessPoint.setLongitude(BigDecimal.ZERO);
        jaxbAccessPoint.setLongLatType(LongLatTypeType.WGS_84);
    }
    if (accessPoint.hasProjection()) {
        ProjectedPointType jaxbProjectedPoint = tridentFactory.createProjectedPointType();
        jaxbProjectedPoint.setProjectionType(accessPoint.getProjectionType());
        jaxbProjectedPoint.setX(accessPoint.getX());
        jaxbProjectedPoint.setY(accessPoint.getY());
        jaxbAccessPoint.setProjectedPoint(jaxbProjectedPoint);
    }
    return jaxbAccessPoint;
}",java:S1172,
"public void registerTaskPreempted(String host){
    numPreemptedTasks++;
}",java:S1172,
"public boolean close(String line){
    if (beeLine.getDatabaseConnection() == null) {
        return false;
    }
    try {
        if (beeLine.getDatabaseConnection().getCurrentConnection() != null && !(beeLine.getDatabaseConnection().getCurrentConnection().isClosed())) {
            int index = beeLine.getDatabaseConnections().getIndex();
            beeLine.info(beeLine.loc(""closing"", index, beeLine.getDatabaseConnection()));
            beeLine.getDatabaseConnection().getCurrentConnection().close();
        } else {
            beeLine.info(beeLine.loc(""already-closed""));
        }
    } catch (Exception e) {
        return beeLine.error(e);
    }
    beeLine.getDatabaseConnections().remove();
    return true;
}",java:S1172,
"protected boolean onEventDropped(final DroppedEvent event, final CalendarResponse response){
    return false;
}",java:S1172,
"protected void afterThrowing(Throwable throwable) throws TaskException{
    if (cancelTask()) {
        log.info(""Cancel the task successfully"");
    }
    TaskExecutionContextCacheManager.removeByTaskInstanceId(taskExecutionContext.getTaskInstanceId());
    taskExecutionContext.setCurrentExecutionStatus(TaskExecutionStatus.FAILURE);
    taskExecutionContext.setEndTime(System.currentTimeMillis());
    workerMessageSender.sendMessageWithRetry(taskExecutionContext, ITaskInstanceExecutionEvent.TaskInstanceExecutionEventType.FINISH);
    log.info(""Get a exception when execute the task, will send the task status: {} to master: {}"", TaskExecutionStatus.FAILURE.name(), taskExecutionContext.getHost());
}",java:S1172,
"private void parseForProperty(Property parentObj, String parentTag, String qName, Attributes attributes) throws SAXException{
    objects.push(parentObj);
    tags.push(qName);
}",java:S1172,
"public void setResourceType(String resourceType){
    this.resourceType = ""UDF"";
}",java:S1172,
"private List<String> ordered(final List<String> propertyIds){
    return Arrays.asList(""timestamp"", ""target"", ""logicalMemberIdentifier"", ""username"", ""complete"", ""resultSummary"", ""duration"", ""interactionId"");
}",java:S1172,
"private void handleRemovedColumnData(LlapSerDeDataBuffer[][] removed){
}",java:S1172,
"protected PersistenceManagerFactory lookupPersistenceManagerFactory(HttpServletRequest request){
    return lookupPersistenceManagerFactory();
}",java:S1172,
"protected boolean filterAccepts(ResourceChange.Type type, String namespace, String name){
    return true;
}",java:S1172,
"public static String composeObjectId(GtfsImportParameters configuration, String type, String id, Logger logger){
    if (id == null || id.isEmpty())
        return """";
    if (configuration.isSplitIdOnDot()) {
        String[] tokens = id.split(""\\."");
        if (tokens.length == 2) {
            return tokens[0].trim().replaceAll(""[^a-zA-Z_0-9]"", ""_"") + "":"" + type + "":"" + tokens[1].trim().replaceAll(""[^a-zA-Z_0-9\\-]"", ""_"");
        }
    }
    return configuration.getObjectIdPrefix() + "":"" + type + "":"" + id.trim().replaceAll(""[^a-zA-Z_0-9\\-]"", ""_"");
}",java:S1172,
"public byte readByte(String tag) throws IOException{
    in.skipType();
    return in.readByte();
}",java:S1172,
" Object getValue(Object obj, String attributePath, Object metadata) throws Exception{
    return getValue(obj, attributePath);
}",java:S1172,
"public String[] getTableNames(boolean force){
    Schema.Table[] t = getSchema().getTables();
    Set<String> names = new TreeSet<String>();
    for (int i = 0; t != null && i < t.length; i++) {
        names.add(t[i].getName());
    }
    return names.toArray(new String[names.size()]);
}",java:S1172,
"protected R end(RexNode e, R arg){
    return arg;
}",java:S1172,
"public static ScannableTable parks(boolean b){
    return eval(PARK_ROWS);
}",java:S1172,
"public ChouettePTNetworkType.AccessLink produce(AccessLink accessLink, boolean addExtension){
    ChouettePTNetworkType.AccessLink jaxbAccessLink = tridentFactory.createChouettePTNetworkTypeAccessLink();
    populateFromModel(jaxbAccessLink, accessLink);
    jaxbAccessLink.setComment(getNotEmptyString(accessLink.getComment()));
    jaxbAccessLink.setName(accessLink.getName());
    if (accessLink.getLinkOrientation().equals(LinkOrientationEnum.AccessPointToStopArea)) {
        if (accessLink.getAccessPoint() != null)
            jaxbAccessLink.setStartOfLink(accessLink.getAccessPoint().getObjectId());
        if (accessLink.getStopArea() != null)
            jaxbAccessLink.setEndOfLink(accessLink.getStopArea().getObjectId());
    } else if (accessLink.getLinkOrientation().equals(LinkOrientationEnum.StopAreaToAccessPoint)) {
        if (accessLink.getAccessPoint() != null)
            jaxbAccessLink.setEndOfLink(accessLink.getAccessPoint().getObjectId());
        if (accessLink.getStopArea() != null)
            jaxbAccessLink.setStartOfLink(accessLink.getStopArea().getObjectId());
    }
    jaxbAccessLink.setLinkDistance(accessLink.getLinkDistance());
    if (accessLink.getMobilityRestrictedSuitable() != null) {
        jaxbAccessLink.setMobilityRestrictedSuitability(accessLink.getMobilityRestrictedSuitable().booleanValue());
    }
    if (accessLink.getLiftAvailable() != null) {
        jaxbAccessLink.setLiftAvailability(accessLink.getLiftAvailable().booleanValue());
    }
    if (accessLink.getStairsAvailable() != null) {
        jaxbAccessLink.setStairsAvailability(accessLink.getStairsAvailable().booleanValue());
    }
    if (accessLink.getDefaultDuration() != null) {
        jaxbAccessLink.setDefaultDuration(toDuration(accessLink.getDefaultDuration()));
    }
    if (accessLink.getFrequentTravellerDuration() != null) {
        jaxbAccessLink.setFrequentTravellerDuration(toDuration(accessLink.getFrequentTravellerDuration()));
    }
    if (accessLink.getOccasionalTravellerDuration() != null) {
        jaxbAccessLink.setOccasionalTravellerDuration(toDuration(accessLink.getOccasionalTravellerDuration()));
    }
    if (accessLink.getMobilityRestrictedTravellerDuration() != null) {
        jaxbAccessLink.setMobilityRestrictedTravellerDuration(toDuration(accessLink.getMobilityRestrictedTravellerDuration()));
    }
    try {
        ConnectionLinkTypeEnum linkType = accessLink.getLinkType();
        if (linkType != null) {
            jaxbAccessLink.setLinkType(ConnectionLinkTypeType.fromValue(linkType.name()));
        }
    } catch (IllegalArgumentException e) {
    }
    ConnectionLinkExtensionType connectionLinkExtension = tridentFactory.createConnectionLinkExtensionType();
    AccessibilitySuitabilityDetails details = extractAccessibilitySuitabilityDetails(accessLink.getUserNeeds());
    if (details != null) {
        connectionLinkExtension.setAccessibilitySuitabilityDetails(details);
        jaxbAccessLink.setConnectionLinkExtension(connectionLinkExtension);
    }
    return jaxbAccessLink;
}",java:S1172,
"public synchronized NodePK addFolder(NodeDetail nd, String alertType) throws WebSitesException{
    try {
        return getWebSiteService().addFolder(nd, sessionTopic.getNodePK(), getUserDetail());
    } catch (Exception re) {
        throw new WebSitesException(""WebSiteSessionController.addFolder()"", SilverpeasException.ERROR, ""webSites.EX_ADD_FOLDER_FAILED"", re);
    }
}",java:S1172,
"public boolean reconnect(String line){
    if (beeLine.getDatabaseConnection() == null || beeLine.getDatabaseConnection().getUrl() == null) {
        String lastConnectedUrl = beeLine.getOpts().getLastConnectedUrl();
        if (lastConnectedUrl != null) {
            Properties props = new Properties();
            props.setProperty(""url"", lastConnectedUrl);
            try {
                return connect(props);
            } catch (IOException e) {
                return beeLine.error(e);
            }
        } else {
            return beeLine.error(beeLine.loc(""no-current-connection""));
        }
    }
    beeLine.info(beeLine.loc(""reconnecting"", beeLine.getDatabaseConnection().getUrl()));
    try {
        beeLine.getDatabaseConnection().reconnect();
    } catch (Exception e) {
        return beeLine.error(e);
    }
    return true;
}",java:S1172,
"private void handleMethodCall(int code){
    MethodDescriptor method = getMethodDescriptorOperand();
    SignatureParser signature = new SignatureParser(method.getSignature());
    Entry<String, String> calledMethod = new SimpleEntry<>(method.getSlashedClassName(), method.getName());
    if (PROHIBITED_METHODS.contains(calledMethod) && signature.getNumParameters() == 0) {
        bugReporter.reportBug(new BugInstance(this, ""SDK_BAD_METHOD_CALL"", NORMAL_PRIORITY).addClassAndMethod(this).addSourceLine(this, getPC()));
    }
}",java:S1172,
"protected void handlePartitions(String[] args){
    Set<Partition> partitions = hazelcast.getPartitionService().getPartitions();
    Map<Member, Integer> partitionCounts = new HashMap<>();
    for (Partition partition : partitions) {
        Member owner = partition.getOwner();
        if (owner != null) {
            Integer count = partitionCounts.get(owner);
            int newCount = 1;
            if (count != null) {
                newCount = count + 1;
            }
            partitionCounts.put(owner, newCount);
        }
        println(partition);
    }
    Set<Map.Entry<Member, Integer>> entries = partitionCounts.entrySet();
    for (Map.Entry<Member, Integer> entry : entries) {
        println(entry.getKey() + "": "" + entry.getValue());
    }
}",java:S1172,
"private void recoverInternal(String streamIdentifier) throws IOException{
    checkClosedOrInError(""recoverInternal"");
    BKLogWriteHandler ledgerHandler = createWriteHandler(true);
    try {
        Utils.ioResult(ledgerHandler.recoverIncompleteLogSegments());
    } finally {
        Utils.closeQuietly(ledgerHandler);
    }
}",java:S1172,
"public Boolean isPhaseTransition(Values rel, RelMetadataQuery mq){
    return true;
}",java:S1172,
"public static ProtobufMessages.Activation writeActivation(MarshallerWriteContext context, RuleAgendaItem agendaItem){
    ProtobufMessages.Activation.Builder _activation = ProtobufMessages.Activation.newBuilder();
    RuleImpl rule = agendaItem.getRule();
    _activation.setPackageName(rule.getPackage());
    _activation.setRuleName(rule.getName());
    _activation.setSalience(agendaItem.getSalience());
    _activation.setIsActivated(agendaItem.isQueued());
    return _activation.build();
}",java:S1172,
"public HashMap<String, Integer> getCountsFromGraphsonSnapshot(String databaseName, String fileNamePart, String srcDir) throws Exception{
    final JsonParser jsonParser = new JsonParser();
    final Set<String> uris = new HashSet<>();
    final Set<String> uuids = new HashSet<>();
    final Map<Long, String> idToUri = new HashMap<>();
    final Map<Long, String> idToType = new HashMap<>();
    final Map<Long, String> idToUuid = new HashMap<>();
    final Set<Triplet<Long, Long, String>> idIdLabelOfEdges = new HashSet<>();
    final HashMap<String, Integer> tableCountHash = new HashMap<>();
    String sourceDir = DEFAULT_SRC_DIR;
    if (srcDir != null && srcDir.length() > 1) {
        sourceDir = srcDir;
    }
    String graphsonDir = sourceDir + ""/"";
    if (fileNamePart == null || fileNamePart.trim().isEmpty()) {
        String msg = ""ERROR -- fileName is required to be passed in. "";
        LOGGER.error(msg);
        System.out.println(msg);
        throw new Exception(msg);
    }
    final List<File> graphsons = Files.walk(Paths.get(graphsonDir)).filter(Files::isRegularFile).map(Path::toFile).sorted().collect(Collectors.toList());
    int skippedNodeCount = 0;
    int nodeCounter = 0;
    int edgeCounter = 0;
    for (File graphson : graphsons) {
        if (!graphson.getName().contains(fileNamePart)) {
            continue;
        }
        try (BufferedReader reader = new BufferedReader(new FileReader(graphson))) {
            String msg = ""Processing snapshot file "" + graphson.getName();
            LOGGER.debug(msg);
            System.out.println(msg);
            String line;
            while ((line = reader.readLine()) != null) {
                JsonObject vertex = jsonParser.parse(line).getAsJsonObject();
                long id = vertex.get(""id"").getAsLong();
                if ((vertex.get(""properties"") == null) || !vertex.get(""properties"").getAsJsonObject().has(""aai-uri"") || !vertex.get(""properties"").getAsJsonObject().has(""aai-node-type"") || !vertex.get(""properties"").getAsJsonObject().has(""aai-uuid"")) {
                    msg = ""DEBUG  --  Could not find keys for this line: ["" + line + ""] ------"";
                    LOGGER.debug(msg);
                    System.out.println(msg);
                    skippedNodeCount++;
                    continue;
                }
                String uri = vertex.get(""properties"").getAsJsonObject().get(""aai-uri"").getAsJsonArray().get(0).getAsJsonObject().get(""value"").getAsString();
                String nodeType = vertex.get(""properties"").getAsJsonObject().get(""aai-node-type"").getAsJsonArray().get(0).getAsJsonObject().get(""value"").getAsString();
                String nodeTypeKey = nodeType.replaceAll(""-"", ""_"");
                String uuid = vertex.get(""properties"").getAsJsonObject().get(""aai-uuid"").getAsJsonArray().get(0).getAsJsonObject().get(""value"").getAsString();
                try {
                    loader.introspectorFromName(nodeType);
                } catch (Exception e) {
                    msg = ""DEBUG -- loader introspector for nodeType error: ["" + e.getMessage() + ""], ["" + e.getLocalizedMessage() + ""]------"";
                    LOGGER.debug(msg);
                    System.out.println(msg);
                    skippedNodeCount++;
                    continue;
                }
                if (uris.contains(uri)) {
                    msg = ""DEBUG -- SKIP Uri because it has been seen before: ["" + uri + ""] ------"";
                    LOGGER.debug(msg);
                    System.out.println(msg);
                    skippedNodeCount++;
                    continue;
                } else if (uuids.contains(uuid)) {
                    msg = ""DEBUG -- SKIP UUID because it has been seen before: ["" + uuid + ""] ------"";
                    LOGGER.debug(msg);
                    System.out.println(msg);
                    skippedNodeCount++;
                    continue;
                }
                uris.add(uri);
                uuids.add(uuid);
                idToUri.put(id, uri);
                idToType.put(id, nodeType);
                idToUuid.put(id, uuid);
                if (vertex.has(""inE"")) {
                    vertex.get(""inE"").getAsJsonObject().entrySet().forEach(es -> {
                        String label = es.getKey();
                        es.getValue().getAsJsonArray().forEach(e -> {
                            long otherId = e.getAsJsonObject().get(""outV"").getAsLong();
                            idIdLabelOfEdges.add(new Triplet<>(id, otherId, label));
                        });
                    });
                }
                if (!tableCountHash.containsKey(nodeTypeKey)) {
                    int ct = 1;
                    tableCountHash.put(nodeTypeKey, ct);
                } else {
                    int tmpCt = tableCountHash.get(nodeTypeKey);
                    tmpCt++;
                    tableCountHash.remove(nodeTypeKey);
                    tableCountHash.put(nodeTypeKey, tmpCt);
                }
                nodeCounter++;
            }
        } catch (IOException e) {
            String msg = ""DEBUG --  Error while processing nodes ------"";
            LOGGER.debug(msg);
            System.out.println(msg);
        }
    }
    String msg = ""DEBUG -- Found this many Kinds of nodes: "" + tableCountHash.size();
    LOGGER.debug(msg);
    System.out.println(msg);
    msg = ""DEBUG -- Found this many total nodes: "" + nodeCounter;
    LOGGER.debug(msg);
    System.out.println(msg);
    msg = ""  >> Skipped a total of "" + skippedNodeCount + "" Node Records ------"";
    LOGGER.debug(msg);
    System.out.println(msg);
    msg = ""DEBUG -- Begin Processing Edges ------"";
    LOGGER.debug(msg);
    System.out.println(msg);
    int edgeTableCounter = 0;
    int edgeSkipCounter = 0;
    Map<String, String> edgeKeys = this.getEdgeMapKeys();
    for (Triplet<Long, Long, String> edge : idIdLabelOfEdges) {
        if (!idToType.containsKey(edge.getValue0())) {
            LOGGER.info("" Edge Skipped because ID not found: ["" + edge.getValue0() + ""]"");
            System.out.println("" Edge Skipped because ID not found: ["" + edge.getValue0() + ""]"");
            edgeSkipCounter++;
            continue;
        } else if (!idToType.containsKey(edge.getValue1())) {
            System.out.println("" Edge Skipped because ID not found: ["" + edge.getValue1() + ""]"");
            LOGGER.info("" Edge Skipped because ID not found: ["" + edge.getValue1() + ""]"");
            edgeSkipCounter++;
            continue;
        } else {
            String colA = idToType.get(edge.getValue1()).replace(""-"", ""_"");
            String colB = idToType.get(edge.getValue0()).replace(""-"", ""_"");
            String edLabel = edge.getValue2();
            String edKey = colA + ""__"" + colB;
            String tcEdKey = """";
            if (!edgeKeys.containsKey(edKey)) {
                tcEdKey = edgeKeys.get(colB + ""__"" + colA);
            } else {
                tcEdKey = edgeKeys.get(edKey);
            }
            if (!tableCountHash.containsKey(tcEdKey)) {
                int ct = 1;
                tableCountHash.put(tcEdKey, ct);
                edgeTableCounter++;
            } else {
                int tmpCt = tableCountHash.get(tcEdKey);
                tmpCt++;
                tableCountHash.remove(tcEdKey);
                tableCountHash.put(tcEdKey, tmpCt);
            }
            edgeCounter++;
        }
    }
    msg = "" Processed a total of "" + edgeCounter + "" Edge Records ------"";
    LOGGER.debug(msg);
    System.out.println(msg);
    msg = "" Found data for this many edgeTables: "" + edgeTableCounter;
    LOGGER.debug(msg);
    System.out.println(msg);
    msg = ""  >> Skipped a total of "" + edgeSkipCounter + "" Edge Records ------"";
    LOGGER.debug(msg);
    System.out.println(msg);
    return tableCountHash;
}",java:S1172,
"public boolean typeinfo(String line) throws Exception{
    return metadata(""getTypeInfo"", new String[0]);
}",java:S1172,
"public RecordReader getVectorizedRecordReader(Path inputPath) throws Exception{
    Configuration conf = new Configuration();
    conf.set(IOConstants.COLUMNS, getColumnNames(DEFAULT_COLUMN_TYPES));
    conf.set(IOConstants.COLUMNS_TYPES, DEFAULT_COLUMN_TYPES);
    conf.setBoolean(ColumnProjectionUtils.READ_ALL_COLUMNS, false);
    conf.set(ColumnProjectionUtils.READ_COLUMN_IDS_CONF_STR, ""0,1,2,3,6"");
    return VectorizedColumnReaderTestBase.createTestParquetReader(""test schema"", conf);
}",java:S1172,
"protected boolean acceptServiceUri(ServiceURI serviceURI){
    return true;
}",java:S1172,
"public void printRow(Rows rows, Rows.Row header, Rows.Row row){
    String[] head = header.values;
    String[] vals = row.values;
    int headwidth = 0;
    for (int i = 0; i < head.length && i < vals.length; i++) {
        headwidth = Math.max(headwidth, head[i].length());
    }
    headwidth += 2;
    for (int i = 0; i < head.length && i < vals.length; i++) {
        beeLine.output(beeLine.getColorBuffer().bold(beeLine.getColorBuffer().pad(head[i], headwidth).getMono()).append(vals[i] == null ? """" : vals[i]));
    }
    beeLine.output("""");
}",java:S1172,
"private String _get_data_division(S sequence){
    return UNKNOWN_DNA;
}",java:S1172,
"private void processXmlJavaTypeAdapter(final ProcessMethodContext processMethodContext, final XmlAccessType accessType){
    val xmlJavaTypeAdapterIfAny = processMethodContext.synthesizeOnMethod(XmlJavaTypeAdapter.class);
    if (!xmlJavaTypeAdapterIfAny.isPresent()) {
        return;
    }
    val facetHolder = processMethodContext.getFacetHolder();
    addFacet(new XmlJavaTypeAdapterFacetDefault(facetHolder, xmlJavaTypeAdapterIfAny.get().value()));
}",java:S1172,
"private void replaceCommandType(SetCommand setCommand, String mapName, String key, Object value, int ttl){
    boolean replaced = (textCommandService.replace(mapName, key, value) != null);
    if (replaced) {
        setCommand.setResponse(TextCommandConstants.STORED);
    } else {
        setCommand.setResponse(TextCommandConstants.NOT_STORED);
    }
}",java:S1172,
"public void afterTaskCompletion(MigrationRunnable task){
    if (migrateTaskCount.decrementAndGet() < 0) {
        throw new IllegalStateException();
    }
}",java:S1172,
"private void parseForOs(OsInfo parentObj, String parentTag, String qName, Attributes attributes) throws SAXException{
    objects.push(parentObj);
    tags.push(qName);
}",java:S1172,
"public int getFractionalSecondPrecision(RelDataTypeSystem typeSystem){
    if (fractionalSecondPrecision == RelDataType.PRECISION_NOT_SPECIFIED) {
        return typeName().getDefaultScale();
    } else {
        return fractionalSecondPrecision;
    }
}",java:S1172,
"private NavigationServicePort getNavigationService(boolean forceLoading) throws Exception{
    String method = ""getNavigationService"";
    log.debug(method + "". BEGIN"");
    try {
        navigationService = acarisServiceFactory.getAcarisService().getNavigationServicePort();
        log.info(method + "". AcarisNavigationServiceInterface loaded correctly"");
    } catch (Exception e) {
        log.error(method + "". Exception loading interface "" + e);
        throw e;
    }
    return navigationService;
}",java:S1172,
"public Shuttle preVisit(TryStatement tryStatement){
    return this;
}",java:S1172,
"private static void ST_Explode(final Geometry geom){
}",java:S1172,
"private static Multimap<Field, ValueChecker> getAllMap(BibDatabaseContext databaseContext, FilePreferences filePreferences, JournalAbbreviationRepository abbreviationRepository, boolean allowIntegerEdition){
    ArrayListMultimap<Field, ValueChecker> fieldCheckers = ArrayListMultimap.create(50, 10);
    for (Field field : FieldFactory.getPersonNameFields()) {
        fieldCheckers.put(field, new PersonNamesChecker(databaseContext));
    }
    fieldCheckers.put(StandardField.BOOKTITLE, new BooktitleChecker());
    fieldCheckers.put(StandardField.TITLE, new BracketChecker());
    fieldCheckers.put(StandardField.TITLE, new TitleChecker(databaseContext));
    fieldCheckers.put(StandardField.DOI, new DoiValidityChecker());
    fieldCheckers.put(StandardField.EDITION, new EditionChecker(databaseContext, allowIntegerEdition));
    fieldCheckers.put(StandardField.FILE, new FileChecker(databaseContext, filePreferences));
    fieldCheckers.put(StandardField.HOWPUBLISHED, new HowPublishedChecker(databaseContext));
    fieldCheckers.put(StandardField.ISBN, new ISBNChecker());
    fieldCheckers.put(StandardField.ISSN, new ISSNChecker());
    fieldCheckers.put(StandardField.MONTH, new MonthChecker(databaseContext));
    fieldCheckers.put(StandardField.MONTHFILED, new MonthChecker(databaseContext));
    fieldCheckers.put(StandardField.NOTE, new NoteChecker(databaseContext));
    fieldCheckers.put(StandardField.PAGES, new PagesChecker(databaseContext));
    fieldCheckers.put(StandardField.URL, new UrlChecker());
    fieldCheckers.put(StandardField.YEAR, new YearChecker());
    fieldCheckers.put(StandardField.KEY, new ValidCitationKeyChecker());
    fieldCheckers.put(InternalField.KEY_FIELD, new ValidCitationKeyChecker());
    if (databaseContext.isBiblatexMode()) {
        fieldCheckers.put(StandardField.DATE, new DateChecker());
        fieldCheckers.put(StandardField.URLDATE, new DateChecker());
        fieldCheckers.put(StandardField.EVENTDATE, new DateChecker());
        fieldCheckers.put(StandardField.ORIGDATE, new DateChecker());
    }
    return fieldCheckers;
}",java:S1172,
"private void submitTemplateMaintainTask(TDataNodeLocation dataNodeLocation){
}",java:S1172,
"private Set<BookieNode> getBookiesToConsiderAfterExcludingZonesAndUDs(int ensembleSize, int writeQuorumSize, List<BookieId> currentEnsemble, int bookieToReplaceIndex, Set<BookieId> excludeBookies, Set<String> excludeZones){
    Set<BookieNode> bookiesToConsiderAfterExcludingZonesAndUDs = new HashSet<BookieNode>();
    HashMap<String, Set<String>> excludingUDsOfZonesToConsider = new HashMap<String, Set<String>>();
    Set<BookieNode> bookiesToConsiderAfterExcludingZones = getBookiesToConsider(getExcludedZonesString(excludeZones), excludeBookies);
    if (!bookiesToConsiderAfterExcludingZones.isEmpty()) {
        Set<String> zonesToConsider = getZonesOfBookies(bookiesToConsiderAfterExcludingZones);
        for (String zoneToConsider : zonesToConsider) {
            Set<String> upgradeDomainsOfAZoneInNeighboringNodes = getUpgradeDomainsOfAZoneInNeighboringNodes(currentEnsemble, bookieToReplaceIndex, writeQuorumSize, zoneToConsider);
            excludingUDsOfZonesToConsider.put(zoneToConsider, upgradeDomainsOfAZoneInNeighboringNodes);
        }
        updateBookiesToConsiderAfterExcludingZonesAndUDs(bookiesToConsiderAfterExcludingZonesAndUDs, bookiesToConsiderAfterExcludingZones, excludingUDsOfZonesToConsider);
        if (bookiesToConsiderAfterExcludingZonesAndUDs.isEmpty()) {
            excludingUDsOfZonesToConsider.clear();
            for (String zoneToConsider : zonesToConsider) {
                Set<String> udsToExcludeToMaintainMinUDsInWriteQuorums = getUDsToExcludeToMaintainMinUDsInWriteQuorums(currentEnsemble, bookieToReplaceIndex, writeQuorumSize, zoneToConsider);
                excludingUDsOfZonesToConsider.put(zoneToConsider, udsToExcludeToMaintainMinUDsInWriteQuorums);
            }
            updateBookiesToConsiderAfterExcludingZonesAndUDs(bookiesToConsiderAfterExcludingZonesAndUDs, bookiesToConsiderAfterExcludingZones, excludingUDsOfZonesToConsider);
        }
    }
    return bookiesToConsiderAfterExcludingZonesAndUDs;
}",java:S1172,
"public static Builder<T> builder(Class<T> itemClass){
    return new Builder<>();
}",java:S1172,
"protected Panel customResultBody(final String panelId, final T item, final Serializable result){
    return new Panel(panelId) {

        private static final long serialVersionUID = 5538299138211283825L;
    };
}",java:S1172,
"public RelDistribution distribution(Exchange exchange, RelMetadataQuery mq){
    return exchange(exchange.distribution);
}",java:S1172,
"public static ScannableTable eval(boolean b){
    return new ScannableTable() {

        @Override
        public Enumerable<@Nullable Object[]> scan(DataContext root) {
            JavaTypeFactory typeFactory = root.getTypeFactory();
            final RelDataType rowType = getRowType(typeFactory);
            final List<String> fieldNames = ImmutableList.copyOf(rowType.getFieldNames());
            final String[] args;
            final String osName = System.getProperty(""os.name"");
            final String osVersion = System.getProperty(""os.version"");
            Util.discard(osVersion);
            switch(osName) {
                case ""Mac OS X"":
                    args = new String[] { ""/bin/sh"", ""-c"", ""vm_stat | tail -n +2 | awk '{print $NF}' | sed 's/\\.//' | tr '\\n' ' '"" };
                    break;
                default:
                    args = new String[] { ""/bin/sh"", ""-c"", ""vmstat -n | tail -n +3"" };
            }
            return Processes.processLines(args).select(new Function1<String, Object[]>() {

                @Override
                public Object[] apply(String line) {
                    final String[] fields = line.trim().split(""\\s+"");
                    final Object[] values = new Object[fieldNames.size()];
                    for (int i = 0; i < values.length; i++) {
                        try {
                            values[i] = field(fieldNames.get(i), fields[i]);
                        } catch (RuntimeException e) {
                            e.printStackTrace(System.out);
                            throw new RuntimeException(""while parsing value ["" + fields[i] + ""] of field ["" + fieldNames.get(i) + ""] in line ["" + line + ""]"");
                        }
                    }
                    return values;
                }

                private Object field(@SuppressWarnings(""unused"") String field, String value) {
                    if (value.isEmpty()) {
                        return 0;
                    }
                    if (value.endsWith(""."")) {
                        return Long.parseLong(value);
                    }
                    return Long.parseLong(value);
                }
            });
        }

        @Override
        public RelDataType getRowType(RelDataTypeFactory typeFactory) {
            final String osName = System.getProperty(""os.name"");
            final RelDataTypeFactory.Builder builder = typeFactory.builder();
            switch(osName) {
                case ""Mac OS X"":
                    return builder.add(""pages_free"", SqlTypeName.BIGINT).add(""pages_active"", SqlTypeName.BIGINT).add(""pages_inactive"", SqlTypeName.BIGINT).add(""pages_speculative"", SqlTypeName.BIGINT).add(""pages_throttled"", SqlTypeName.BIGINT).add(""pages_wired_down"", SqlTypeName.BIGINT).add(""pages_purgeable"", SqlTypeName.BIGINT).add(""translation_faults"", SqlTypeName.BIGINT).add(""pages_copy_on_write"", SqlTypeName.BIGINT).add(""pages_zero_filed"", SqlTypeName.BIGINT).add(""pages_reactivated"", SqlTypeName.BIGINT).add(""pages_purged"", SqlTypeName.BIGINT).add(""pages_file_backed"", SqlTypeName.BIGINT).add(""pages_anonymous"", SqlTypeName.BIGINT).add(""pages_stored_compressor"", SqlTypeName.BIGINT).add(""pages_occupied_compressor"", SqlTypeName.BIGINT).add(""decompressions"", SqlTypeName.BIGINT).add(""compressions"", SqlTypeName.BIGINT).add(""pageins"", SqlTypeName.BIGINT).add(""pageouts"", SqlTypeName.BIGINT).add(""swapins"", SqlTypeName.BIGINT).add(""swapouts"", SqlTypeName.BIGINT).build();
                default:
                    return builder.add(""proc_r"", SqlTypeName.BIGINT).add(""proc_b"", SqlTypeName.BIGINT).add(""mem_swpd"", SqlTypeName.BIGINT).add(""mem_free"", SqlTypeName.BIGINT).add(""mem_buff"", SqlTypeName.BIGINT).add(""mem_cache"", SqlTypeName.BIGINT).add(""swap_si"", SqlTypeName.BIGINT).add(""swap_so"", SqlTypeName.BIGINT).add(""io_bi"", SqlTypeName.BIGINT).add(""io_bo"", SqlTypeName.BIGINT).add(""system_in"", SqlTypeName.BIGINT).add(""system_cs"", SqlTypeName.BIGINT).add(""cpu_us"", SqlTypeName.BIGINT).add(""cpu_sy"", SqlTypeName.BIGINT).add(""cpu_id"", SqlTypeName.BIGINT).add(""cpu_wa"", SqlTypeName.BIGINT).add(""cpu_st"", SqlTypeName.BIGINT).build();
            }
        }

        @Override
        public Statistic getStatistic() {
            return Statistics.of(1000d, ImmutableList.of(ImmutableBitSet.of(1)));
        }

        @Override
        public Schema.TableType getJdbcTableType() {
            return Schema.TableType.TABLE;
        }

        @Override
        public boolean isRolledUp(String column) {
            return false;
        }

        @Override
        public boolean rolledUpColumnValidInsideAgg(String column, SqlCall call, @Nullable SqlNode parent, @Nullable CalciteConnectionConfig config) {
            return true;
        }
    };
}",java:S1172,
"protected List<AbstractClassTypeDeclarationDescr> sortByHierarchy(Collection<AbstractClassTypeDeclarationDescr> unsortedDescrs, TypeDeclarationContext tdContext, BuildResultCollector results){
    taxonomy = new HashMap<>();
    Map<QualifiedName, AbstractClassTypeDeclarationDescr> cache = new HashMap<>();
    for (AbstractClassTypeDeclarationDescr tdescr : unsortedDescrs) {
        cache.put(tdescr.getType(), tdescr);
    }
    for (AbstractClassTypeDeclarationDescr tdescr : unsortedDescrs) {
        QualifiedName name = tdescr.getType();
        Collection<QualifiedName> supers = taxonomy.get(name);
        if (supers == null) {
            supers = new ArrayList<>();
            taxonomy.put(name, supers);
        } else {
            results.addBuilderResult(new TypeDeclarationError(tdescr, ""Found duplicate declaration for type "" + tdescr.getType()));
        }
        boolean circular = false;
        for (QualifiedName sup : tdescr.getSuperTypes()) {
            if (!Object.class.getName().equals(name.getFullName())) {
                if (!hasCircularDependency(tdescr.getType(), sup, taxonomy)) {
                    if (cache.containsKey(sup)) {
                        supers.add(sup);
                    }
                } else {
                    circular = true;
                    results.addBuilderResult(new TypeDeclarationError(tdescr, ""Found circular dependency for type "" + tdescr.getTypeName()));
                    break;
                }
            }
        }
        if (circular) {
            tdescr.getSuperTypes().clear();
        }
    }
    for (AbstractClassTypeDeclarationDescr tdescr : unsortedDescrs) {
        for (TypeFieldDescr field : tdescr.getFields().values()) {
            QualifiedName name = tdescr.getType();
            QualifiedName typeName = new QualifiedName(field.getPattern().getGenericType().getRawType());
            if (!hasCircularDependency(name, typeName, taxonomy)) {
                if (cache.containsKey(typeName)) {
                    taxonomy.get(name).add(typeName);
                }
            } else {
                field.setRecursive(true);
            }
        }
    }
    List<QualifiedName> sorted = new HierarchySorter<QualifiedName>().sort(taxonomy);
    ArrayList list = new ArrayList(sorted.size());
    for (QualifiedName name : sorted) {
        list.add(cache.get(name));
    }
    return list;
}",java:S1172,
" String[] getColumnNames(DatabaseMetaData meta) throws SQLException{
    Set<String> names = new HashSet<String>();
    info(loc(""building-tables""));
    try {
        ResultSet columns = getColumns(""%"");
        try {
            int total = getSize(columns);
            int index = 0;
            while (columns.next()) {
                progress(index++, total);
                String name = columns.getString(""TABLE_NAME"");
                names.add(name);
                names.add(columns.getString(""COLUMN_NAME""));
                names.add(columns.getString(""TABLE_NAME"") + ""."" + columns.getString(""COLUMN_NAME""));
            }
            progress(index, index);
        } finally {
            columns.close();
        }
        info(loc(""done""));
        return names.toArray(new String[0]);
    } catch (Throwable t) {
        handleException(t);
        return new String[0];
    }
}",java:S1172,
"private void handleAtomicNumberGet(String[] args){
    println(getAtomicNumber().get());
}",java:S1172,
"private String getMethod(String rel, JobService jobService){
    if (rel.equals(Link.PARAMETERS_REL)) {
        return Link.GET_METHOD;
    } else if (rel.equals(Link.ACTION_PARAMETERS_REL)) {
        return Link.GET_METHOD;
    } else if (rel.equals(Link.VALIDATION_PARAMETERS_REL)) {
        return Link.GET_METHOD;
    } else if (rel.equals(Link.DATA_REL)) {
        return Link.GET_METHOD;
    } else if (rel.equals(Link.INPUT_REL)) {
        return Link.GET_METHOD;
    } else if (rel.equals(Link.OUTPUT_REL)) {
        return Link.GET_METHOD;
    } else if (rel.equals(Link.VALIDATION_REL)) {
        return Link.GET_METHOD;
    } else if (rel.equals(Link.REPORT_REL)) {
        return Link.GET_METHOD;
    } else if (rel.equals(Link.CANCEL_REL)) {
        return Link.DELETE_METHOD;
    } else if (rel.equals(Link.DELETE_REL)) {
        return Link.DELETE_METHOD;
    } else if (rel.equals(Link.LOCATION_REL)) {
        return Link.GET_METHOD;
    }
    return null;
}",java:S1172,
"protected Details<UserTO> addOptionalDetailsPanel(final UserWrapper modelObject){
    Details<UserTO> details = new Details<>(EnduserConstants.CONTENT_PANEL, pageRef);
    details.setOutputMarkupId(true);
    return details;
}",java:S1172,
"public void printRow(Rows rows, Rows.Row row){
    String[] vals = row.values;
    StringBuilder buf = new StringBuilder();
    for (int i = 0; i < vals.length; i++) {
        buf.append(buf.length() == 0 ? """" : """" + getSeparator()).append('\'').append(vals[i] == null ? """" : vals[i]).append('\'');
    }
    beeLine.output(buf.toString());
}",java:S1172,
"private void addServiceProject(String ip, String app, Type type){
    String projectName = app;
    TypeDetailInfo all = m_serviceProjectsInfo.get(ALL_CLIENT);
    if (all == null) {
        all = new TypeDetailInfo(m_reportDuration, ALL_CLIENT);
        m_serviceProjectsInfo.put(ALL_CLIENT, all);
    }
    TypeDetailInfo info = m_serviceProjectsInfo.get(projectName);
    if (info == null) {
        info = new TypeDetailInfo(m_reportDuration, projectName);
        m_serviceProjectsInfo.put(projectName, info);
    }
    info.mergeType(type);
    all.mergeType(type);
}",java:S1172,
"public static StaticAttributeTag attributeTagFor(DynamoDbVersionAttribute annotation){
    return VersionedRecordExtension.AttributeTags.versionAttribute();
}",java:S1172,
"protected void failFastIfNoChanges(Driver driver, DownloadsFolder folder, FileFilter filter, long start, long timeout, long incrementTimeout) throws FileNotFoundException{
    long lastFileUpdate = folder.lastModificationTime().orElse(-1L);
    long now = currentTimeMillis();
    long filesHasNotBeenUpdatedForMs = filesHasNotBeenUpdatedForMs(start, now, lastFileUpdate);
    if (filesHasNotBeenUpdatedForMs > incrementTimeout) {
        String message = String.format(""Failed to download file%s in %d ms: files in %s haven't been modified for %s ms. "" + ""(started at: %s, lastFileUpdate: %s, now: %s, incrementTimeout: %s)"" + ""%nModification times: %s"", filter.description(), timeout, folder, filesHasNotBeenUpdatedForMs, start, lastFileUpdate, now, incrementTimeout, folder.modificationTimes());
        throw new FileNotFoundException(message);
    }
}",java:S1172,
"private static void printPartitionMap(HashMap<Class<? extends BaseNode>, List<BaseNode>> nodeMap, PrintStream out, List<Vertex<BaseNode, BaseNode>> vertexes){
    Map<Integer, List<BaseNode>> byPartition = nodeMap.entrySet().stream().flatMap(kv -> kv.getValue().stream()).collect(groupingBy(n -> n.getPartitionId() == null ? 0 : n.getPartitionId().getId()));
    for (Entry<Integer, List<BaseNode>> kv : byPartition.entrySet()) {
        printClusterMapCluster(""P"" + kv.getKey(), new HashSet<>(kv.getValue()), out);
    }
}",java:S1172,
"public Shuttle preVisit(ConditionalStatement conditionalStatement){
    return this;
}",java:S1172,
"public static String getMethodBytecode(Class cls, String ruleClassName, String packageName, String methodName, String resource){
    try (InputStream is = cls.getClassLoader().getResourceAsStream(resource)) {
        byte[] data = readBytesFromInputStream(is);
        MethodComparator.Tracer visit = new MethodComparator.Tracer(methodName);
        new org.mvel2.asm.ClassReader(data).accept(visit, org.mvel2.asm.ClassReader.SKIP_DEBUG);
        return visit.getText();
    } catch (java.io.IOException e) {
        throw new RuntimeException(""Unable getResourceAsStream for Class '"" + ruleClassName + ""' "");
    }
}",java:S1172,
"public void handleEntryEvent(Data keyData, Data valueData, Data oldValueData, Data mergingValue, int eventTypeId, UUID uuid, int numberOfAffectedEntries){
    Member member = getContext().getClusterService().getMember(uuid);
    EntryEventType eventType = EntryEventType.getByType(eventTypeId);
    EntryEvent<K, V> entryEvent = new DataAwareEntryEvent<>(member, eventTypeId, name, keyData, valueData, oldValueData, null, getSerializationService());
    switch(eventType) {
        case ADDED:
            listener.entryAdded(entryEvent);
            break;
        case REMOVED:
            listener.entryRemoved(entryEvent);
            break;
        case UPDATED:
            listener.entryUpdated(entryEvent);
            break;
        case EVICTED:
            listener.entryEvicted(entryEvent);
            break;
        case CLEAR_ALL:
            MapEvent mapEvent = new MapEvent(getName(), member, eventTypeId, numberOfAffectedEntries);
            listener.mapCleared(mapEvent);
            break;
        default:
            throw new IllegalArgumentException(""Not a known event type: "" + eventType);
    }
}",java:S1172,
"protected RemoteCallHook<K, V> createPutAllNearCachingHook(int keySetSize){
    return RemoteCallHook.EMPTY_HOOK;
}",java:S1172,
"public static Optional<AMSField> fromName(T type, String name){
    return Arrays.stream(AMSField.values()).filter(field -> field.getName().equalsIgnoreCase(name)).findAny();
}",java:S1172,
"protected void loadAllInternal(Set<? extends K> keys, List<Data> dataKeys, boolean replaceExistingValues, CompletionListener completionListener){
    ClientMessage request = CacheLoadAllCodec.encodeRequest(nameWithPrefix, dataKeys, replaceExistingValues);
    try {
        submitLoadAllTask(request, completionListener, dataKeys);
    } catch (Exception e) {
        if (completionListener != null) {
            completionListener.onException(e);
        }
        throw new CacheException(e);
    }
}",java:S1172,
"protected Element getParentForEnvelopedCase(Document doc, Message inMessage) throws Exception{
    if (getConfiguration().getParentXpath() != null) {
        XPathFilterParameterSpec xp = getConfiguration().getParentXpath();
        XPathExpression exp;
        try {
            exp = XmlSignatureHelper.getXPathExpression(xp);
        } catch (XPathExpressionException e) {
            throw new XmlSignatureException(""The parent XPath "" + getConfiguration().getParentXpath().getXPath() + "" is wrongly configured: The XPath "" + xp.getXPath() + "" is invalid."", e);
        }
        NodeList list = (NodeList) exp.evaluate(doc.getDocumentElement(), XPathConstants.NODESET);
        if (list == null || list.getLength() == 0) {
            throw new XmlSignatureException(""The parent XPath "" + xp.getXPath() + "" returned no result. Check the configuration of the XML signer component."");
        }
        int length = list.getLength();
        for (int i = 0; i < length; i++) {
            Node node = list.item(i);
            if (node.getNodeType() == Node.ELEMENT_NODE) {
                return (Element) node;
            }
        }
        throw new XmlSignatureException(""The parent XPath "" + xp.getXPath() + "" returned no element. Check the configuration of the XML signer component."");
    } else {
        NodeList parents = doc.getElementsByTagNameNS(getConfiguration().getParentNamespace(), getConfiguration().getParentLocalName());
        if (parents == null || parents.getLength() == 0) {
            throw new XmlSignatureFormatException(String.format(""Incoming message has wrong format: The parent element with the local name %s and the namespace %s was not found in the message to build an enveloped XML signature."", getConfiguration().getParentLocalName(), getConfiguration().getParentNamespace()));
        }
        return (Element) parents.item(0);
    }
}",java:S1172,
"private String action(NucleusUserException cause){
    return ""Did the Enhancer run correctly?"";
}",java:S1172,
"private String getSerializationType(Configuration conf, Properties tbl, ColumnMapping colMap) throws Exception{
    String serType = null;
    if (colMap.qualifierName == null) {
        if (colMap.qualifierPrefix != null) {
            serType = tbl.getProperty(colMap.familyName + ""."" + colMap.qualifierPrefix + ""."" + HBaseSerDe.SERIALIZATION_TYPE);
        } else {
            serType = tbl.getProperty(colMap.familyName + ""."" + HBaseSerDe.SERIALIZATION_TYPE);
        }
    } else if (!colMap.hbaseRowKey) {
        String qualifierName = colMap.qualifierName;
        if (colMap.qualifierName.endsWith(""*"")) {
            qualifierName = colMap.qualifierName.substring(0, colMap.qualifierName.length() - 1);
        }
        serType = tbl.getProperty(colMap.familyName + ""."" + qualifierName + ""."" + HBaseSerDe.SERIALIZATION_TYPE);
    }
    return serType;
}",java:S1172,
"public static int getScale(int gadgetId){
    return 0;
}",java:S1172,
"public boolean supportsDataType(RelDataType type){
    return true;
}",java:S1172,
"private EventReport queryHourlyReportsByDuration(String name, String domain, Date start, Date endDate) throws DalException{
    long startTime = start.getTime();
    long endTime = endDate.getTime();
    double duration = (endTime - startTime) * 1.0 / TimeHelper.ONE_DAY;
    HistoryEventReportMerger merger = new HistoryEventReportMerger(new EventReport(domain)).setDuration(duration);
    EventReportHourlyGraphCreator graphCreator = new EventReportHourlyGraphCreator(merger.getEventReport(), 10);
    for (; startTime < endTime; startTime = startTime + TimeHelper.ONE_HOUR) {
        EventReport report = m_reportService.queryReport(domain, new Date(startTime), new Date(startTime + TimeHelper.ONE_HOUR));
        graphCreator.createGraph(report);
        report.accept(merger);
    }
    EventReport dailyReport = merger.getEventReport();
    Date date = dailyReport.getStartTime();
    Date end = new Date(TaskHelper.tomorrowZero(date).getTime() - 1000);
    dailyReport.setStartTime(TaskHelper.todayZero(date));
    dailyReport.setEndTime(end);
    new EventReportCountFilter(m_serverConfigManager.getMaxTypeThreshold(), m_atomicMessageConfigManager.getMaxNameThreshold(domain), m_serverConfigManager.getTypeNameLengthLimit()).visitEventReport(dailyReport);
    return dailyReport;
}",java:S1172,
"public Shuttle preVisit(MethodCallExpression methodCallExpression){
    return this;
}",java:S1172,
"public void collectParentEvidence(JunctionTreeClique clique, JunctionTreeSeparator sep, JunctionTreeClique child, JunctionTreeClique startClique){
    if (clique.getParentSeparator() != null) {
        collectParentEvidence(clique.getParentSeparator().getParent(), clique.getParentSeparator(), clique, startClique);
    }
    List<JunctionTreeSeparator> seps = clique.getChildren();
    for (JunctionTreeSeparator childSep : seps) {
        if (childSep.getChild() == child) {
            continue;
        }
        collectChildEvidence(childSep.getChild(), startClique);
    }
    passMessage(clique, child.getParentSeparator(), child);
}",java:S1172,
"public boolean removeAssociation(Rule rule, RuleRemovalContext context){
    return this.associations.remove(rule);
}",java:S1172,
"public static Last[][] setScoreVector(int x, int xb, int yb, int ye, int gop, int gep, int[] subs, boolean storing, int[][][] scores, int[] xyMax, int score){
    Last[][] pointers;
    ensureScoringMatrixColumn(x, storing, scores);
    if (x == xb) {
        pointers = new Last[ye + 1][scores[0][0].length];
    } else {
        pointers = new Last[ye + 1][];
        pointers[0] = new Last[scores[0][0].length];
        for (int y = 1; y < scores[0].length; y++) {
            pointers[y] = setScorePoint(x, y, gop, gep, subs[y], scores);
            for (int z = 0; z < scores[0][0].length; z++) {
                if (scores[x][y][z] <= 0) {
                    scores[x][y][z] = 0;
                    pointers[y][z] = null;
                }
            }
            if (scores[x][y][0] > score) {
                xyMax[0] = x;
                xyMax[1] = y;
                score = scores[x][y][0];
            }
        }
    }
    return pointers;
}",java:S1172,
"public boolean isValid(Logger log){
    return true;
}",java:S1172,
"private String _get_date(S sequence){
    Date sysdate = Calendar.getInstance().getTime();
    String default_date = new SimpleDateFormat(""dd-MMM-yyyy"").format(sysdate);
    return default_date;
}",java:S1172,
"public BayesInstance getBayesInstance(String pkgName, String name){
    return null;
}",java:S1172,
"public static RelDistribution values(RelDataType rowType, ImmutableList<ImmutableList<RexLiteral>> tuples){
    return RelDistributions.BROADCAST_DISTRIBUTED;
}",java:S1172,
"public static GotoStatement continue_(LabelTarget labelTarget){
    return new GotoStatement(GotoExpressionKind.Continue, null, null);
}",java:S1172,
"private void handleOnDragDetected(TableRow<FieldViewModel> row, FieldViewModel fieldViewModel, MouseEvent event){
    row.startFullDrag();
    FieldViewModel field = fields.getSelectionModel().getSelectedItem();
    ClipboardContent content = new ClipboardContent();
    Dragboard dragboard = fields.startDragAndDrop(TransferMode.MOVE);
    content.put(DragAndDropDataFormats.FIELD, """");
    localDragboard.putValue(FieldViewModel.class, field);
    dragboard.setContent(content);
    event.consume();
}",java:S1172,
"private void handleAtomicNumberInc(String[] args){
    println(getAtomicNumber().incrementAndGet());
}",java:S1172,
"protected boolean keepAlive(long lastUpdated){
    return true;
}",java:S1172,
"protected Object get(String fieldName, HCatSchema recordSchema, Class clazz) throws HCatException{
    return get(fieldName, recordSchema);
}",java:S1172,
"public static AbstractUndoableEdit getUndoableEdit(GroupTreeNodeViewModel node, List<FieldChange> changes){
    boolean hasEntryChanges = false;
    NamedCompound entryChangeCompound = new NamedCompound(Localization.lang(""change entries of group""));
    for (FieldChange fieldChange : changes) {
        hasEntryChanges = true;
        entryChangeCompound.addEdit(new UndoableFieldChange(fieldChange));
    }
    if (hasEntryChanges) {
        entryChangeCompound.end();
        return entryChangeCompound;
    }
    return null;
}",java:S1172,
"public PigRelBuilder group(GroupOption option, Partitioner partitioner, int parallel, Iterable<? extends GroupKey> groupKeys){
    final List<GroupKey> groupKeyList = ImmutableList.copyOf(groupKeys);
    validateGroupList(groupKeyList);
    final int groupCount = groupKeyList.get(0).groupKeyCount();
    final int n = groupKeyList.size();
    for (Ord<GroupKey> groupKey : Ord.reverse(groupKeyList)) {
        RelNode r = null;
        if (groupKey.i < n - 1) {
            r = build();
        }
        final RexNode row = cluster.getRexBuilder().makeCall(peek(1, 0).getRowType(), SqlStdOperatorTable.ROW, fields());
        aggregate(groupKey.e, aggregateCall(SqlStdOperatorTable.COLLECT, row).as(getAlias()));
        if (groupKey.i < n - 1) {
            push(requireNonNull(r, ""r""));
            List<RexNode> predicates = new ArrayList<>();
            for (int key : Util.range(groupCount)) {
                predicates.add(equals(field(2, 0, key), field(2, 1, key)));
            }
            join(JoinRelType.INNER, and(predicates));
        }
    }
    return this;
}",java:S1172,
"public boolean batch(String line){
    if (!(beeLine.assertConnection())) {
        return false;
    }
    if (beeLine.getBatch() == null) {
        beeLine.setBatch(new LinkedList<String>());
        beeLine.info(beeLine.loc(""batch-start""));
        return true;
    } else {
        beeLine.info(beeLine.loc(""running-batch""));
        try {
            beeLine.runBatch(beeLine.getBatch());
            return true;
        } catch (Exception e) {
            return beeLine.error(e);
        } finally {
            beeLine.setBatch(null);
        }
    }
}",java:S1172,
"private void printReplacedSql(String content, String formatSql, String rgex, Map<Integer, Property> sqlParamsMap){
    log.info(""after replace sql , preparing : {}"", formatSql);
    StringBuilder logPrint = new StringBuilder(""replaced sql , parameters:"");
    if (sqlParamsMap == null) {
        log.info(""printReplacedSql: sqlParamsMap is null."");
    } else {
        for (int i = 1; i <= sqlParamsMap.size(); i++) {
            logPrint.append(sqlParamsMap.get(i).getValue()).append(""("").append(sqlParamsMap.get(i).getType()).append("")"");
        }
    }
    log.info(""Sql Params are {}"", logPrint);
}",java:S1172,
"public void writeDouble(double d, String tag) throws IOException{
    out.writeDouble(d);
}",java:S1172,
"public RelOptPredicateList getPredicates(RelNode rel, RelMetadataQuery mq){
    return RelOptPredicateList.EMPTY;
}",java:S1172,
"public synchronized boolean payItems(Iterable<ItemParamData> costItems, int quantity, ActionReason reason){
    for (ItemParamData cost : costItems) if (getVirtualItemCount(cost.getId()) < (cost.getCount() * quantity))
        return false;
    costItems.forEach(cost -> this.payVirtualItem(cost.getId(), cost.getCount() * quantity));
    return true;
}",java:S1172,
"protected boolean statusCondition(final T modelObject){
    return true;
}",java:S1172,
"protected Expression computeNewRank(Expression acc, WinAggAddContext add){
    Expression pos = add.currentPosition();
    if (!add.startIndex().equals(Expressions.constant(0))) {
        pos = Expressions.subtract(pos, add.startIndex());
    }
    return pos;
}",java:S1172,
"public boolean supportsFunction(SqlOperator operator, RelDataType type, List<RelDataType> paramTypes){
    switch(operator.kind) {
        case AND:
        case BETWEEN:
        case CASE:
        case CAST:
        case CEIL:
        case COALESCE:
        case DIVIDE:
        case EQUALS:
        case FLOOR:
        case GREATER_THAN:
        case GREATER_THAN_OR_EQUAL:
        case IN:
        case IS_NULL:
        case IS_NOT_NULL:
        case LESS_THAN:
        case LESS_THAN_OR_EQUAL:
        case MINUS:
        case MOD:
        case NOT:
        case NOT_IN:
        case NOT_EQUALS:
        case NVL:
        case OR:
        case PLUS:
        case ROW:
        case TIMES:
            return true;
        default:
            return BUILT_IN_OPERATORS_LIST.contains(operator);
    }
}",java:S1172,
"private void updateLocked(Consumer<T> update, T oldValue, T newValue){
    if (!updating) {
        try {
            updating = true;
            update.accept(newValue);
        } finally {
            updating = false;
        }
    }
}",java:S1172,
"public void distributeParentEvidence(JunctionTreeClique clique, JunctionTreeSeparator sep, JunctionTreeClique child, JunctionTreeClique startClique){
    passMessage(child, child.getParentSeparator(), clique);
    if (clique.getParentSeparator() != null) {
        distributeParentEvidence(clique.getParentSeparator().getParent(), clique.getParentSeparator(), clique, startClique);
    }
    List<JunctionTreeSeparator> seps = clique.getChildren();
    for (JunctionTreeSeparator childSep : seps) {
        if (childSep.getChild() == child) {
            continue;
        }
        distributeChildEvidence(childSep.getChild(), startClique);
    }
}",java:S1172,
"public static GotoStatement break_(LabelTarget labelTarget, Expression expression){
    return new GotoStatement(GotoExpressionKind.Break, null, expression);
}",java:S1172,
"private static long warmUp(byte[] data, int ledgers, int ensemble, int qSize, byte[] passwd, int warmupMessages, ClientConfiguration conf) throws KeeperException, IOException, InterruptedException, BKException{
    final CountDownLatch connectLatch = new CountDownLatch(1);
    final int bookies;
    String bookieRegistrationPath = ZKMetadataDriverBase.resolveZkLedgersRootPath(conf) + ""/"" + AVAILABLE_NODE;
    ZooKeeper zk = null;
    try {
        final String servers = ZKMetadataDriverBase.resolveZkServers(conf);
        zk = new ZooKeeper(servers, 15000, new Watcher() {

            @Override
            public void process(WatchedEvent event) {
                if (event.getState() == KeeperState.SyncConnected) {
                    connectLatch.countDown();
                }
            }
        });
        if (!connectLatch.await(10, TimeUnit.SECONDS)) {
            LOG.error(""Couldn't connect to zookeeper at "" + servers);
            throw new IOException(""Couldn't connect to zookeeper "" + servers);
        }
        bookies = zk.getChildren(bookieRegistrationPath, false).size() - 1;
    } finally {
        if (zk != null) {
            zk.close();
        }
    }
    BenchThroughputLatency warmup = new BenchThroughputLatency(bookies, bookies, bookies, passwd, ledgers, warmupMessages, conf);
    warmup.setEntryData(data);
    Thread thread = new Thread(warmup);
    thread.start();
    thread.join();
    warmup.close();
    return warmup.getThroughput();
}",java:S1172,
"protected void handleQCapacity(String[] args){
    println(getQueue().remainingCapacity());
}",java:S1172,
"public int getSilverObjectId(String objectId){
    return Integer.parseInt(getCurrentCardContentId());
}",java:S1172,
"private void preParseReferentialDependencies(Context context, Referential referential, List<ServiceFrame> serviceFrames, List<TimetableFrame> timetableFrames, boolean isCommonDelivery) throws Exception{
    org.rutebanken.netex.model.Line_VersionStructure line = null;
    for (ServiceFrame serviceFrame : serviceFrames) {
        if (serviceFrame.getRoutePoints() != null) {
            context.put(NETEX_LINE_DATA_CONTEXT, serviceFrame.getRoutePoints());
            Parser routePointParser = ParserFactory.create(RoutePointParser.class.getName());
            routePointParser.parse(context);
        }
        if (serviceFrame.getStopAssignments() != null) {
            context.put(NETEX_LINE_DATA_CONTEXT, serviceFrame.getStopAssignments());
            Parser stopAssignmentParser = ParserFactory.create(StopAssignmentParser.class.getName());
            stopAssignmentParser.parse(context);
        }
        if (!isCommonDelivery) {
            if (line == null) {
                line = (org.rutebanken.netex.model.Line_VersionStructure) serviceFrame.getLines().getLine_().get(0).getValue();
                context.put(PARSING_CONTEXT_LINE_ID, line.getId());
            }
            TariffZonesInFrame_RelStructure tariffZonesStruct = serviceFrame.getTariffZones();
            if (tariffZonesStruct != null) {
                context.put(NETEX_LINE_DATA_CONTEXT, tariffZonesStruct);
                StopPlaceParser stopPlaceParser = (StopPlaceParser) ParserFactory.create(StopPlaceParser.class.getName());
                stopPlaceParser.parse(context);
            }
        }
    }
    if (!isCommonDelivery) {
    }
}",java:S1172,
"public Double getDistinctRowCount(Values rel, RelMetadataQuery mq, ImmutableBitSet groupKey, @Nullable RexNode predicate){
    if (predicate == null || predicate.isAlwaysTrue()) {
        if (groupKey.isEmpty()) {
            return 1D;
        }
    }
    final Set<List<Comparable>> set = new HashSet<>();
    final List<Comparable> values = new ArrayList<>(groupKey.cardinality());
    for (ImmutableList<RexLiteral> tuple : rel.tuples) {
        for (int column : groupKey) {
            final RexLiteral literal = tuple.get(column);
            Comparable value = literal.getValueAs(Comparable.class);
            values.add(value == null ? NullSentinel.INSTANCE : value);
        }
        set.add(ImmutableList.copyOf(values));
        values.clear();
    }
    double nRows = set.size();
    if ((predicate == null) || predicate.isAlwaysTrue()) {
        return nRows;
    } else {
        double selectivity = RelMdUtil.guessSelectivity(predicate);
        return RelMdUtil.numDistinctVals(nRows, nRows * selectivity);
    }
}",java:S1172,
"private void check3RouteRb3(Context context, int rank, Route route, int rank2, Route route2){
    if (isEmpty(route.getRoutePoints()))
        return;
    prepareCheckPoint(context, ROUTE_RB_3);
    List<StopArea> areas = getStopAreaOfRouteFromRoutePoints(route);
    if (isEmpty(route.getRoutePoints()))
        return;
    List<StopArea> areas2 = getStopAreaOfRouteFromRoutePoints(route2);
    if (!areas2.isEmpty()) {
        if (areas.equals(areas2)) {
            DataLocation location = buildLocation(context, route);
            DataLocation target = buildLocation(context, route2);
            Map<String, Object> map = new HashMap<>();
            map.put(""RouteId"", route.getObjectId());
            ValidationReporter reporter = ValidationReporter.Factory.getInstance();
            reporter.addCheckPointReportError(context, ROUTE_RB_3, location, null, null, target);
        }
    }
}",java:S1172,
"private InsertAction processInsert(RuleContext context, MethodCallExpr consequenceExpr, MethodCallExpr statement, BlockStmt ruleVariablesBlock){
    Class<?> actionClass = getActionClass(context, consequenceExpr, statement);
    InsertAction action = new InsertAction(actionClass);
    Expression insertedArgument = statement.getArgument(0);
    String insertedId = insertedArgument.toString();
    List<MethodCallExpr> insertedExprs = consequenceExpr.findAll(MethodCallExpr.class).stream().filter(m -> m.getScope().map(s -> s.toString().equals(insertedId) || s.toString().equals(""("" + insertedId + "")"")).orElse(false)).collect(Collectors.toList());
    for (MethodCallExpr expr : insertedExprs) {
        String methodName = expr.getNameAsString();
        String property = ClassUtils.setter2property(methodName);
        if (property != null) {
            Object value = getLiteralValue(context, expr.getArgument(0));
            action.addInsertedProperty(new InsertedProperty(property, value));
        }
    }
    if (isLiteral(actionClass) && insertedArgument.isLiteralExpr()) {
        action.addInsertedProperty(new InsertedProperty(""this"", literalToValue(insertedArgument.asLiteralExpr())));
    }
    return action;
}",java:S1172,
"public static Builder<T> builder(Class<? extends T> itemClass){
    return new Builder<>();
}",java:S1172,
"public void registerTaskAllocated(String[] requestedHosts, String[] requestedRacks, String allocatedHost){
    if (requestedHosts != null && requestedHosts.length != 0) {
        Set<String> requestedHostSet = new HashSet<>(Arrays.asList(requestedHosts));
        if (requestedHostSet.contains(allocatedHost)) {
            numLocalAllocations++;
            _registerAllocationInHostMap(allocatedHost, localityBasedNumAllocationsPerHost);
        } else {
            numNonLocalAllocations++;
        }
    } else {
        numAllocationsNoLocalityRequest++;
    }
    numTotalAllocations++;
    _registerAllocationInHostMap(allocatedHost, numAllocationsPerHost);
}",java:S1172,
"public static ContextMenu create(BibEntryTableViewModel entry, KeyBindingRepository keyBindingRepository, LibraryTab libraryTab, DialogService dialogService, StateManager stateManager, PreferencesService preferencesService, UndoManager undoManager, ClipBoardManager clipBoardManager, TaskExecutor taskExecutor, BibEntryTypesManager entryTypesManager){
    ActionFactory factory = new ActionFactory(keyBindingRepository);
    ContextMenu contextMenu = new ContextMenu();
    contextMenu.getItems().addAll(factory.createMenuItem(StandardActions.COPY, new EditAction(StandardActions.COPY, libraryTab.frame(), stateManager)), createCopySubMenu(factory, dialogService, stateManager, preferencesService, clipBoardManager, taskExecutor), factory.createMenuItem(StandardActions.PASTE, new EditAction(StandardActions.PASTE, libraryTab.frame(), stateManager)), factory.createMenuItem(StandardActions.CUT, new EditAction(StandardActions.CUT, libraryTab.frame(), stateManager)), factory.createMenuItem(StandardActions.MERGE_ENTRIES, new MergeEntriesAction(dialogService, stateManager, preferencesService.getBibEntryPreferences())), factory.createMenuItem(StandardActions.DELETE_ENTRY, new EditAction(StandardActions.DELETE_ENTRY, libraryTab.frame(), stateManager)), new SeparatorMenuItem(), factory.createMenuItem(StandardActions.SEND_AS_EMAIL, new SendAsEMailAction(dialogService, preferencesService, stateManager)), new SeparatorMenuItem(), SpecialFieldMenuItemFactory.createSpecialFieldMenu(SpecialField.RANKING, factory, libraryTab.frame(), dialogService, preferencesService, undoManager, stateManager), SpecialFieldMenuItemFactory.getSpecialFieldSingleItem(SpecialField.RELEVANCE, factory, libraryTab.frame(), dialogService, preferencesService, undoManager, stateManager), SpecialFieldMenuItemFactory.getSpecialFieldSingleItem(SpecialField.QUALITY, factory, libraryTab.frame(), dialogService, preferencesService, undoManager, stateManager), SpecialFieldMenuItemFactory.getSpecialFieldSingleItem(SpecialField.PRINTED, factory, libraryTab.frame(), dialogService, preferencesService, undoManager, stateManager), SpecialFieldMenuItemFactory.createSpecialFieldMenu(SpecialField.PRIORITY, factory, libraryTab.frame(), dialogService, preferencesService, undoManager, stateManager), SpecialFieldMenuItemFactory.createSpecialFieldMenu(SpecialField.READ_STATUS, factory, libraryTab.frame(), dialogService, preferencesService, undoManager, stateManager), new SeparatorMenuItem(), factory.createMenuItem(StandardActions.ATTACH_FILE, new AttachFileAction(libraryTab, dialogService, stateManager, preferencesService.getFilePreferences())), factory.createMenuItem(StandardActions.ATTACH_FILE_FROM_URL, new AttachFileFromURLAction(dialogService, stateManager, taskExecutor, preferencesService)), factory.createMenuItem(StandardActions.OPEN_FOLDER, new OpenFolderAction(dialogService, stateManager, preferencesService)), factory.createMenuItem(StandardActions.OPEN_EXTERNAL_FILE, new OpenExternalFileAction(dialogService, stateManager, preferencesService)), factory.createMenuItem(StandardActions.OPEN_URL, new OpenUrlAction(dialogService, stateManager, preferencesService)), factory.createMenuItem(StandardActions.SEARCH_SHORTSCIENCE, new SearchShortScienceAction(dialogService, stateManager, preferencesService)), new SeparatorMenuItem(), new ChangeEntryTypeMenu(libraryTab.getSelectedEntries(), libraryTab.getBibDatabaseContext(), libraryTab.getUndoManager(), keyBindingRepository, entryTypesManager).asSubMenu(), factory.createMenuItem(StandardActions.MERGE_WITH_FETCHED_ENTRY, new MergeWithFetchedEntryAction(libraryTab, dialogService, stateManager, taskExecutor, preferencesService)));
    return contextMenu;
}",java:S1172,
"private Optional<Expression> fromConstructorExpr(String expression, ObjectCreationExpr parsedExpression){
    MethodCallExpr fromCall = createDslTopLevelMethod(FROM_CALL);
    List<String> bindingIds = new ArrayList<>();
    for (Expression argument : parsedExpression.getArguments()) {
        final String argumentName = PrintUtil.printNode(argument);
        if (context.hasDeclaration(argumentName)) {
            bindingIds.add(argumentName);
            fromCall.addArgument(context.getVarExpr(argumentName));
        }
    }
    Expression newExpr = generateLambdaWithoutParameters(bindingIds, parsedExpression, true, Optional.empty(), context);
    if (newExpr instanceof LambdaExpr) {
        context.getPackageModel().registerLambdaReturnType((LambdaExpr) newExpr, DrlxParseUtil.getClassFromType(context.getTypeResolver(), parsedExpression.getType()));
    }
    fromCall.addArgument(newExpr);
    return of(fromCall);
}",java:S1172,
"protected void convert(Context context, GtfsStopTime gtfsStopTime, GtfsTrip gtfsTrip, VehicleJourneyAtStop vehicleJourneyAtStop){
    Referential referential = (Referential) context.get(REFERENTIAL);
    GtfsImportParameters configuration = (GtfsImportParameters) context.get(CONFIGURATION);
    String vjasObjectId = AbstractConverter.composeObjectId(configuration, ObjectIdTypes.VEHICLE_JOURNEY_AT_STOP_KEY, UUID.randomUUID().toString(), log);
    vehicleJourneyAtStop.setObjectId(vjasObjectId);
    String objectId = gtfsStopTime.getStopId();
    StopPoint stopPoint = ObjectFactory.getStopPoint(referential, objectId);
    vehicleJourneyAtStop.setStopPoint(stopPoint);
    vehicleJourneyAtStop.setArrivalTime(gtfsStopTime.getArrivalTime().getTime());
    vehicleJourneyAtStop.setDepartureTime(gtfsStopTime.getDepartureTime().getTime());
    vehicleJourneyAtStop.setArrivalDayOffset(gtfsStopTime.getArrivalTime().getDay());
    vehicleJourneyAtStop.setDepartureDayOffset(gtfsStopTime.getDepartureTime().getDay());
    if (gtfsStopTime.getStopHeadsign() != null) {
        DestinationDisplay destinationDisplay = ObjectFactory.getDestinationDisplay(referential, gtfsStopTime.getTripId() + ""-"" + gtfsStopTime.getStopSequence() + ""-"" + gtfsStopTime.getStopId());
        destinationDisplay.setFrontText(gtfsStopTime.getStopHeadsign());
        stopPoint.setDestinationDisplay(destinationDisplay);
    }
}",java:S1172,
"public static void main(String[] args){
    String passwordToHash = ""admin"";
    String generatedPassword = null;
    try {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(passwordToHash.getBytes());
        byte[] bytes = md.digest();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < bytes.length; i++) {
            sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
        }
        generatedPassword = sb.toString();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    }
    System.out.println(generatedPassword);
}",java:S1172,
"public void spawnMonstersByConfigId(SceneGroup group, int configId, int delayTime){
    var entity = scene.getEntityByConfigId(configId);
    if (entity != null && entity.getGroupId() == group.id) {
        Grasscutter.getLogger().debug(""entity already exists failed in group {} with config {}"", group.id, configId);
        return;
    }
    entity = createMonster(group.id, group.block_id, group.monsters.get(configId));
    if (entity != null) {
        getScene().addEntity(entity);
    } else {
        Grasscutter.getLogger().warn(""failed to create entity with group {} and config {}"", group.id, configId);
    }
}",java:S1172,
"public void lookupIdentifier(BibEntry bibEntry){
    LOGGER.warn(""Unable to lookup identifier for '{}'"", field.getDisplayName());
}",java:S1172,
"public void addAssociation(BuildContext context, Rule rule){
    addAssociation(rule);
}",java:S1172,
" void setPartitioningStrategy(PartitioningStrategy partitioningStrategy){
}",java:S1172,
" ContentProvider serialize(final Object body, final Class<?>... additionalTypes) throws SalesforceException{
    return new InputStreamContentProvider(toJson(body));
}",java:S1172,
"private Body parseBodyText(MotivationTypes motivation, String bodyText) throws JsonParseException{
    Body body = BodyObjectFactory.getInstance().createObjectInstance(BodyInternalTypes.TAG);
    body.setValue(bodyText);
    body.setContentType(WebAnnotationModelKeywords.MIME_TYPE_TEXT_PLAIN);
    return body;
}",java:S1172,
"private UtilizationReport queryHourlyReportsByDuration(String name, String domain, Date start, Date end){
    long startTime = start.getTime();
    long endTime = end.getTime();
    UtilizationReportMerger merger = new UtilizationReportMerger(new UtilizationReport(domain));
    for (; startTime < endTime; startTime = startTime + TimeHelper.ONE_HOUR) {
        Date date = new Date(startTime);
        UtilizationReport reportModel = m_reportService.queryReport(domain, date, new Date(date.getTime() + TimeHelper.ONE_HOUR));
        reportModel.accept(merger);
    }
    UtilizationReport utilizationReport = merger.getUtilizationReport();
    utilizationReport.setStartTime(start);
    utilizationReport.setEndTime(end);
    return utilizationReport;
}",java:S1172,
"private void verifyRegisteredWithRightExecutor(ChannelHandlerContext ctx){
    if (!executor.inEventLoop()) {
        throw new IllegalArgumentException(""Channel handler MUST be registered with the same EventExecutor that it is "" + ""created with."");
    }
}",java:S1172,
" Object getValue(Object obj, String attributePath) throws Exception{
    return getValue(obj);
}",java:S1172,
"protected URI getDefaultFaultAction(Object endpoint, MessageAddressingProperties requestMap){
    URI requestAction = requestMap.getAction();
    if (requestAction != null) {
        return URI.create(requestAction.toString() + getFaultActionSuffix());
    } else {
        return null;
    }
}",java:S1172,
"protected void handleInstances(String[] args){
    Collection<DistributedObject> distributedObjects = client.getDistributedObjects();
    for (DistributedObject distributedObject : distributedObjects) {
        println(distributedObject);
    }
}",java:S1172,
"private HeartbeatReport getReport(String domain, String ipAddress, long date, ModelPeriod period){
    ModelRequest request = new ModelRequest(domain, date).setProperty(""ip"", ipAddress);
    if (m_service.isEligable(request)) {
        ModelResponse<HeartbeatReport> response = m_service.invoke(request);
        HeartbeatReport report = response.getModel();
        return report;
    } else {
        throw new RuntimeException(""Internal error: no eligable ip service registered for "" + request + ""!"");
    }
}",java:S1172,
"public Shuttle preVisit(ClassDeclaration classDeclaration){
    return this;
}",java:S1172,
"protected boolean isRollbackSupported(final TState state){
    return false;
}",java:S1172,
"protected void handleQPeek(String[] args){
    println(getQueue().peek());
}",java:S1172,
"protected boolean waitInitialized(Env env){
    return false;
}",java:S1172,
"public Shuttle preVisit(TernaryExpression ternaryExpression){
    return this;
}",java:S1172,
"public boolean rollback(String line) throws SQLException{
    if (!(beeLine.assertConnection())) {
        return false;
    }
    if (!(beeLine.assertAutoCommit())) {
        return false;
    }
    try {
        long start = System.currentTimeMillis();
        beeLine.getDatabaseConnection().getConnection().rollback();
        long end = System.currentTimeMillis();
        beeLine.showWarnings();
        beeLine.info(beeLine.loc(""rollback-complete"") + "" "" + beeLine.locElapsedTime(end - start));
        return true;
    } catch (Exception e) {
        return beeLine.error(e);
    }
}",java:S1172,
"public static RexNode swapTableColumnReferences(final RexBuilder rexBuilder, final RexNode node, @Nullable final Map<RelTableRef, RelTableRef> tableMapping, @Nullable final Map<RexTableInputRef, Set<RexTableInputRef>> ec){
    RexShuttle visitor = new RexShuttle() {

        @Override
        public RexNode visitTableInputRef(RexTableInputRef inputRef) {
            if (tableMapping != null) {
                RexTableInputRef inputRefFinal = inputRef;
                inputRef = RexTableInputRef.of(requireNonNull(tableMapping.get(inputRef.getTableRef()), () -> ""tableMapping.get(...) for "" + inputRefFinal.getTableRef()), inputRef.getIndex(), inputRef.getType());
            }
            if (ec != null) {
                Set<RexTableInputRef> s = ec.get(inputRef);
                if (s != null) {
                    inputRef = s.iterator().next();
                }
            }
            return inputRef;
        }
    };
    return visitor.apply(node);
}",java:S1172,
"public Shuttle preVisit(ConstructorDeclaration constructorDeclaration){
    return this;
}",java:S1172,
"protected CompletableFuture<T> callGetAndReplaceAsync(K key, Data keyData, V newValue, Data newValueData, Data expiryPolicyData, boolean withCompletionEvent, BiConsumer<T, Throwable> statsCallback){
    return doGetAndReplaceOnServer(keyData, newValueData, expiryPolicyData, withCompletionEvent, statsCallback);
}",java:S1172,
"public static ScannableTable states(boolean b){
    return eval(STATE_ROWS);
}",java:S1172,
"protected void removeAllKeysInternal(Set<? extends K> keys, Collection<Data> dataKeys, long startNanos){
    int partitionCount = getContext().getPartitionService().getPartitionCount();
    int completionId = nextCompletionId();
    listenerCompleter.registerCompletionLatch(completionId, partitionCount);
    ClientMessage request = CacheRemoveAllKeysCodec.encodeRequest(nameWithPrefix, dataKeys, completionId);
    try {
        invoke(request);
        listenerCompleter.waitCompletionLatch(completionId, null);
        if (statisticsEnabled) {
            statsHandler.onBatchRemove(startNanos, dataKeys.size());
        }
    } catch (Throwable t) {
        listenerCompleter.deregisterCompletionLatch(completionId);
        throw rethrowAllowedTypeFirst(t, CacheException.class);
    }
}",java:S1172,
" Object getOptionsFromCoder(final Coder coder, final InputStream in) throws IOException{
    return null;
}",java:S1172,
"public static MetaTableSchema<T> create(Class<T> itemClass){
    return new MetaTableSchema<>();
}",java:S1172,
"public Shuttle preVisit(NewArrayExpression newArrayExpression){
    return this;
}",java:S1172,
"private void check3Route5(Context context, int rank, Route route, int rankWb, Route routeWb){
    if (route.getOppositeRoute() != null)
        return;
    List<StopArea> areas = NeptuneUtil.getStopAreaOfRoute(route);
    if (areas.isEmpty())
        return;
    StopArea firstBoarding = areas.get(0);
    StopArea lastBoarding = areas.get(areas.size() - 1);
    if (firstBoarding == null || lastBoarding == null)
        return;
    StopArea first = firstBoarding.getParent();
    StopArea last = lastBoarding.getParent();
    if (first == null || last == null)
        return;
    prepareCheckPoint(context, ROUTE_5);
    if (routeWb.getOppositeRoute() != null)
        return;
    List<StopArea> areasWb = NeptuneUtil.getStopAreaOfRoute(routeWb);
    if (!areasWb.isEmpty()) {
        StopArea firstWbChild = areasWb.get(0);
        StopArea lastWbChild = areasWb.get(areasWb.size() - 1);
        if (firstWbChild == null || lastWbChild == null)
            return;
        StopArea firstWb = firstWbChild.getParent();
        StopArea lastWb = lastWbChild.getParent();
        if (firstWb == null || lastWb == null)
            return;
        if (firstWb.equals(last) && lastWb.equals(first)) {
            DataLocation location = buildLocation(context, route);
            DataLocation target = buildLocation(context, routeWb);
            ValidationReporter reporter = ValidationReporter.Factory.getInstance();
            reporter.addCheckPointReportError(context, ROUTE_5, location, null, null, target);
        }
    }
}",java:S1172,
"protected V callPutSync(K key, Data keyData, V value, Data valueData, Data expiryPolicyData, boolean isGet) throws InterruptedException, ExecutionException{
    ClientInvocationFuture invocationFuture = putInternal(keyData, valueData, expiryPolicyData, isGet, true);
    ClientDelegatingFuture<V> delegatingFuture = newDelegatingFuture(invocationFuture, CachePutCodec::decodeResponse);
    return delegatingFuture.get();
}",java:S1172,
"public static Builder<T> builder(Class<? extends T> itemClass){
    return new BuilderImpl<>();
}",java:S1172,
"private void rollbackFromDropOnConfigNodes(ConfigNodeProcedureEnv env){
    LOGGER.info(""DropPipePluginProcedure: rollbackFromDropOnConfigNodes({})"", pluginName);
}",java:S1172,
"protected ResourceInfo updateResourceInfo(int task_id, ResourceInfo res){
    ResourceInfo resourceInfo = null;
    if (res != null) {
        String resourceFullName = res.getResourceName();
        if (StringUtils.isBlank(resourceFullName)) {
            log.error(""invalid resource full name, {}"", resourceFullName);
            return new ResourceInfo();
        }
        resourceInfo = new ResourceInfo();
        resourceInfo.setId(-1);
        resourceInfo.setResourceName(resourceFullName);
        log.info(""updated resource info {}"", JSONUtils.toJsonString(resourceInfo));
    }
    return resourceInfo;
}",java:S1172,
"private static long warmUp(byte[] data, int ledgers, int ensemble, int qSize, byte[] passwd, ClientConfiguration conf) throws KeeperException, IOException, InterruptedException, BKException{
    final CountDownLatch connectLatch = new CountDownLatch(1);
    final int bookies;
    String bookieRegistrationPath = ZKMetadataDriverBase.resolveZkLedgersRootPath(conf) + ""/"" + AVAILABLE_NODE;
    ZooKeeper zk = null;
    try {
        final String servers = ZKMetadataDriverBase.resolveZkServers(conf);
        zk = new ZooKeeper(servers, 15000, new Watcher() {

            @Override
            public void process(WatchedEvent event) {
                if (event.getState() == KeeperState.SyncConnected) {
                    connectLatch.countDown();
                }
            }
        });
        if (!connectLatch.await(10, TimeUnit.SECONDS)) {
            LOG.error(""Couldn't connect to zookeeper at "" + servers);
            throw new IOException(""Couldn't connect to zookeeper "" + servers);
        }
        bookies = zk.getChildren(bookieRegistrationPath, false).size() - 1;
    } finally {
        if (zk != null) {
            zk.close();
        }
    }
    BenchThroughputLatency warmup = new BenchThroughputLatency(bookies, bookies, bookies, passwd, ledgers, 10000, conf);
    warmup.setEntryData(data);
    Thread thread = new Thread(warmup);
    thread.start();
    thread.join();
    warmup.close();
    return warmup.getThroughput();
}",java:S1172,
"public Builder withMinimumSurprise(double v){
    predicate = spaceColumnPair -> {
        @SuppressWarnings(""unused"")
        final Space space = spaceColumnPair.left;
        return false;
    };
    return this;
}",java:S1172,
"private void check3StopArea3(Context context, int rank, StopArea stopArea, int rank2, StopArea stopArea2){
    if (!stopArea2.getAreaType().equals(stopArea.getAreaType()))
        return;
    if (!Objects.equals(stopArea.getName(), stopArea2.getName())) {
        return;
    }
    if (stopArea.getStreetName() != null && !stopArea.getStreetName().equals(stopArea2.getStreetName())) {
        return;
    }
    if (stopArea.getCountryCode() != null && !stopArea.getCountryCode().equals(stopArea2.getCountryCode())) {
        return;
    }
    Collection<String> lines = getLines(context, stopArea);
    Collection<String> lines2 = getLines(context, stopArea2);
    if (lines.containsAll(lines2) && lines2.containsAll(lines)) {
        DataLocation source = buildLocation(context, stopArea);
        DataLocation target = buildLocation(context, stopArea2);
        ValidationReporter reporter = ValidationReporter.Factory.getInstance();
        reporter.addCheckPointReportError(context, STOP_AREA_3, source, null, null, target);
    }
}",java:S1172,
"public void fetchBibliographyInformation(BibEntry bibEntry){
    LOGGER.warn(""Unable to fetch bibliography information using the '{}' identifier"", field.getDisplayName());
}",java:S1172,
"private Object argValueFor(final int i){
    return NullNode.getInstance();
}",java:S1172,
"public void writeLong(long l, String tag) throws IOException{
    out.writeLong(l);
}",java:S1172,
"public void process(File blastXMLFile, File gffFile, File gffOutputFile, double maxEScore, double percentageAligned, boolean includeFrameShift, boolean includeNegativeStrand) throws Exception{
    BlastXMLQuery blastXMLQuery = new BlastXMLQuery(blastXMLFile.getAbsolutePath());
    LinkedHashMap<String, ArrayList<String>> hits = blastXMLQuery.getHitsQueryDef(maxEScore);
    FeatureList listGenes = GeneMarkGTFReader.read(gffFile.getAbsolutePath());
    FeatureList hitGenes = new FeatureList();
    for (String id : hits.keySet()) {
        String[] values = id.split("" "");
        String gene_id = values[0];
        FeatureList gene = listGenes.selectByAttribute(""gene_id"", gene_id);
        for (FeatureI geneFeature : gene) {
            if (!includeNegativeStrand && geneFeature.location().isNegative()) {
                continue;
            }
            if (!includeFrameShift) {
                boolean frameShift = false;
                FeatureList cdsList = gene.selectByType(""CDS"");
                for (FeatureI cdsFeature : cdsList) {
                    int frame = ((Feature) cdsFeature).frame();
                    if (frame != 0) {
                        frameShift = true;
                        break;
                    }
                }
                if (frameShift)
                    continue;
            }
            hitGenes.add(geneFeature);
        }
    }
}",java:S1172,
"protected boolean callRemoveSync(K key, Data keyData, Data oldValueData, boolean withCompletionEvent){
    InternalCompletableFuture<Boolean> delegatingFuture = doRemoveOnServer(keyData, oldValueData, withCompletionEvent);
    try {
        return delegatingFuture.get();
    } catch (Throwable t) {
        throw rethrow(t);
    }
}",java:S1172,
"public boolean argumentMustBeScalar(int ordinal){
    return true;
}",java:S1172,
"public boolean verbose(String line){
    beeLine.info(""verbose: on"");
    return set(""set verbose true"");
}",java:S1172,
"protected Operator addOperatorArgument(RuleContext context, MethodCallExpr methodCallExpr, String opName){
    Operator operator = Operator.Register.getOperator(opName);
    try {
        operator.getClass().getField(""INSTANCE"");
        methodCallExpr.addArgument(operator.getClass().getCanonicalName() + "".INSTANCE"");
    } catch (NoSuchFieldException e) {
        methodCallExpr.addArgument(toStringLiteral(opName));
    }
    return operator;
}",java:S1172,
"private void validateAnnotations(final List<? extends ObjectAssociation> list, final Class<?> cls) throws IllegalArgumentException{
    if (fieldsAnnotatedWith(cls, PivotRow.class).size() == 0) {
        throw new IllegalArgumentException(""No annotation for row found"");
    }
    if (fieldsAnnotatedWith(cls, PivotRow.class).size() > 1) {
        throw new IllegalArgumentException(""Only one annotation for row allowed"");
    }
    if (fieldsAnnotatedWith(cls, PivotColumn.class).size() == 0) {
        throw new IllegalArgumentException(""No annotation for column found"");
    }
    if (fieldsAnnotatedWith(cls, PivotValue.class).size() == 0) {
        throw new IllegalArgumentException(""No annotation for value found"");
    }
}",java:S1172,
"public static ObjectBulkLoader createDefault(final MetaModelContext mmc){
    return request -> ChainOfResponsibility.named(""ObjectBulkLoader"", handlers).handle(request);
}",java:S1172,
"public void setValue(final java.lang.String value){
}",java:S1172,
"private void createProviderCross(URL url, Transaction transaction){
    String consumerAppName = RpcContext.getContext().getAttachment(Constants.APPLICATION_KEY);
    if (StringUtils.isEmpty(consumerAppName)) {
        consumerAppName = RpcContext.getContext().getRemoteHost() + "":"" + RpcContext.getContext().getRemotePort();
    }
    Event crossAppEvent = Cat.newEvent(CatConstants.PROVIDER_CALL_APP, consumerAppName);
    Event crossServerEvent = Cat.newEvent(CatConstants.PROVIDER_CALL_SERVER, RpcContext.getContext().getRemoteHost());
    crossAppEvent.setStatus(Event.SUCCESS);
    crossServerEvent.setStatus(Event.SUCCESS);
    completeEvent(crossAppEvent);
    completeEvent(crossServerEvent);
    transaction.addChild(crossAppEvent);
    transaction.addChild(crossServerEvent);
}",java:S1172,
"public static StaticAttributeTag attributeTagFor(DynamoDbPartitionKey annotation){
    return StaticAttributeTags.primaryPartitionKey();
}",java:S1172,
"public synchronized boolean addSatiation(Avatar avatar, float satiationIncrease, int itemId){
    Map<Integer, Long> propMap = new HashMap<>();
    int satiation = Math.round(satiationIncrease * 100);
    float totalSatiation = ((satiationIncrease * 100) + avatar.getSatiation());
    updateTime();
    var playerTime = (player.getClientTime() / 1000);
    float finishTime = playerTime + (totalSatiation / 30);
    long penaltyTime = playerTime;
    long penaltyValue = avatar.getSatiationPenalty();
    if (totalSatiation + avatar.getSatiation() > 10000 && penaltyValue == 0) {
        penaltyTime += 30;
        penaltyValue = 3000;
    }
    if (!addSatiationDirectly(avatar, satiation))
        return false;
    propMap.put(PlayerProperty.PROP_SATIATION_VAL.getId(), Long.valueOf(satiation));
    propMap.put(PlayerProperty.PROP_SATIATION_PENALTY_TIME.getId(), penaltyValue);
    player.getSession().send(new PacketAvatarPropNotify(avatar, propMap));
    player.getSession().send(new PacketAvatarSatiationDataNotify(avatar, finishTime, penaltyTime));
    return true;
}",java:S1172,
"protected Query getQueryForCustomConds(final SearchCond cond, final AnyTypeKind kind){
    return null;
}",java:S1172,
"private boolean isPermitted(String userName, Identifier identifier, String qualifier){
    RealmSecurityManager securityManager = getSecurityManager();
    if (securityManager == null) {
        return true;
    }
    final Subject subject = SecurityUtils.getSubject();
    final String permission = asPermissionsString(identifier) + "":"" + qualifier;
    try {
        return subject.isPermitted(permission);
    } finally {
        CausewayPermission.resetVetoedPermissions();
    }
}",java:S1172,
"public boolean isServerVersionAccepted(int major, int minor){
    switch(this) {
        case VERSION_1:
            return major == 1;
        case VERSION_2_ALLOW_1:
            return major == 1 || major == 2;
        case VERSION_2:
            return major == 2;
        default:
            return false;
    }
}",java:S1172,
"public static ScannableTable eval(boolean b){
    return new ScannableTable() {

        @Override
        public Enumerable<@Nullable Object[]> scan(DataContext root) {
            return Linq4j.asEnumerable(ROWS);
        }

        @Override
        public RelDataType getRowType(RelDataTypeFactory typeFactory) {
            return typeFactory.builder().add(""country"", SqlTypeName.VARCHAR).add(""latitude"", SqlTypeName.DECIMAL).nullable(true).add(""longitude"", SqlTypeName.DECIMAL).nullable(true).add(""name"", SqlTypeName.VARCHAR).build();
        }

        @Override
        public Statistic getStatistic() {
            return Statistics.of(246D, ImmutableList.of(ImmutableBitSet.of(0), ImmutableBitSet.of(3)));
        }

        @Override
        public Schema.TableType getJdbcTableType() {
            return Schema.TableType.TABLE;
        }

        @Override
        public boolean isRolledUp(String column) {
            return false;
        }

        @Override
        public boolean rolledUpColumnValidInsideAgg(String column, SqlCall call, @Nullable SqlNode parent, @Nullable CalciteConnectionConfig config) {
            return false;
        }
    };
}",java:S1172,
"public Shuttle preVisit(WhileStatement whileStatement){
    return this;
}",java:S1172,
"public PTLinkType produce(PTLink ptLink, boolean addExtension){
    PTLinkType jaxbPTLink = tridentFactory.createPTLinkType();
    populateFromModel(jaxbPTLink, ptLink);
    jaxbPTLink.setName(ptLink.getName());
    jaxbPTLink.setStartOfLink(getNonEmptyObjectId(ptLink.getStartOfLink()));
    jaxbPTLink.setEndOfLink(getNonEmptyObjectId(ptLink.getEndOfLink()));
    jaxbPTLink.setLinkDistance(ptLink.getLinkDistance());
    return jaxbPTLink;
}",java:S1172,
"private void createProviderCross(URL url, Transaction transaction){
    String consumerAppName = RpcContext.getContext().getAttachment(CommonConstants.APPLICATION_KEY);
    if (StringUtils.isEmpty(consumerAppName)) {
        consumerAppName = RpcContext.getContext().getRemoteHost() + "":"" + RpcContext.getContext().getRemotePort();
    }
    Event crossAppEvent = Cat.newEvent(CatConstants.PROVIDER_CALL_APP, consumerAppName);
    Event crossServerEvent = Cat.newEvent(CatConstants.PROVIDER_CALL_SERVER, RpcContext.getContext().getRemoteHost());
    crossAppEvent.setStatus(Event.SUCCESS);
    crossServerEvent.setStatus(Event.SUCCESS);
    completeEvent(crossAppEvent);
    completeEvent(crossServerEvent);
    transaction.addChild(crossAppEvent);
    transaction.addChild(crossServerEvent);
}",java:S1172,
"public boolean validRexOperands(int count, Litmus litmus){
    return true;
}",java:S1172,
"public List<? extends Schema<?>> readClass(OpenAPI oasDocument, Class<?> clazz){
    if (clazz.equals(java.io.File.class)) {
        return null;
    } else {
        return readClassOpenApi3(clazz);
    }
}",java:S1172,
"public boolean isOnSameNodeGroup(Node node1, Node node2){
    return false;
}",java:S1172,
"public Double getMinRowCount(RelSubset rel, RelMetadataQuery mq){
    Util.discard(Bug.CALCITE_1048_FIXED);
    for (RelNode node : rel.getRels()) {
        if (node instanceof Sort) {
            Sort sort = (Sort) node;
            if (sort.fetch instanceof RexLiteral) {
                return (double) RexLiteral.intValue(sort.fetch);
            }
        }
    }
    return 0D;
}",java:S1172,
"public static void createValidationFiles(URL url, File localDestination, URL hashURL, Hash hash){
    try {
        URLConnection resourceConnection = url.openConnection();
        createValidationFiles(resourceConnection, localDestination, hashURL, FileDownloadUtils.Hash.UNKNOWN);
    } catch (IOException e) {
        logger.warn(""could not open connection to resource file due to exception: {}"", e.getMessage());
    }
}",java:S1172,
"private void addCallerProject(String ip, String app, Type type){
    String projectName = app;
    TypeDetailInfo all = m_callerProjectsInfo.get(ALL_CLIENT);
    if (all == null) {
        all = new TypeDetailInfo(m_reportDuration, ALL_CLIENT);
        m_callerProjectsInfo.put(ALL_CLIENT, all);
    }
    TypeDetailInfo info = m_callerProjectsInfo.get(projectName);
    if (info == null) {
        info = new TypeDetailInfo(m_reportDuration, projectName);
        m_callerProjectsInfo.put(projectName, info);
    }
    info.mergeType(type);
    all.mergeType(type);
}",java:S1172,
"protected void waitWhileFilesAreBeingModified(Driver driver, DownloadsFolder folder, long timeout, long pollingInterval){
    Map<String, Long> times = folder.modificationTimes();
    long lastModifiedAt = currentTimeMillis();
    for (long start = currentTimeMillis(); currentTimeMillis() - start < timeout; pause(pollingInterval)) {
        var newTimes = folder.modificationTimes();
        if (!newTimes.equals(times)) {
            log.debug(""Files has been modified - old: {}, new: {}"", times, newTimes);
            lastModifiedAt = currentTimeMillis();
            times = newTimes;
        } else {
            log.debug(""Files has not been modified in last {} ms: {}"", pollingInterval, times);
            if (currentTimeMillis() - lastModifiedAt > 1000) {
                log.debug(""Files has not been modified during last {} ms."", currentTimeMillis() - lastModifiedAt);
                return;
            }
        }
    }
    log.warn(""Files are still being modified during last {} ms."", currentTimeMillis() - lastModifiedAt);
}",java:S1172,
"private boolean handleStaleSequenceException(StaleSequenceException staleSequenceException){
    long headSeq = ringbuffer.headSequence();
    logFine(logger, ""Message listener '%s' ran into a stale sequence. Jumping from oldSequence %d to "" + ""sequence %d."", id, sequence, headSeq);
    adjustSequence(headSeq);
    return true;
}",java:S1172,
"private void initializeHierarchyUnencrypted(DeterministicKey baseKey){
    externalParentKey = hierarchy.deriveChild(getAccountPath(), false, false, ChildNumber.ZERO);
    internalParentKey = hierarchy.deriveChild(getAccountPath(), false, false, ChildNumber.ONE);
    addToBasicChain(externalParentKey);
    addToBasicChain(internalParentKey);
}",java:S1172,
"public static synchronized TemplateRegistry getRuleTemplateRegistry(ClassLoader cl){
    if (!RULE_REGISTRY.contains(""rules"")) {
        InputStream javaRuleMvelStream = JavaRuleBuilderHelper.class.getResourceAsStream(JAVA_RULE_MVEL);
        RULE_REGISTRY.addNamedTemplate(""rules"", TemplateCompiler.compileTemplate(javaRuleMvelStream));
        try {
            javaRuleMvelStream.close();
        } catch (IOException ex) {
            logger.debug(""Failed to close stream!"", ex);
        }
        TemplateRuntime.execute(RULE_REGISTRY.getNamedTemplate(""rules""), null, RULE_REGISTRY);
    }
    return RULE_REGISTRY;
}",java:S1172,
"private void parseForBind(Bind parentObj, String parentTag, String qName, Attributes attributes) throws SAXException{
    objects.push(parentObj);
    tags.push(qName);
}",java:S1172,
"private static void writeCodespacesElement(XMLStreamWriter writer, ExportableData exportableData, ExportableNetexData exportableNetexData, NetexFragmentMode fragmentMode, Marshaller marshaller){
    try {
        writer.writeStartElement(CODESPACES);
        for (Codespace cs : exportableNetexData.getSharedCodespaces().values()) {
            writeCodespaceElement(writer, cs);
        }
        writer.writeEndElement();
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}",java:S1172,
"protected void crawlPreparation(Path studyRepositoryRoot) throws IOException, GitAPIException{
    frame.closeCurrentTab();
}",java:S1172,
"private static void updateLeft(TupleSets<LeftTuple> srcLeftTuples, TupleSets<LeftTuple> trgLeftTuples, TupleSets<LeftTuple> stagedLeftTuples, TupleMemory ltm){
    for (LeftTuple leftTuple = srcLeftTuples.getUpdateFirst(); leftTuple != null; ) {
        LeftTuple next = leftTuple.getStagedNext();
        LeftTuple childLeftTuple = leftTuple.getFirstChild();
        if (!leftTuple.isExpired() && childLeftTuple != null && childLeftTuple.getStagedType() == Tuple.NONE) {
            childLeftTuple.setPropagationContext(leftTuple.getPropagationContext());
            updateChildLeftTuple(childLeftTuple, stagedLeftTuples, trgLeftTuples);
        }
        leftTuple.clearStaged();
        leftTuple = next;
    }
}",java:S1172,
" void onTransactionCompleting(final TransactionBeforeCompletionEvent event){
    try {
        doPublish();
    } finally {
        postPublishing();
    }
}",java:S1172,
"public DataStream<T> getDataStream(String name, Class<T> clazz){
    return (DataStream<T>) dataSources.get(name).getDataSource();
}",java:S1172,
"private String getSymmetryAxis(int i, int j, String pointGroup, int n, Vector3d referenceAxis, double radius, float diameter, String color, Point3d center, Vector3d axis){
    boolean drawPolygon = true;
    Point3d p1 = new Point3d(axis);
    p1.scaleAdd(-AXIS_SCALE_FACTOR * radius, center);
    Point3d p2 = new Point3d(axis);
    p2.scaleAdd(AXIS_SCALE_FACTOR * radius, center);
    StringBuilder s = new StringBuilder();
    s.append(""draw"");
    s.append("" axesSymmetry"");
    s.append(name);
    s.append(i);
    s.append("" cylinder"");
    s.append(getJmolPoint(p1));
    s.append(getJmolPoint(p2));
    s.append(""diameter "");
    s.append(diameter);
    s.append("" color "");
    s.append(color);
    s.append("" off;"");
    p1 = new Point3d(axis);
    p1.scaleAdd(-1.01 * radius, center);
    p2 = new Point3d(axis);
    p2.scaleAdd(1.01 * radius, center);
    if (drawPolygon) {
        double polygonRadius = getMeanExtension() * 0.06;
        if (n == 2) {
            referenceAxis = getAligmentVector(p1, axis);
            s.append(getC2PolygonJmol(i, p1, referenceAxis, axis, color, polygonRadius, name));
            referenceAxis = getAligmentVector(p2, axis);
            s.append(getC2PolygonJmol(j, p2, referenceAxis, axis, color, polygonRadius, name));
        } else if (n > 2) {
            referenceAxis = getAligmentVector(p1, axis);
            s.append(getPolygonJmol(i, p1, referenceAxis, axis, n, color, polygonRadius, name));
            referenceAxis = getAligmentVector(p2, axis);
            s.append(getPolygonJmol(j, p2, referenceAxis, axis, n, color, polygonRadius, name));
        }
    }
    return s.toString();
}",java:S1172,
"public org.rutebanken.netex.model.DatedServiceJourney produce(Context context, DatedServiceJourney datedServiceJourney, Line line){
    ExportableData exportableData = (ExportableData) context.get(Constant.EXPORTABLE_DATA);
    ExportableNetexData exportableNetexData = (ExportableNetexData) context.get(Constant.EXPORTABLE_NETEX_DATA);
    org.rutebanken.netex.model.DatedServiceJourney netexDatedServiceJourney = netexFactory.createDatedServiceJourney();
    NetexProducerUtils.populateId(datedServiceJourney, netexDatedServiceJourney);
    LocalDate operatingDay = datedServiceJourney.getOperatingDay();
    NetexprofileExportParameters configuration = (NetexprofileExportParameters) context.get(Constant.CONFIGURATION);
    String operatingDayId = NetexProducerUtils.netexId(configuration.getDefaultCodespacePrefix(), ""OperatingDay"", operatingDay.toString());
    OperatingDayRefStructure operatingDayRefStructure = netexFactory.createOperatingDayRefStructure();
    operatingDayRefStructure.withRef(operatingDayId);
    netexDatedServiceJourney.setOperatingDayRef(operatingDayRefStructure);
    if (!exportableNetexData.getSharedOperatingDays().containsKey(operatingDayId)) {
        OperatingDay netexOperatingDay = netexFactory.createOperatingDay();
        netexOperatingDay.setVersion(""1"");
        netexOperatingDay.setId(operatingDayId);
        netexOperatingDay.setCalendarDate(operatingDay.atStartOfDay());
        exportableNetexData.getSharedOperatingDays().put(netexOperatingDay.getId(), netexOperatingDay);
    }
    ServiceJourneyRefStructure serviceJourneyRefStructure = netexFactory.createServiceJourneyRefStructure();
    serviceJourneyRefStructure.setRef(datedServiceJourney.getVehicleJourney().getObjectId());
    NetexProducerUtils.populateReference(datedServiceJourney.getVehicleJourney(), serviceJourneyRefStructure, true);
    JAXBElement<ServiceJourneyRefStructure> serviceJourneyRef = netexFactory.createServiceJourneyRef(serviceJourneyRefStructure);
    serviceJourneyRef.setValue(serviceJourneyRefStructure);
    netexDatedServiceJourney.getJourneyRef().add(serviceJourneyRef);
    if (!datedServiceJourney.getOriginalDatedServiceJourneys().isEmpty()) {
        for (DatedServiceJourney originalDatedServiceJourney : datedServiceJourney.getOriginalDatedServiceJourneys()) {
            DatedServiceJourneyRefStructure originalDatedServiceJourneyRefStructure = netexFactory.createDatedServiceJourneyRefStructure();
            NetexProducerUtils.populateReference(originalDatedServiceJourney, originalDatedServiceJourneyRefStructure, true);
            JAXBElement<DatedServiceJourneyRefStructure> originalDatedServiceJourneyRefStructureJAXBElement = netexFactory.createDatedServiceJourneyRef(originalDatedServiceJourneyRefStructure);
            netexDatedServiceJourney.getJourneyRef().add(originalDatedServiceJourneyRefStructureJAXBElement);
        }
    }
    if (datedServiceJourney.getServiceAlteration() != null) {
        netexDatedServiceJourney.setServiceAlteration(ConversionUtil.toServiceAlterationEnumeration(datedServiceJourney.getServiceAlteration()));
    }
    return netexDatedServiceJourney;
}",java:S1172,
"protected SqlFunction getCeilSqlFunction(TimeUnitRange flag){
    return SqlStdOperatorTable.CEIL;
}",java:S1172,
"private void createLongLedgerIdPathAndGenerateLongLedgerId(final GenericCallback<Long> cb, String createPath){
    ZkUtils.asyncCreateFullPathOptimistic(zk, ledgerIdGenPath, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, new StringCallback() {

        @Override
        public void processResult(int rc, String path, Object ctx, String name) {
            try {
                setLedgerIdGenPathStatus(HighOrderLedgerIdGenPathStatus.PRESENT);
                generateLongLedgerId(cb);
            } catch (KeeperException e) {
                LOG.error(""Failed to create long ledger ID path"", e);
                setLedgerIdGenPathStatus(HighOrderLedgerIdGenPathStatus.UNKNOWN);
                cb.operationComplete(BKException.Code.ZKException, null);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                LOG.error(""Failed to create long ledger ID path"", e);
                setLedgerIdGenPathStatus(HighOrderLedgerIdGenPathStatus.UNKNOWN);
                cb.operationComplete(BKException.Code.InterruptedException, null);
            } catch (IOException e) {
                LOG.error(""Failed to create long ledger ID path"", e);
                setLedgerIdGenPathStatus(HighOrderLedgerIdGenPathStatus.UNKNOWN);
                cb.operationComplete(BKException.Code.IllegalOpException, null);
            }
        }
    }, null);
}",java:S1172,
"protected KieBuilder createKieBuilder(KieServices ks, KieModuleModel model, ReleaseId releaseId, boolean failIfBuildError, KieFile... stringRules){
    KieFileSystem kfs = ks.newKieFileSystem();
    if (model != null) {
        kfs.writeKModuleXML(model.toXML());
    }
    kfs.writePomXML(getPom(releaseId));
    for (int i = 0; i < stringRules.length; i++) {
        kfs.write(stringRules[i].path, stringRules[i].content);
    }
    KieBuilder kieBuilder = ks.newKieBuilder(kfs).buildAll(ImpactAnalysisProject.class);
    return kieBuilder;
}",java:S1172,
"private void parseParameters(@Nullable NetworkParameters params, String addressToken, String[] nameValuePairTokens) throws BitcoinURIParseException{
    for (String nameValuePairToken : nameValuePairTokens) {
        final int sepIndex = nameValuePairToken.indexOf('=');
        if (sepIndex == -1)
            throw new BitcoinURIParseException(""Malformed Bitcoin URI - no separator in '"" + nameValuePairToken + ""'"");
        if (sepIndex == 0)
            throw new BitcoinURIParseException(""Malformed Bitcoin URI - empty name '"" + nameValuePairToken + ""'"");
        final String nameToken = nameValuePairToken.substring(0, sepIndex).toLowerCase(Locale.ENGLISH);
        final String valueToken = nameValuePairToken.substring(sepIndex + 1);
        if (FIELD_AMOUNT.equals(nameToken)) {
            try {
                Coin amount = Coin.parseCoin(valueToken);
                if (params != null && amount.isGreaterThan(params.getMaxMoney()))
                    throw new BitcoinURIParseException(""Max number of coins exceeded"");
                if (amount.signum() < 0)
                    throw new ArithmeticException(""Negative coins specified"");
                putWithValidation(FIELD_AMOUNT, amount);
            } catch (IllegalArgumentException e) {
                throw new OptionalFieldValidationException(String.format(Locale.US, ""'%s' is not a valid amount"", valueToken), e);
            } catch (ArithmeticException e) {
                throw new OptionalFieldValidationException(String.format(Locale.US, ""'%s' has too many decimal places"", valueToken), e);
            }
        } else {
            if (nameToken.startsWith(""req-"")) {
                throw new RequiredFieldValidationException(""'"" + nameToken + ""' is required but not known, this URI is not valid"");
            } else {
                try {
                    if (valueToken.length() > 0)
                        putWithValidation(nameToken, URLDecoder.decode(valueToken, ""UTF-8""));
                } catch (UnsupportedEncodingException e) {
                    throw new RuntimeException(e);
                }
            }
        }
    }
}",java:S1172,
"public Optional<VetoReason> disabledReason(final ManagedObject inObject){
    return VetoReason.bounded().toOptional();
}",java:S1172,
"public void contextInitialized(ServletContext sc){
    logger.info(""inizializzo risorsa "" + this.getClass().getSimpleName());
}",java:S1172,
"protected V callGetAndReplaceSync(K key, Data keyData, V newValue, Data newValueData, Data expiryPolicyData, boolean withCompletionEvent){
    try {
        return (V) doGetAndReplaceOnServer(keyData, newValueData, expiryPolicyData, withCompletionEvent, null).get();
    } catch (Throwable t) {
        throw ExceptionUtil.rethrow(t);
    }
}",java:S1172,
"private void createInterchanges(Context context, Referential referential, GtfsImporter importer, GtfsImportParameters configuration, GtfsTrip gtfsTrip, VehicleJourney vehicleJourney){
    for (GtfsTransfer gtfsTransfer : importer.getTransferByFromTrip().values(gtfsTrip.getTripId())) {
        if (gtfsTransfer.getFromTripId() != null && gtfsTransfer.getToTripId() != null) {
            Interchange interchange = createInterchange(referential, configuration, gtfsTransfer);
            if (gtfsTransfer.getMinTransferTime() != null && gtfsTransfer.getTransferType() == TransferType.Minimal) {
                interchange.setMinimumTransferTime(Duration.ofSeconds(gtfsTransfer.getMinTransferTime()));
                interchange.setGuaranteed(Boolean.FALSE);
            } else if (gtfsTransfer.getTransferType().equals(TransferType.Timed)) {
                interchange.setGuaranteed(Boolean.TRUE);
            }
            String feederStopAreaId = AbstractConverter.composeObjectId(configuration, ""Quay"", gtfsTransfer.getFromStopId(), log);
            JourneyPattern jp = vehicleJourney.getJourneyPattern();
            for (StopPoint sp : jp.getStopPoints()) {
                ScheduledStopPoint ssp = sp.getScheduledStopPoint();
                if (ssp.getContainedInStopAreaRef().getObjectId().equals(feederStopAreaId)) {
                    interchange.setFeederStopPoint(ssp);
                    break;
                }
            }
            interchange.setFeederVehicleJourney(vehicleJourney);
            vehicleJourney.getFeederInterchanges().add(interchange);
            createInterchangeName(interchange);
        }
    }
    for (GtfsTransfer gtfsTransfer : importer.getTransferByToTrip().values(gtfsTrip.getTripId())) {
        if (gtfsTransfer.getFromTripId() != null && gtfsTransfer.getToTripId() != null) {
            Interchange interchange = createInterchange(referential, configuration, gtfsTransfer);
            if (gtfsTransfer.getMinTransferTime() != null && gtfsTransfer.getTransferType() == TransferType.Minimal) {
                interchange.setMinimumTransferTime(Duration.ofSeconds(gtfsTransfer.getMinTransferTime()));
                interchange.setGuaranteed(Boolean.FALSE);
            } else if (gtfsTransfer.getTransferType().equals(TransferType.Timed)) {
                interchange.setGuaranteed(Boolean.TRUE);
            }
            String consumerStopAreaId = AbstractConverter.composeObjectId(configuration, ""Quay"", gtfsTransfer.getToStopId(), log);
            JourneyPattern jp = vehicleJourney.getJourneyPattern();
            for (StopPoint sp : jp.getStopPoints()) {
                ScheduledStopPoint ssp = sp.getScheduledStopPoint();
                if (ssp.getContainedInStopAreaRef().getObjectId().equals(consumerStopAreaId)) {
                    interchange.setConsumerStopPoint(ssp);
                    break;
                }
            }
            interchange.setConsumerVehicleJourney(vehicleJourney);
            vehicleJourney.getConsumerInterchanges().add(interchange);
            createInterchangeName(interchange);
        }
    }
}",java:S1172,
"public void setContents(String sequence, ArrayList features) throws CompoundNotFoundException{
    setContents(sequence);
}",java:S1172,
"public void setupParallelExecution(InternalRuleBase kbase){
    parallelExecution = true;
}",java:S1172,
"private RocksDB initializeRocksDBWithConfFile(String basePath, String subPath, DbConfigType dbConfigType, ServerConfiguration conf, boolean readOnly, String dbFilePath) throws IOException{
    DBOptions dbOptions = new DBOptions();
    final List<ColumnFamilyDescriptor> cfDescs = new ArrayList<>();
    final List<ColumnFamilyHandle> cfHandles = new ArrayList<>();
    try {
        OptionsUtil.loadOptionsFromFile(dbFilePath, Env.getDefault(), dbOptions, cfDescs, false);
        String logPath = conf.getString(ROCKSDB_LOG_PATH, """");
        if (!logPath.isEmpty()) {
            Path logPathSetting = FileSystems.getDefault().getPath(logPath, subPath);
            Files.createDirectories(logPathSetting);
            log.info(""RocksDB<{}> log path: {}"", subPath, logPathSetting);
            dbOptions.setDbLogDir(logPathSetting.toString());
        }
        String path = FileSystems.getDefault().getPath(basePath, subPath).toFile().toString();
        this.options = dbOptions;
        this.columnFamilyDescriptors = cfDescs;
        if (readOnly) {
            return RocksDB.openReadOnly(dbOptions, path, cfDescs, cfHandles);
        } else {
            return RocksDB.open(dbOptions, path, cfDescs, cfHandles);
        }
    } catch (RocksDBException e) {
        throw new IOException(""Error open RocksDB database"", e);
    }
}",java:S1172,
"public static void generateColumns(Properties tbl, List<ColumnMapping> columnsMapping, StringBuilder sb){
    if (columnsMapping == null) {
        throw new IllegalArgumentException(""columnsMapping cannot be null"");
    }
    if (sb == null) {
        throw new IllegalArgumentException(""StringBuilder cannot be null"");
    }
    for (int i = 0; i < columnsMapping.size(); i++) {
        ColumnMapping colMap = columnsMapping.get(i);
        if (colMap.hbaseRowKey) {
            sb.append(""key"").append(StringUtils.COMMA_STR);
        } else if (colMap.qualifierName == null) {
            if (colMap.qualifierPrefix != null) {
                sb.append(filter(colMap.familyName)).append(""_"").append(filter(colMap.qualifierPrefix) + i).append(StringUtils.COMMA_STR);
            } else {
                sb.append(filter(colMap.familyName)).append(""_"").append(""col"" + i).append(StringUtils.COMMA_STR);
            }
        } else {
            sb.append(filter(colMap.familyName)).append(""_"").append(filter(colMap.qualifierName)).append(StringUtils.COMMA_STR);
        }
    }
    trim(sb);
    LOG.debug(""Generated columns: [{}]"", sb);
}",java:S1172,
"private RepositoryServicePort getRepositoryService(boolean forceLoading) throws Exception{
    String method = ""getRepositoryService"";
    log.debug(method + "". BEGIN"");
    try {
        if (repositoryService == null) {
            repositoryService = acarisServiceFactory.getAcarisService().getRepositoryServicePort();
        }
        log.info(method + "". AcarisRepositoryServiceInterface loaded correctly"");
    } catch (Exception e) {
        log.error(method + "". Exception loading interface "" + e);
        throw e;
    }
    return repositoryService;
}",java:S1172,
"public Shuttle preVisit(MethodDeclaration methodDeclaration){
    return this;
}",java:S1172,
"protected Boolean callPutIfAbsentSync(K key, Data keyData, V value, Data valueData, Data expiryPolicyData, boolean withCompletionEvent){
    InternalCompletableFuture<Boolean> future = doPutIfAbsentOnServer(keyData, valueData, expiryPolicyData, withCompletionEvent);
    try {
        return future.get();
    } catch (Throwable e) {
        throw rethrowAllowedTypeFirst(e, CacheException.class);
    }
}",java:S1172,
"protected boolean onEventResized(final ResizedEvent event, final CalendarResponse response){
    return false;
}",java:S1172,
"protected ChannelFuture sendMapOutput(ChannelHandlerContext ctx, Channel ch, String user, String mapId, int reduce, MapOutputInfo mapOutputInfo) throws IOException{
    final TezIndexRecord info = mapOutputInfo.indexRecord;
    final ShuffleHeader header = new ShuffleHeader(mapId, info.getPartLength(), info.getRawLength(), reduce);
    final DataOutputBuffer dob = new DataOutputBuffer();
    header.write(dob);
    ch.write(wrappedBuffer(dob.getData(), 0, dob.getLength()));
    final File spillfile = new File(mapOutputInfo.mapOutputFileName.toString());
    RandomAccessFile spill;
    try {
        spill = SecureIOUtils.openForRandomRead(spillfile, ""r"", user, null);
    } catch (FileNotFoundException e) {
        LOG.info(spillfile + "" not found"");
        return null;
    }
    ChannelFuture writeFuture;
    if (ch.pipeline().get(SslHandler.class) == null) {
        boolean canEvictAfterTransfer = true;
        if (!shouldAlwaysEvictOsCache) {
            canEvictAfterTransfer = (reduce > 0);
        }
        final FadvisedFileRegion partition = new FadvisedFileRegion(spill, info.getStartOffset(), info.getPartLength(), manageOsCache, readaheadLength, readaheadPool, spillfile.getAbsolutePath(), shuffleBufferSize, shuffleTransferToAllowed, canEvictAfterTransfer);
        writeFuture = ch.write(partition);
    } else {
        final FadvisedChunkedFile chunk = new FadvisedChunkedFile(spill, info.getStartOffset(), info.getPartLength(), sslFileBufferSize, manageOsCache, readaheadLength, readaheadPool, spillfile.getAbsolutePath());
        writeFuture = ch.write(chunk);
    }
    return writeFuture;
}",java:S1172,
"private AbstractBeanDefinition handleRealm(Node node, BeanDefinitionBuilder securityConfigBuilder){
    BeanDefinitionBuilder realmConfigBuilder = createBeanBuilder(RealmConfig.class);
    AbstractBeanDefinition beanDefinition = realmConfigBuilder.getBeanDefinition();
    for (Node child : childElements(node)) {
        String nodeName = cleanNodeName(child);
        if (""authentication"".equals(nodeName)) {
            handleAuthentication(child, realmConfigBuilder);
        }
    }
    return beanDefinition;
}",java:S1172,
"public boolean post(String type, String title, String brand, String price, String summary, String cond, String Name, String Email, String num, String city, String imgpath){
    try {
        Connection con = MyCon.dbcon();
        PreparedStatement st = con.prepareStatement(""INSERT INTO product(type, title, brand, price, summary,cond,Name,Email,num,city) VALUES(?,?,?,?,?,?,?,?,?,?)"");
        st.setString(1, type);
        st.setString(2, title);
        st.setString(3, brand);
        st.setString(4, price);
        st.setString(5, summary);
        st.setString(6, cond);
        st.setString(7, Name);
        st.setString(8, Email);
        st.setString(9, num);
        st.setString(10, city);
        int i = st.executeUpdate();
        if (i == 1)
            return true;
        return false;
    } catch (Exception f) {
        f.printStackTrace();
    }
    return false;
}",java:S1172,
"public Blob toBlob(final String name, final URL resource){
    byte[] bytes = getBytes(resource);
    return new Blob(""unused"", ExcelService.XSLX_MIME_TYPE, bytes);
}",java:S1172,
"protected SqlFunction getFloorSqlFunction(TimeUnitRange flag){
    return SqlStdOperatorTable.FLOOR;
}",java:S1172,
"private String getRequestRai(HttpServletRequest request){
    Authentication auth = SecurityContextHolder.getContext().getAuthentication();
    String rai = String.valueOf(-Double.valueOf(Math.floor(100000 + random.nextDouble() * 800000)).intValue());
    if (auth == null)
        return rai;
    else {
        UserDetails user = (UserDetails) auth.getPrincipal();
        return user.getRai();
    }
}",java:S1172,
"private Boolean isAggiugiAllegatoVerbaleControdeduzioni(CnmTVerbale cnmTVerbale, UserDetails userDetails, List<TipoAllegatoVO> tipologiaAllegabili){
    Boolean isAllegatiEnable = Boolean.FALSE;
    List<CnmRVerbaleSoggetto> verbaleSoggetto = cnmRVerbaleSoggettoRepository.findByCnmTVerbale(cnmTVerbale);
    if (verbaleSoggetto != null && verbaleSoggetto.size() > 0) {
        List<CnmROrdinanzaVerbSog> ordinanzaVerbSog = cnmROrdinanzaVerbSogRepository.findByCnmRVerbaleSoggettoIn(verbaleSoggetto);
        if (ordinanzaVerbSog != null && ordinanzaVerbSog.size() > 0) {
            for (CnmROrdinanzaVerbSog tmp : ordinanzaVerbSog) {
                Long stato = new Long(tmp.getCnmDStatoOrdVerbSog().getIdStatoOrdVerbSog());
                if (stato.compareTo(new Long(7)) != 0 || stato.compareTo(new Long(8)) != 0 || stato.compareTo(new Long(9)) != 0) {
                    return Boolean.TRUE;
                }
            }
        } else
            isAllegatiEnable = Boolean.TRUE;
    } else
        isAllegatiEnable = Boolean.TRUE;
    return isAllegatiEnable;
}",java:S1172,
"public static ScannableTable eval(boolean b){
    return new ScannableTable() {

        @Override
        public Enumerable<@Nullable Object[]> scan(DataContext root) {
            return Processes.processLines(""jps"", ""-m"", ""-l"", ""-v"").select(a0 -> {
                final String[] fields = a0.split("" "");
                return new Object[] { Long.valueOf(fields[0]), fields[1] };
            });
        }

        @Override
        public RelDataType getRowType(RelDataTypeFactory typeFactory) {
            return typeFactory.builder().add(""pid"", SqlTypeName.BIGINT).add(""info"", SqlTypeName.VARCHAR).build();
        }

        @Override
        public Statistic getStatistic() {
            return Statistics.of(1000d, ImmutableList.of(ImmutableBitSet.of(1)));
        }

        @Override
        public Schema.TableType getJdbcTableType() {
            return Schema.TableType.TABLE;
        }

        @Override
        public boolean isRolledUp(String column) {
            return false;
        }

        @Override
        public boolean rolledUpColumnValidInsideAgg(String column, SqlCall call, @Nullable SqlNode parent, @Nullable CalciteConnectionConfig config) {
            return true;
        }
    };
}",java:S1172,
"private void listenOn(InetSocketAddress address, BookieSocketAddress bookieAddress) throws InterruptedException{
    if (!conf.isDisableServerSocketBind()) {
        ServerBootstrap bootstrap = new ServerBootstrap();
        bootstrap.option(ChannelOption.ALLOCATOR, allocator);
        bootstrap.childOption(ChannelOption.ALLOCATOR, allocator);
        bootstrap.group(eventLoopGroup, eventLoopGroup);
        bootstrap.childOption(ChannelOption.TCP_NODELAY, conf.getServerTcpNoDelay());
        bootstrap.childOption(ChannelOption.SO_LINGER, conf.getServerSockLinger());
        bootstrap.childOption(ChannelOption.RCVBUF_ALLOCATOR, new AdaptiveRecvByteBufAllocator(conf.getRecvByteBufAllocatorSizeMin(), conf.getRecvByteBufAllocatorSizeInitial(), conf.getRecvByteBufAllocatorSizeMax()));
        bootstrap.option(ChannelOption.WRITE_BUFFER_WATER_MARK, new WriteBufferWaterMark(conf.getServerWriteBufferLowWaterMark(), conf.getServerWriteBufferHighWaterMark()));
        if (eventLoopGroup instanceof EpollEventLoopGroup) {
            bootstrap.channel(EpollServerSocketChannel.class);
        } else {
            bootstrap.channel(NioServerSocketChannel.class);
        }
        bootstrap.childHandler(new ChannelInitializer<SocketChannel>() {

            @Override
            protected void initChannel(SocketChannel ch) throws Exception {
                synchronized (suspensionLock) {
                    while (suspended) {
                        suspensionLock.wait();
                    }
                }
                BookieSideConnectionPeerContextHandler contextHandler = new BookieSideConnectionPeerContextHandler();
                ChannelPipeline pipeline = ch.pipeline();
                pipeline.addLast(""bytebufList"", ByteBufList.ENCODER_WITH_SIZE);
                pipeline.addLast(""lengthbaseddecoder"", new LengthFieldBasedFrameDecoder(maxFrameSize, 0, 4, 0, 4));
                pipeline.addLast(""lengthprepender"", new LengthFieldPrepender(4));
                pipeline.addLast(""bookieProtoDecoder"", new BookieProtoEncoding.RequestDecoder(registry));
                pipeline.addLast(""bookieProtoEncoder"", new BookieProtoEncoding.ResponseEncoder(registry));
                pipeline.addLast(""bookieAuthHandler"", new AuthHandler.ServerSideHandler(contextHandler.getConnectionPeer(), authProviderFactory));
                ChannelInboundHandler requestHandler = isRunning.get() ? new BookieRequestHandler(conf, requestProcessor, allChannels) : new RejectRequestHandler();
                pipeline.addLast(""bookieRequestHandler"", requestHandler);
                pipeline.addLast(""contextHandler"", contextHandler);
            }
        });
        LOG.info(""Binding bookie-rpc endpoint to {}"", address);
        Channel listen = bootstrap.bind(address.getAddress(), address.getPort()).sync().channel();
        if (listen.localAddress() instanceof InetSocketAddress) {
            if (conf.getBookiePort() == 0) {
                conf.setBookiePort(((InetSocketAddress) listen.localAddress()).getPort());
            }
        }
    }
    if (conf.isEnableLocalTransport()) {
        ServerBootstrap jvmBootstrap = new ServerBootstrap();
        jvmBootstrap.childOption(ChannelOption.ALLOCATOR, new PooledByteBufAllocator(true));
        jvmBootstrap.group(jvmEventLoopGroup, jvmEventLoopGroup);
        jvmBootstrap.childOption(ChannelOption.TCP_NODELAY, conf.getServerTcpNoDelay());
        jvmBootstrap.childOption(ChannelOption.SO_KEEPALIVE, conf.getServerSockKeepalive());
        jvmBootstrap.childOption(ChannelOption.SO_LINGER, conf.getServerSockLinger());
        jvmBootstrap.childOption(ChannelOption.RCVBUF_ALLOCATOR, new AdaptiveRecvByteBufAllocator(conf.getRecvByteBufAllocatorSizeMin(), conf.getRecvByteBufAllocatorSizeInitial(), conf.getRecvByteBufAllocatorSizeMax()));
        jvmBootstrap.option(ChannelOption.WRITE_BUFFER_WATER_MARK, new WriteBufferWaterMark(conf.getServerWriteBufferLowWaterMark(), conf.getServerWriteBufferHighWaterMark()));
        if (jvmEventLoopGroup instanceof DefaultEventLoopGroup) {
            jvmBootstrap.channel(LocalServerChannel.class);
        } else if (jvmEventLoopGroup instanceof EpollEventLoopGroup) {
            jvmBootstrap.channel(EpollServerSocketChannel.class);
        } else {
            jvmBootstrap.channel(NioServerSocketChannel.class);
        }
        jvmBootstrap.childHandler(new ChannelInitializer<LocalChannel>() {

            @Override
            protected void initChannel(LocalChannel ch) throws Exception {
                synchronized (suspensionLock) {
                    while (suspended) {
                        suspensionLock.wait();
                    }
                }
                BookieSideConnectionPeerContextHandler contextHandler = new BookieSideConnectionPeerContextHandler();
                ChannelPipeline pipeline = ch.pipeline();
                pipeline.addLast(""lengthbaseddecoder"", new LengthFieldBasedFrameDecoder(maxFrameSize, 0, 4, 0, 4));
                pipeline.addLast(""lengthprepender"", new LengthFieldPrepender(4));
                pipeline.addLast(""bookieProtoDecoder"", new BookieProtoEncoding.RequestDecoder(registry));
                pipeline.addLast(""bookieProtoEncoder"", new BookieProtoEncoding.ResponseEncoder(registry));
                pipeline.addLast(""bookieAuthHandler"", new AuthHandler.ServerSideHandler(contextHandler.getConnectionPeer(), authProviderFactory));
                ChannelInboundHandler requestHandler = isRunning.get() ? new BookieRequestHandler(conf, requestProcessor, allChannels) : new RejectRequestHandler();
                pipeline.addLast(""bookieRequestHandler"", requestHandler);
                pipeline.addLast(""contextHandler"", contextHandler);
            }
        });
        LOG.info(""Binding jvm bookie-rpc endpoint to {}"", bookieId.toString());
        jvmBootstrap.bind(new LocalAddress(bookieId.toString())).sync();
        LocalBookiesRegistry.registerLocalBookieAddress(bookieId);
    }
}",java:S1172,
"protected Shuffle getShuffle(Configuration conf){
    return shuffle;
}",java:S1172,
"public static UnaryExpression not(Expression expression, Method method){
    return not(expression);
}",java:S1172,
"private JarReport queryFromHourlyBinary(int id, Date period, String domain) throws DalException{
    HourlyReportContent content = m_hourlyReportContentDao.findByPK(id, period, HourlyReportContentEntity.READSET_CONTENT);
    if (content != null) {
        return DefaultNativeParser.parse(content.getContent());
    } else {
        return new JarReport();
    }
}",java:S1172,
"private void startResize(MouseEvent evt){
    origX = window.getX();
    origY = window.getY();
    origW = window.getWidth();
    origH = window.getHeight();
}",java:S1172,
"public CalendarResponse refetchEvent(final String sourceId, final String eventId){
    return refetchEvents(sourceId);
}",java:S1172,
"protected String getMessageId(Exchange exchange){
    return null;
}",java:S1172,
"public static ScannableTable eval(boolean b){
    return new ScannableTable() {

        @Override
        public Enumerable<Object[]> scan(DataContext root) {
            final InputStream is = DataContext.Variable.STDIN.get(root);
            return new AbstractEnumerable<Object[]>() {

                final InputStreamReader in = new InputStreamReader(is, StandardCharsets.UTF_8);

                final BufferedReader br = new BufferedReader(in);

                @Override
                public Enumerator<Object[]> enumerator() {
                    return new Enumerator<Object[]>() {

                        @Nullable
                        String line;

                        int i;

                        @Override
                        public Object[] current() {
                            if (line == null) {
                                throw new NoSuchElementException();
                            }
                            return new Object[] { i, line };
                        }

                        @Override
                        public boolean moveNext() {
                            try {
                                line = br.readLine();
                                ++i;
                                return line != null;
                            } catch (IOException e) {
                                throw new RuntimeException(e);
                            }
                        }

                        @Override
                        public void reset() {
                            throw new UnsupportedOperationException();
                        }

                        @Override
                        public void close() {
                            try {
                                br.close();
                            } catch (IOException e) {
                                throw new RuntimeException(e);
                            }
                        }
                    };
                }
            };
        }

        @Override
        public RelDataType getRowType(RelDataTypeFactory typeFactory) {
            return typeFactory.builder().add(""ordinal"", SqlTypeName.INTEGER).add(""line"", SqlTypeName.VARCHAR).build();
        }

        @Override
        public Statistic getStatistic() {
            return Statistics.of(1000d, ImmutableList.of(ImmutableBitSet.of(1)));
        }

        @Override
        public Schema.TableType getJdbcTableType() {
            return Schema.TableType.TABLE;
        }

        @Override
        public boolean isRolledUp(String column) {
            return false;
        }

        @Override
        public boolean rolledUpColumnValidInsideAgg(String column, SqlCall call, @Nullable SqlNode parent, @Nullable CalciteConnectionConfig config) {
            return true;
        }
    };
}",java:S1172,
"public ITLType produceITL(Line line, StopArea routingConstraint, boolean addExtension){
    ITLType jaxbITL = AbstractJaxbNeptuneProducer.tridentFactory.createITLType();
    jaxbITL.setName(routingConstraint.getName());
    jaxbITL.setLineIdShortCut(line.getObjectId());
    jaxbITL.setAreaId(routingConstraint.getObjectId());
    return jaxbITL;
}",java:S1172,
"protected boolean isMergeable(C container){
    return true;
}",java:S1172,
"private Result<Object> uploadContentToStorage(User loginUser, String fullName, String tenantCode, String content){
    Result<Object> result = new Result<>();
    String localFilename = """";
    try {
        localFilename = FileUtils.getUploadFilename(tenantCode, UUID.randomUUID().toString());
        if (!FileUtils.writeContent2File(content, localFilename)) {
            log.error(""Write file error, fileName:{}, content:{}."", localFilename, RegexUtils.escapeNRT(content));
            putMsg(result, Status.RESOURCE_NOT_EXIST);
            return result;
        }
        String resourcePath = storageOperate.getResDir(tenantCode);
        log.info(""resource  path is {}, resource dir is {}"", fullName, resourcePath);
        if (!storageOperate.exists(resourcePath)) {
            storageOperate.createTenantDirIfNotExists(tenantCode);
            log.info(""Create tenant dir because path {} does not exist, tenantCode:{}."", resourcePath, tenantCode);
        }
        if (storageOperate.exists(fullName)) {
            storageOperate.delete(fullName, false);
        }
        storageOperate.upload(tenantCode, localFilename, fullName, true, true);
    } catch (Exception e) {
        log.error(""Upload content to storage error, tenantCode:{}, destFileName:{}."", tenantCode, localFilename, e);
        result.setCode(Status.HDFS_OPERATION_ERROR.getCode());
        result.setMsg(String.format(""copy %s to hdfs %s fail"", localFilename, fullName));
        return result;
    }
    log.info(""Upload content to storage complete, tenantCode:{}, destFileName:{}."", tenantCode, localFilename);
    putMsg(result, Status.SUCCESS);
    return result;
}",java:S1172,
